{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.git","hash":"042ff34da0707513a5681580b37513c890c671ef","modified":1527409906000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1527409906000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1527409906000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1527409906000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1527409906000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1527409906000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1527409906000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1527409906000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1527409906000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1527409906000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1527409906000},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1527409906000},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1527409906000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1527409906000},{"_id":"themes/next/_config.yml","hash":"14769d89a8adc12040a6f2eee56882bc57fd2462","modified":1527920757000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1527409906000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1527409907000},{"_id":"source/_posts/201805-hexo-blog-system-guide.md","hash":"fa275c2ebc22d1cc6ea60bf3916c754890a14c11","modified":1527411798000},{"_id":"source/_posts/201805-git-guide-for-freshman.md","hash":"8b75cdd9cbf05d719f4ef38a1a5780dbb5b4b242","modified":1527405404000},{"_id":"source/_posts/201805-linux-command-line-and-iterm-use-guide.md","hash":"258ce134938faf2bf8796c6aed5bf10611cccde0","modified":1527751606000},{"_id":"source/_posts/201805-hexo-transfer.md","hash":"077eeb9697c582475ea2a75d0d9b8152debdc72d","modified":1527425577000},{"_id":"source/_posts/201805-tensorflow-flags-guide.md","hash":"5b0635802cc3f18b2af7f730ad6584bb3fbbf940","modified":1527524233000},{"_id":"source/_posts/201805-vim-guide.md","hash":"99e3d1198d70fcddc7931dd82f06d8eaf2799098","modified":1527698421000},{"_id":"source/_posts/201806-google-deep-and-cross.md","hash":"bdfee468fbd9e52029415ebd906ffdccadb2b793","modified":1527995866000},{"_id":"source/_posts/201805-to-write-list.md","hash":"d84d7f735fd3286161ff040bd9800a97b6a9953e","modified":1527412079000},{"_id":"source/_posts/201805-scala-array-list-tuple-and-so-on.md","hash":"e9618b5e78417577d47d22200c0d1c04b4365954","modified":1527405404000},{"_id":"source/_posts/201806-google-wide-and-deep-network.md","hash":"1cf8e807cbae9e57d4bab33a715510c34a8f6302","modified":1528095195000},{"_id":"source/_posts/201806-tensorflow-data-generation.md","hash":"57e229541b0828b8ba488cb7705b2e3890b99b81","modified":1528014899000},{"_id":"source/_posts/201806-recommemder-alg-introduction.md","hash":"d1c64c098e42bd04045c0ee5ac44cabd23669995","modified":1528014897000},{"_id":"source/_posts/201806-tensorflow-embedding-lookup-sparse.md","hash":"ae2a7bc563dabfe1aaac6efcc32291b0e4876694","modified":1527922008000},{"_id":"source/_posts/201806-tensorflow-loss-and-regularizer.md","hash":"08d45b1b7917a418c9bdf2ad71c32d3193f5adc1","modified":1528013358000},{"_id":"source/_posts/201806-vscode-shortcuts.md","hash":"6cdc1ec27792f47476315126e2021e55287a8aaf","modified":1528906421000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1527409906000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1527409906000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1527409906000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1527409906000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1527409906000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1527409906000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1527409906000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1527409906000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1527409906000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1527409906000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1527409906000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1527409906000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1527409906000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1527409906000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1527409906000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1527409906000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1527409906000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1527409906000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1527409906000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1527409906000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1527409906000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1527409907000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1527409907000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1527409907000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1527409907000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1527409907000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1527409907000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1527409907000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1527409907000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1527409907000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1527409907000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1527409907000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1527409907000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527409907000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1527409906000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1527409906000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1527409906000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1527409906000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1527409906000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1527409906000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1527409906000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1527409906000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1527409906000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1527409906000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1527409906000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1527409906000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1527409906000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1527409906000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1527409906000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1527409906000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1527409906000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1527409906000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1527409906000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1527409906000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1527409906000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1527409906000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1527409906000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1527409906000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1527409906000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1527409907000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1527409907000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1527409907000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1527409907000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1527409907000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1527409907000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1527409907000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1527409907000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1527409907000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1527409907000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1527409907000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1527409907000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1527409907000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1527409907000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1527409907000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1527409907000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1527409907000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1527409907000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1527409907000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1527409907000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1527409907000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1527409907000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1527409907000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1527409907000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1527409907000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1527409907000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1527409907000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1527409907000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527409906000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527409906000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527409907000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527409907000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527409907000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527409907000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527409907000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1527409906000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1527409906000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1527409906000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1527409906000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1527409906000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1527409906000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1527409906000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1527409906000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1527409906000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1527409906000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1527409906000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1527409906000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1527409906000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1527409906000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1527409906000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1527409906000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1527409906000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1527409906000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1527409906000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1527409906000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1527409906000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1527409906000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1527409906000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1527409906000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1527409906000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1527409906000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1527409906000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1527409906000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1527409906000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1527409906000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1527409906000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1527409906000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1527409906000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1527409906000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1527409906000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1527409907000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1527409907000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1527409907000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1527409907000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1527409907000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1527409907000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1527409907000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1527409907000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1527409907000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1527409907000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1527409907000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1527409907000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1527409907000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1527409907000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1527409907000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1527409907000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1527409907000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1527409907000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1527409907000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1527409907000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1527409907000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1527409907000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1527409907000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1527409907000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1527409907000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1527409907000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1527409907000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1527409907000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1527409907000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1527409907000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1527409907000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1527409907000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1527409907000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1527409907000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1527409907000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1527409907000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1527409907000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1527409907000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1527409907000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1527409907000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1527409907000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1527409907000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1527409907000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1527409907000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1527409907000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1527409907000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1527409907000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1527409907000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1527409907000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1527409907000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1527409907000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1527409907000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1527409907000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1527409907000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1527409907000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1527409907000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1527409907000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1527409907000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1527409907000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1527409907000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1527409907000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1527409907000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1527409907000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1527409907000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1527409907000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1527409907000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1527409907000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1527409907000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1527409907000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1527409906000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1527409906000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1527409907000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1527409907000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1527409907000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1527409907000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1527409907000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1527409907000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1527409907000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1527409907000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1527409907000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1527409907000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1527409907000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1527409907000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1527409907000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1527409907000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1527409907000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1527409907000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1527409907000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1527409907000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1527409907000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1527409907000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1527409907000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1527409907000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1527409907000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1527409907000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1527409907000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1527409907000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1527409907000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1527409907000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1527409907000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1527409907000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1527409907000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1527409907000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1527409907000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1527409907000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1527409907000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1527409907000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1527409907000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1527409907000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1527409907000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1527409907000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1527409907000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1527409907000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1527409907000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1527409907000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1527409907000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1527409907000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1527409907000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1527409907000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1527409907000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1527409907000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1527409907000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1527409907000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1527409907000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1527409907000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1527409907000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1527409907000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1527409907000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1527409907000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1527409907000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1527409907000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1527409907000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1527409907000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1527409907000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1527409907000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1527409907000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1527409907000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1527409907000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1527409907000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1527409907000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1527409907000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1527409907000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1527409907000},{"_id":"public/2018/06/03/tensorflow-data-generation/index.html","hash":"5388a3afb882166bf81f58b0aa025864b075af20","modified":1528906439935},{"_id":"public/2018/06/03/google-deep-and-cross/index.html","hash":"72202f269a4a47fe5735eefd63f0ec40153d5edf","modified":1528906439936},{"_id":"public/2018/05/27/to-write-list/index.html","hash":"dd60ec29fe841cb5ab6e1a0bc3bfb95f34b299af","modified":1528906439936},{"_id":"public/2018/05/27/hexo-transfer/index.html","hash":"31e340a608d635a52b4f480646c2b56fd93e36ad","modified":1528906439936},{"_id":"public/2018/05/21/tensorflow-flags-guide/index.html","hash":"dff90fced53b09915399b12ace7ef2a82f31dbd0","modified":1528906439937},{"_id":"public/archives/page/2/index.html","hash":"35205438e9653be27b59587d26081e76f8db1491","modified":1528906439937},{"_id":"public/archives/2018/page/2/index.html","hash":"386a476f773b650efd8797a1cade2267b8fe24e0","modified":1528906439937},{"_id":"public/archives/2018/05/index.html","hash":"93f817e85a28d702d1b48cf0f798afc00017c475","modified":1528906439937},{"_id":"public/archives/2018/06/index.html","hash":"3e2c8ea766c30fab6526a20ba26fcca614a177aa","modified":1528906439937},{"_id":"public/tags/git/index.html","hash":"32b02a287ee27d252024d75771d91df1de4f6984","modified":1528906439937},{"_id":"public/tags/linux-command-line-iterms-shortcut/index.html","hash":"3947d9f66bd27c51bf4e43a784da06bb83d6a9ab","modified":1528906439937},{"_id":"public/tags/Linux-vim/index.html","hash":"85401e31e0cf3c8c24ca8c1af81736711123ffac","modified":1528906439937},{"_id":"public/tags/embedding-lookup-tf-gather-embedding-lookup-sparse/index.html","hash":"27604f286da1ed9a031a3103ca178a33fe7ab381","modified":1528906439937},{"_id":"public/2018/06/03/tensorflow-loss-and-regularizer/index.html","hash":"e5b48b9624627c6fcac3068f11a0962c5b832c62","modified":1528906439937},{"_id":"public/2018/06/03/recommemder-alg-introduction/index.html","hash":"0a0b9474cfd03c9faaaa124abff7812aa5439659","modified":1528906439937},{"_id":"public/2018/06/02/google-wide-and-deep-network/index.html","hash":"d25e37d20e9f537af0b866c6d7c6094296ffac02","modified":1528906439938},{"_id":"public/2018/06/01/tensorflow-embedding-lookup-sparse/index.html","hash":"3ab5aab2db9b61e7927016c83051b3a9f9a644ab","modified":1528906439938},{"_id":"public/2018/05/31/linux-command-line-and-iterm-use-guide/index.html","hash":"99e6141adc514012897be761f8a7ca58050999b4","modified":1528906439938},{"_id":"public/2018/05/20/scala-array-list-tuple-and-so-on/index.html","hash":"9350ce3c7c0360a59e0b81142b69ec096b7e3cf2","modified":1528906439938},{"_id":"public/2018/05/20/vim-guide/index.html","hash":"68f44b3fd7dd993a2b8c15ec7b00d31fcda7aded","modified":1528906439938},{"_id":"public/2018/05/18/hexo-blog-system-guide/index.html","hash":"d174891f2da0949da990ccc01a5bde1a0f8c74d8","modified":1528906439938},{"_id":"public/2018/05/18/git-guide-for-freshman/index.html","hash":"18b188e8dfec78a993b099ba26c116039715333f","modified":1528906439938},{"_id":"public/index.html","hash":"19482379b258e44d405ef5bde24218ca53899b93","modified":1528906439938},{"_id":"public/page/2/index.html","hash":"e120c2c5a3321f3e89068332891e248e2d17398f","modified":1528906439938},{"_id":"public/archives/index.html","hash":"98dace0a885db87a0c7c08fce74a6af481e6c377","modified":1528906439938},{"_id":"public/archives/2018/index.html","hash":"13e402227832fe55e5d99b46aeefa6a15a8ca380","modified":1528906439939},{"_id":"public/tags/vscode-shortcut-mac-os/index.html","hash":"43cf72932e9092d170f15faa4353fc0a60d54f10","modified":1528906439946},{"_id":"public/2018/06/13/vscode-shortcuts/index.html","hash":"0b60eaa2df137474f3988e145595f1566305a98e","modified":1528906439946},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1528906439952},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1528906439952},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1528906439952},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1528906439952},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1528906439952},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1528906439953},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1528906439953},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1528906439953},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1528906439953},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1528906439953},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1528906439953},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1528906439953},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528906439953},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528906439953},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1528906439953},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1528906439953},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1528906439954},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1528906439954},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1528906439954},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1528906439954},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1528906439954},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1528906439954},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1528906439954},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1528906439954},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1528906439954},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1528906439954},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1528906439954},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1528906439954},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1528906439954},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1528906439954},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1528906439954},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1528906439954},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1528906439955},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1528906440438},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1528906440446},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1528906440459},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1528906440459},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1528906440460},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1528906440460},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1528906440460},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1528906440460},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1528906440460},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1528906440460},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1528906440460},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1528906440460},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1528906440460},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1528906440460},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1528906440460},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1528906440460},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1528906440460},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1528906440460},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1528906440460},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1528906440460},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1528906440460},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1528906440461},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1528906440461},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1528906440461},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1528906440461},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1528906440461},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1528906440461},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1528906440461},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1528906440461},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1528906440461},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1528906440461},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1528906440461},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1528906440461},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1528906440461},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1528906440461},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1528906440461},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1528906440461},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1528906440462},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1528906440462},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1528906440462},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1528906440462},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1528906440462},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1528906440462},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1528906440462},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1528906440462},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1528906440462},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1528906440462},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1528906440462},{"_id":"public/lib/fastclick/README.html","hash":"d6e90449a2c09f3033f7e43d68b0cc8208e22e09","modified":1528906440462},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"06811ca2f722dead021493457f27cdc264ef928d","modified":1528906440462},{"_id":"public/lib/jquery_lazyload/README.html","hash":"a08fccd381c8fdb70ba8974b208254c5ba23a95f","modified":1528906440462},{"_id":"public/css/main.css","hash":"7d9c0daac91097917ba48fd8d42494365a0faed0","modified":1528906440462},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1528906440463},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1528906440463},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1528906440463},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1528906440463},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1528906440463},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1528906440463},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1528906440463},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1528906440463},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1528906440463},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1528906440463},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1528906440463},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1528906440463},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1528906440464},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1528906440464},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1528906440464},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1528906440464},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1528906440464},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1528906440464},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1528906440464},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1528906440464},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1528906440465},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1528906440465},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1528906440465},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1528906440474}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"hexo 使用指南","date":"2018-05-18T03:03:14.000Z","_content":"\n# 安装\b支持\n\n1. 安装Node.js\n\nmac系统到 node.js 官网下安装包\n\n``` bash\n# 安装 Node.js\n# 安装 Node.js 的最佳方式是使用 nvm。\n\n# cURL方式\n$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n\n# Wget方式\n$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\n\n# 安装完成后，重启终端并执行下列命令即可安装 Node.js。\n$ nvm install stable\n```\n\n2. 安装git\n\n``` bash\n# Windows：下载并安装 git.\n\n# Mac：使用 Homebrew, MacPorts ：\nbrew install git  # ;或下载 安装程序 安装。\n\n# Linux (Ubuntu, Debian)：\nsudo apt-get install git-core\n\n# Linux (Fedora, Red Hat, CentOS)：\nsudo yum install git-core\n```\n\n# 安装Hexo\n\n```\n$ sudo npm install -g hexo-cli\n```\n之后要在博客的文件夹下执行以下命令\n\n``` bash\nnpm install hexo  # 有上面一步可以省略 \nhexo init <folder>  # 初始化\ncd <folder> \nnpm install\nnpm install hexo-deployer-git\n```\n\n# 可视化写博客\n\n借助vsc、atom之类的编辑器，可以实现hexo博客的编辑和实时预览，还可以试试 `hexo-admin`这款插件。\n\n`hexo-admin` 能够管理文章，添加分类和标签，也可以一键部署到pages,现在图片可以实现粘贴上传，原插件为保存到`source/images`目录下,部署博客时同时上传。\n\n另外，还有一款`hexo-admin-qiniu` 插件，实现了自动上传文件到七牛云的配置，比较方便。（不需要先安装`hexo-admin`，直接装这个就行了）\n\n网址： [hexo-admin-qiniu github](https://github.com/xbotao/hexo-admin-qiniu)\n\n# hexo 主题\n\n> 说明：在 Hexo 中有两份主要的配置文件，其名称都是 `_config.yml`。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。\n\n为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。\n## Next\n\nNext是Hexo一个精简的主题系统，包含多种外观（Schema）选择，\b“精于心，简于形”是Next的目标。\n\n[Next主题主页](http://theme-next.iissnan.com/)\n\n### 下载主题\n\n``` bash\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n### 启用主题\n\n与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开站点配置文件 `_config.yml`， 找到 theme 字段，并将其值更改为 next。\n\n```\n# 启用 NexT 主题\ntheme: next\n```\n到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。\n\n主题设定包括：详细见官网介绍\n- 选择「Scheme」\n- 设置「界面语言」\n- 设置「菜单」\n- 设置「侧栏」\n- 设置「头像」\n- 设置「作者昵称」\n- 设置「站点描述」\n\n### 设置语言\n\n编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：\n\n`language: zh-Hans`\n\n\n# 异常\n\n- hexo本地测试运行重启后页面空白,提示 : `WARN No layout: index.html`?\n\n原因：从git hexo分支（存放hexo文件）把代码拉下来，\b之前的Next 主题被忽略了，就没拉下来，所以必须重新 git clone Next主题的\b仓库\n\n``` bash\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n- Hexo异常：fatal:inunpopulatedsubmodule'.deploy_git'怎么解决？\n\n这种情况可以先安装下相关的依赖：\n\n``` bash\nnpm install hexo-deployer-git –save\n```\n\n实在不行，就把它删掉，然后重新生成和部署。\n\n``` bash\nrm -rf .deploy_git\nhexo g\nhexo d\n```","source":"_posts/201805-hexo-blog-system-guide.md","raw":"---\ntitle: hexo 使用指南\ndate: 2018-05-18 11:03:14\ntags:\n---\n\n# 安装\b支持\n\n1. 安装Node.js\n\nmac系统到 node.js 官网下安装包\n\n``` bash\n# 安装 Node.js\n# 安装 Node.js 的最佳方式是使用 nvm。\n\n# cURL方式\n$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n\n# Wget方式\n$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\n\n# 安装完成后，重启终端并执行下列命令即可安装 Node.js。\n$ nvm install stable\n```\n\n2. 安装git\n\n``` bash\n# Windows：下载并安装 git.\n\n# Mac：使用 Homebrew, MacPorts ：\nbrew install git  # ;或下载 安装程序 安装。\n\n# Linux (Ubuntu, Debian)：\nsudo apt-get install git-core\n\n# Linux (Fedora, Red Hat, CentOS)：\nsudo yum install git-core\n```\n\n# 安装Hexo\n\n```\n$ sudo npm install -g hexo-cli\n```\n之后要在博客的文件夹下执行以下命令\n\n``` bash\nnpm install hexo  # 有上面一步可以省略 \nhexo init <folder>  # 初始化\ncd <folder> \nnpm install\nnpm install hexo-deployer-git\n```\n\n# 可视化写博客\n\n借助vsc、atom之类的编辑器，可以实现hexo博客的编辑和实时预览，还可以试试 `hexo-admin`这款插件。\n\n`hexo-admin` 能够管理文章，添加分类和标签，也可以一键部署到pages,现在图片可以实现粘贴上传，原插件为保存到`source/images`目录下,部署博客时同时上传。\n\n另外，还有一款`hexo-admin-qiniu` 插件，实现了自动上传文件到七牛云的配置，比较方便。（不需要先安装`hexo-admin`，直接装这个就行了）\n\n网址： [hexo-admin-qiniu github](https://github.com/xbotao/hexo-admin-qiniu)\n\n# hexo 主题\n\n> 说明：在 Hexo 中有两份主要的配置文件，其名称都是 `_config.yml`。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。\n\n为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。\n## Next\n\nNext是Hexo一个精简的主题系统，包含多种外观（Schema）选择，\b“精于心，简于形”是Next的目标。\n\n[Next主题主页](http://theme-next.iissnan.com/)\n\n### 下载主题\n\n``` bash\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n### 启用主题\n\n与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开站点配置文件 `_config.yml`， 找到 theme 字段，并将其值更改为 next。\n\n```\n# 启用 NexT 主题\ntheme: next\n```\n到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。\n\n主题设定包括：详细见官网介绍\n- 选择「Scheme」\n- 设置「界面语言」\n- 设置「菜单」\n- 设置「侧栏」\n- 设置「头像」\n- 设置「作者昵称」\n- 设置「站点描述」\n\n### 设置语言\n\n编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：\n\n`language: zh-Hans`\n\n\n# 异常\n\n- hexo本地测试运行重启后页面空白,提示 : `WARN No layout: index.html`?\n\n原因：从git hexo分支（存放hexo文件）把代码拉下来，\b之前的Next 主题被忽略了，就没拉下来，所以必须重新 git clone Next主题的\b仓库\n\n``` bash\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n- Hexo异常：fatal:inunpopulatedsubmodule'.deploy_git'怎么解决？\n\n这种情况可以先安装下相关的依赖：\n\n``` bash\nnpm install hexo-deployer-git –save\n```\n\n实在不行，就把它删掉，然后重新生成和部署。\n\n``` bash\nrm -rf .deploy_git\nhexo g\nhexo d\n```","slug":"hexo-blog-system-guide","published":1,"updated":"2018-05-27T09:03:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjidbf1pv0000ry1dbm5ftx0o","content":"<h1 id=\"安装支持\"><a href=\"#安装支持\" class=\"headerlink\" title=\"安装\b支持\"></a>安装\b支持</h1><ol>\n<li>安装Node.js</li>\n</ol>\n<p>mac系统到 node.js 官网下安装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 Node.js</span></span><br><span class=\"line\"><span class=\"comment\"># 安装 Node.js 的最佳方式是使用 nvm。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cURL方式</span></span><br><span class=\"line\">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Wget方式</span></span><br><span class=\"line\">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装完成后，重启终端并执行下列命令即可安装 Node.js。</span></span><br><span class=\"line\">$ nvm install stable</span><br></pre></td></tr></table></figure>\n<ol>\n<li>安装git</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Windows：下载并安装 git.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Mac：使用 Homebrew, MacPorts ：</span></span><br><span class=\"line\">brew install git  <span class=\"comment\"># ;或下载 安装程序 安装。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Linux (Ubuntu, Debian)：</span></span><br><span class=\"line\">sudo apt-get install git-core</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Linux (Fedora, Red Hat, CentOS)：</span></span><br><span class=\"line\">sudo yum install git-core</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>之后要在博客的文件夹下执行以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo  <span class=\"comment\"># 有上面一步可以省略 </span></span><br><span class=\"line\">hexo init &lt;folder&gt;  <span class=\"comment\"># 初始化</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;folder&gt; </span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>\n<h1 id=\"可视化写博客\"><a href=\"#可视化写博客\" class=\"headerlink\" title=\"可视化写博客\"></a>可视化写博客</h1><p>借助vsc、atom之类的编辑器，可以实现hexo博客的编辑和实时预览，还可以试试 <code>hexo-admin</code>这款插件。</p>\n<p><code>hexo-admin</code> 能够管理文章，添加分类和标签，也可以一键部署到pages,现在图片可以实现粘贴上传，原插件为保存到<code>source/images</code>目录下,部署博客时同时上传。</p>\n<p>另外，还有一款<code>hexo-admin-qiniu</code> 插件，实现了自动上传文件到七牛云的配置，比较方便。（不需要先安装<code>hexo-admin</code>，直接装这个就行了）</p>\n<p>网址： <a href=\"https://github.com/xbotao/hexo-admin-qiniu\" target=\"_blank\" rel=\"noopener\">hexo-admin-qiniu github</a></p>\n<h1 id=\"hexo-主题\"><a href=\"#hexo-主题\" class=\"headerlink\" title=\"hexo 主题\"></a>hexo 主题</h1><blockquote>\n<p>说明：在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>\n</blockquote>\n<p>为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。</p>\n<h2 id=\"Next\"><a href=\"#Next\" class=\"headerlink\" title=\"Next\"></a>Next</h2><p>Next是Hexo一个精简的主题系统，包含多种外观（Schema）选择，\b“精于心，简于形”是Next的目标。</p>\n<p><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">Next主题主页</a></p>\n<h3 id=\"下载主题\"><a href=\"#下载主题\" class=\"headerlink\" title=\"下载主题\"></a>下载主题</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> your-hexo-site</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<h3 id=\"启用主题\"><a href=\"#启用主题\" class=\"headerlink\" title=\"启用主题\"></a>启用主题</h3><p>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开站点配置文件 <code>_config.yml</code>， 找到 theme 字段，并将其值更改为 next。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启用 NexT 主题</span><br><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n<p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。</p>\n<p>主题设定包括：详细见官网介绍</p>\n<ul>\n<li>选择「Scheme」</li>\n<li>设置「界面语言」</li>\n<li>设置「菜单」</li>\n<li>设置「侧栏」</li>\n<li>设置「头像」</li>\n<li>设置「作者昵称」</li>\n<li>设置「站点描述」</li>\n</ul>\n<h3 id=\"设置语言\"><a href=\"#设置语言\" class=\"headerlink\" title=\"设置语言\"></a>设置语言</h3><p>编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：</p>\n<p><code>language: zh-Hans</code></p>\n<h1 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h1><ul>\n<li>hexo本地测试运行重启后页面空白,提示 : <code>WARN No layout: index.html</code>?</li>\n</ul>\n<p>原因：从git hexo分支（存放hexo文件）把代码拉下来，\b之前的Next 主题被忽略了，就没拉下来，所以必须重新 git clone Next主题的\b仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Hexo异常：fatal:inunpopulatedsubmodule’.deploy_git’怎么解决？</li>\n</ul>\n<p>这种情况可以先安装下相关的依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git –save</span><br></pre></td></tr></table></figure>\n<p>实在不行，就把它删掉，然后重新生成和部署。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf .deploy_git</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装支持\"><a href=\"#安装支持\" class=\"headerlink\" title=\"安装\b支持\"></a>安装\b支持</h1><ol>\n<li>安装Node.js</li>\n</ol>\n<p>mac系统到 node.js 官网下安装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 Node.js</span></span><br><span class=\"line\"><span class=\"comment\"># 安装 Node.js 的最佳方式是使用 nvm。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cURL方式</span></span><br><span class=\"line\">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Wget方式</span></span><br><span class=\"line\">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装完成后，重启终端并执行下列命令即可安装 Node.js。</span></span><br><span class=\"line\">$ nvm install stable</span><br></pre></td></tr></table></figure>\n<ol>\n<li>安装git</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Windows：下载并安装 git.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Mac：使用 Homebrew, MacPorts ：</span></span><br><span class=\"line\">brew install git  <span class=\"comment\"># ;或下载 安装程序 安装。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Linux (Ubuntu, Debian)：</span></span><br><span class=\"line\">sudo apt-get install git-core</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Linux (Fedora, Red Hat, CentOS)：</span></span><br><span class=\"line\">sudo yum install git-core</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>之后要在博客的文件夹下执行以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo  <span class=\"comment\"># 有上面一步可以省略 </span></span><br><span class=\"line\">hexo init &lt;folder&gt;  <span class=\"comment\"># 初始化</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;folder&gt; </span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>\n<h1 id=\"可视化写博客\"><a href=\"#可视化写博客\" class=\"headerlink\" title=\"可视化写博客\"></a>可视化写博客</h1><p>借助vsc、atom之类的编辑器，可以实现hexo博客的编辑和实时预览，还可以试试 <code>hexo-admin</code>这款插件。</p>\n<p><code>hexo-admin</code> 能够管理文章，添加分类和标签，也可以一键部署到pages,现在图片可以实现粘贴上传，原插件为保存到<code>source/images</code>目录下,部署博客时同时上传。</p>\n<p>另外，还有一款<code>hexo-admin-qiniu</code> 插件，实现了自动上传文件到七牛云的配置，比较方便。（不需要先安装<code>hexo-admin</code>，直接装这个就行了）</p>\n<p>网址： <a href=\"https://github.com/xbotao/hexo-admin-qiniu\" target=\"_blank\" rel=\"noopener\">hexo-admin-qiniu github</a></p>\n<h1 id=\"hexo-主题\"><a href=\"#hexo-主题\" class=\"headerlink\" title=\"hexo 主题\"></a>hexo 主题</h1><blockquote>\n<p>说明：在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>\n</blockquote>\n<p>为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。</p>\n<h2 id=\"Next\"><a href=\"#Next\" class=\"headerlink\" title=\"Next\"></a>Next</h2><p>Next是Hexo一个精简的主题系统，包含多种外观（Schema）选择，\b“精于心，简于形”是Next的目标。</p>\n<p><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">Next主题主页</a></p>\n<h3 id=\"下载主题\"><a href=\"#下载主题\" class=\"headerlink\" title=\"下载主题\"></a>下载主题</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> your-hexo-site</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<h3 id=\"启用主题\"><a href=\"#启用主题\" class=\"headerlink\" title=\"启用主题\"></a>启用主题</h3><p>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开站点配置文件 <code>_config.yml</code>， 找到 theme 字段，并将其值更改为 next。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启用 NexT 主题</span><br><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n<p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。</p>\n<p>主题设定包括：详细见官网介绍</p>\n<ul>\n<li>选择「Scheme」</li>\n<li>设置「界面语言」</li>\n<li>设置「菜单」</li>\n<li>设置「侧栏」</li>\n<li>设置「头像」</li>\n<li>设置「作者昵称」</li>\n<li>设置「站点描述」</li>\n</ul>\n<h3 id=\"设置语言\"><a href=\"#设置语言\" class=\"headerlink\" title=\"设置语言\"></a>设置语言</h3><p>编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：</p>\n<p><code>language: zh-Hans</code></p>\n<h1 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h1><ul>\n<li>hexo本地测试运行重启后页面空白,提示 : <code>WARN No layout: index.html</code>?</li>\n</ul>\n<p>原因：从git hexo分支（存放hexo文件）把代码拉下来，\b之前的Next 主题被忽略了，就没拉下来，所以必须重新 git clone Next主题的\b仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Hexo异常：fatal:inunpopulatedsubmodule’.deploy_git’怎么解决？</li>\n</ul>\n<p>这种情况可以先安装下相关的依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git –save</span><br></pre></td></tr></table></figure>\n<p>实在不行，就把它删掉，然后重新生成和部署。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf .deploy_git</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>"},{"title":"git 使用指南","date":"2018-05-17T16:11:03.000Z","_content":"\n# 克隆 git 仓库\n\n命令\n\n``` bash\ngit clone <remote_repo> -b <branch>\n```\n\n# 远程仓库\n\n## 添加远程仓库\n\n``` bash\ngit remote add origin http://192.168.36.10:10080/quantum_rng_testing/nist # （”quantum_rng_testing/nist“ 为工程的目录）\n```\n\n## git push 命令\n\ngit push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相似。\n\n```\n$ git push [参数] <远程主机名> <本地分支名>:<远程分支名>\n```\n参数：\n- -u 第一次推送的时候，可以将分支进行关联，以后只要 `git push` 就行了\n\n### 删除远程分支\n如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。\n```\n$ git push origin :master\n# 等同于\n$ git push origin --delete master\n```\n\n### 强制覆盖远程分支\n\n``` bash\n# 方法一\ngit push origin develop:master -f # 就可以把本地的develop分支强制(-f)推送到远程master\n\n# 方法二 \ngit checkout master \t\t# 切换到旧的分支 \ngit reset –hard develop \t# 将本地的旧分支 master 重置成 develop \ngit push origin master –force \t# 再推送到远程仓库\n```\n\n### 推送本地所有分支\n不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用–all选项。\n```\ngit push --all origin\n\n```\n\n## 放弃本地所有修改，强制拉取远程更新\n\n开发时，对于本地的项目中修改不做保存操作（或代码改崩），可以用到Git pull的强制覆盖，具体代码如下：\n\n``` bash\ngit fetch --all\ngit reset --hard origin/master\ngit pull //可以省略\n```\ngit fetch 指令是下载远程仓库最新内容，不做合并 \ngit reset 指令把HEAD指向master最新版本\n\n\n## 查看远程分支\n\n查看远程分支\n```\ngit branch -r \n```\n\n## 拉取远程分支并创建本地分支\n\n### 方法一\n\n使用如下命令：\n```\ngit checkout -b 本地分支名 origin/远程分支名\n```\n使用该方式会在本地新建分支，并自动切换到该本地分支x\n\n> 采用此种方法建立的本地分支会和远程分支建立映射关系。\n\n### 方式二\n\n使用如下命令：\n```\ngit fetch origin 远程分支名x:本地分支名x\n```\n\n使用该方式会在本地新建分支x，但是不会自动切换到该本地分支x，需要手动checkout。\n\n> 采用此种方法建立的本地分支不会和远程分支建立映射关系。\n\n### 本地分支和远程分支建立映射关系的作用\n\nref: 博文[Git branch upstream](https://blog.csdn.net/tterminator/article/details/78108550)\n\n#### 目标\n\n本博文中git操作的目标为建立本地分支与远程分支的映射关系（或者为跟踪关系track）。这样使用 `git pull` 或者 `git push` 时就不必每次都要指定从远程的哪个分支拉取合并和推送到远程的哪个分支了。\n\n#### 查看本地分支与远程分支的映射关系\n\n使用以下命令（注意是双v）：\n\n```\ngit branch -vv\n```\n\n可以获得如下信息： \n```\n* hexo   d60a56a create the world\n  master 649e511 [origin/master: ahead 6, behind 3] Site updated: 2018-04-22 18:23:40\n```\n可以看到分支hexo没有和远程分支建立任何映射，此时若执行如下拉取命令则不成功（因为git此时不知道拉取哪个远程分支和本地分支合并）： \n```\n$ git pull\nThere is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\n\n    git pull <remote> <branch>\n\nIf you wish to set tracking information for this branch you can do so with:\n\n    git branch --set-upstream-to=origin/<branch> hexo\n```\n同理，若此时执行如下推送命令同样不成功： \n```\n$ git pull\nThere is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\n\n    git pull <remote> <branch>\n\nIf you wish to set tracking information for this branch you can do so with:\n\n    git branch --set-upstream-to=origin/<branch> hexo\n\nKevin-MacBook-Air:blog arthur-mac$ git push\nfatal: The current branch hexo has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin hexo\n```\n\n#### 建立本地分支与远程分支的映射关系\n\n建立当前分支与远程分支的映射关系:\n```\ngit branch -u origin/hexo\n```\n\n或者使用命令：\n```\ngit branch --set-upstream-to origin/hexo\n```\n得到结果如下： \n```\nBranch 'hexo' set up to track remote branch 'hexo' from 'origin'.\n```\n查看当前本地分支与远程分支的映射关系结果如下： \n```\n$ git branch -vv\n* hexo   d60a56a [origin/hexo] create the world\n  master 649e511 [origin/master: ahead 6, behind 3] Site updated: 2018-04-22 18:23:40\n```\n此时就能够正常的拉取和推送了。\n\n#### 撤销本地分支与远程分支的映射关系\n撤销本地分支与远程分支的映射关系\n\n```\ngit branch --unset-upstream\n```\n使用git branch -vv得到结果如下： \n```\n$ git branch -vv\n* hexo   d60a56a create the world\n  master 649e511 [origin/master: ahead 6, behind 3] Site updated: 2018-04-22 18:23:40\n```\n可以看到本地分支与远程分支的映射关系已经撤销。\n\n#### 问题思考：本地分支只能跟踪远程的同名分支吗？\n\n答案是否定的，本地分支可以与远程不同名的分支建立映射关系。\n","source":"_posts/201805-git-guide-for-freshman.md","raw":"title: git 使用指南\ntags: git\ndate: 2018-05-18 00:11:03\n---\n\n# 克隆 git 仓库\n\n命令\n\n``` bash\ngit clone <remote_repo> -b <branch>\n```\n\n# 远程仓库\n\n## 添加远程仓库\n\n``` bash\ngit remote add origin http://192.168.36.10:10080/quantum_rng_testing/nist # （”quantum_rng_testing/nist“ 为工程的目录）\n```\n\n## git push 命令\n\ngit push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相似。\n\n```\n$ git push [参数] <远程主机名> <本地分支名>:<远程分支名>\n```\n参数：\n- -u 第一次推送的时候，可以将分支进行关联，以后只要 `git push` 就行了\n\n### 删除远程分支\n如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。\n```\n$ git push origin :master\n# 等同于\n$ git push origin --delete master\n```\n\n### 强制覆盖远程分支\n\n``` bash\n# 方法一\ngit push origin develop:master -f # 就可以把本地的develop分支强制(-f)推送到远程master\n\n# 方法二 \ngit checkout master \t\t# 切换到旧的分支 \ngit reset –hard develop \t# 将本地的旧分支 master 重置成 develop \ngit push origin master –force \t# 再推送到远程仓库\n```\n\n### 推送本地所有分支\n不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用–all选项。\n```\ngit push --all origin\n\n```\n\n## 放弃本地所有修改，强制拉取远程更新\n\n开发时，对于本地的项目中修改不做保存操作（或代码改崩），可以用到Git pull的强制覆盖，具体代码如下：\n\n``` bash\ngit fetch --all\ngit reset --hard origin/master\ngit pull //可以省略\n```\ngit fetch 指令是下载远程仓库最新内容，不做合并 \ngit reset 指令把HEAD指向master最新版本\n\n\n## 查看远程分支\n\n查看远程分支\n```\ngit branch -r \n```\n\n## 拉取远程分支并创建本地分支\n\n### 方法一\n\n使用如下命令：\n```\ngit checkout -b 本地分支名 origin/远程分支名\n```\n使用该方式会在本地新建分支，并自动切换到该本地分支x\n\n> 采用此种方法建立的本地分支会和远程分支建立映射关系。\n\n### 方式二\n\n使用如下命令：\n```\ngit fetch origin 远程分支名x:本地分支名x\n```\n\n使用该方式会在本地新建分支x，但是不会自动切换到该本地分支x，需要手动checkout。\n\n> 采用此种方法建立的本地分支不会和远程分支建立映射关系。\n\n### 本地分支和远程分支建立映射关系的作用\n\nref: 博文[Git branch upstream](https://blog.csdn.net/tterminator/article/details/78108550)\n\n#### 目标\n\n本博文中git操作的目标为建立本地分支与远程分支的映射关系（或者为跟踪关系track）。这样使用 `git pull` 或者 `git push` 时就不必每次都要指定从远程的哪个分支拉取合并和推送到远程的哪个分支了。\n\n#### 查看本地分支与远程分支的映射关系\n\n使用以下命令（注意是双v）：\n\n```\ngit branch -vv\n```\n\n可以获得如下信息： \n```\n* hexo   d60a56a create the world\n  master 649e511 [origin/master: ahead 6, behind 3] Site updated: 2018-04-22 18:23:40\n```\n可以看到分支hexo没有和远程分支建立任何映射，此时若执行如下拉取命令则不成功（因为git此时不知道拉取哪个远程分支和本地分支合并）： \n```\n$ git pull\nThere is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\n\n    git pull <remote> <branch>\n\nIf you wish to set tracking information for this branch you can do so with:\n\n    git branch --set-upstream-to=origin/<branch> hexo\n```\n同理，若此时执行如下推送命令同样不成功： \n```\n$ git pull\nThere is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\n\n    git pull <remote> <branch>\n\nIf you wish to set tracking information for this branch you can do so with:\n\n    git branch --set-upstream-to=origin/<branch> hexo\n\nKevin-MacBook-Air:blog arthur-mac$ git push\nfatal: The current branch hexo has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin hexo\n```\n\n#### 建立本地分支与远程分支的映射关系\n\n建立当前分支与远程分支的映射关系:\n```\ngit branch -u origin/hexo\n```\n\n或者使用命令：\n```\ngit branch --set-upstream-to origin/hexo\n```\n得到结果如下： \n```\nBranch 'hexo' set up to track remote branch 'hexo' from 'origin'.\n```\n查看当前本地分支与远程分支的映射关系结果如下： \n```\n$ git branch -vv\n* hexo   d60a56a [origin/hexo] create the world\n  master 649e511 [origin/master: ahead 6, behind 3] Site updated: 2018-04-22 18:23:40\n```\n此时就能够正常的拉取和推送了。\n\n#### 撤销本地分支与远程分支的映射关系\n撤销本地分支与远程分支的映射关系\n\n```\ngit branch --unset-upstream\n```\n使用git branch -vv得到结果如下： \n```\n$ git branch -vv\n* hexo   d60a56a create the world\n  master 649e511 [origin/master: ahead 6, behind 3] Site updated: 2018-04-22 18:23:40\n```\n可以看到本地分支与远程分支的映射关系已经撤销。\n\n#### 问题思考：本地分支只能跟踪远程的同名分支吗？\n\n答案是否定的，本地分支可以与远程不同名的分支建立映射关系。\n","slug":"git-guide-for-freshman","published":1,"updated":"2018-05-27T07:16:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjidbf1q00001ry1d1mu5d3lz","content":"<h1 id=\"克隆-git-仓库\"><a href=\"#克隆-git-仓库\" class=\"headerlink\" title=\"克隆 git 仓库\"></a>克隆 git 仓库</h1><p>命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> &lt;remote_repo&gt; -b &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h1><h2 id=\"添加远程仓库\"><a href=\"#添加远程仓库\" class=\"headerlink\" title=\"添加远程仓库\"></a>添加远程仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin http://192.168.36.10:10080/quantum_rng_testing/nist <span class=\"comment\"># （”quantum_rng_testing/nist“ 为工程的目录）</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"git-push-命令\"><a href=\"#git-push-命令\" class=\"headerlink\" title=\"git push 命令\"></a>git push 命令</h2><p>git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相似。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push [参数] &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure>\n<p>参数：</p>\n<ul>\n<li>-u 第一次推送的时候，可以将分支进行关联，以后只要 <code>git push</code> 就行了</li>\n</ul>\n<h3 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h3><p>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin :master</span><br><span class=\"line\"># 等同于</span><br><span class=\"line\">$ git push origin --delete master</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"强制覆盖远程分支\"><a href=\"#强制覆盖远程分支\" class=\"headerlink\" title=\"强制覆盖远程分支\"></a>强制覆盖远程分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方法一</span></span><br><span class=\"line\">git push origin develop:master -f <span class=\"comment\"># 就可以把本地的develop分支强制(-f)推送到远程master</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法二 </span></span><br><span class=\"line\">git checkout master \t\t<span class=\"comment\"># 切换到旧的分支 </span></span><br><span class=\"line\">git reset –hard develop \t<span class=\"comment\"># 将本地的旧分支 master 重置成 develop </span></span><br><span class=\"line\">git push origin master –force \t<span class=\"comment\"># 再推送到远程仓库</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"推送本地所有分支\"><a href=\"#推送本地所有分支\" class=\"headerlink\" title=\"推送本地所有分支\"></a>推送本地所有分支</h3><p>不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用–all选项。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --all origin</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"放弃本地所有修改，强制拉取远程更新\"><a href=\"#放弃本地所有修改，强制拉取远程更新\" class=\"headerlink\" title=\"放弃本地所有修改，强制拉取远程更新\"></a>放弃本地所有修改，强制拉取远程更新</h2><p>开发时，对于本地的项目中修改不做保存操作（或代码改崩），可以用到Git pull的强制覆盖，具体代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all</span><br><span class=\"line\">git reset --hard origin/master</span><br><span class=\"line\">git pull //可以省略</span><br></pre></td></tr></table></figure>\n<p>git fetch 指令是下载远程仓库最新内容，不做合并<br>git reset 指令把HEAD指向master最新版本</p>\n<h2 id=\"查看远程分支\"><a href=\"#查看远程分支\" class=\"headerlink\" title=\"查看远程分支\"></a>查看远程分支</h2><p>查看远程分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"拉取远程分支并创建本地分支\"><a href=\"#拉取远程分支并创建本地分支\" class=\"headerlink\" title=\"拉取远程分支并创建本地分支\"></a>拉取远程分支并创建本地分支</h2><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>使用如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b 本地分支名 origin/远程分支名</span><br></pre></td></tr></table></figure></p>\n<p>使用该方式会在本地新建分支，并自动切换到该本地分支x</p>\n<blockquote>\n<p>采用此种方法建立的本地分支会和远程分支建立映射关系。</p>\n</blockquote>\n<h3 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h3><p>使用如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin 远程分支名x:本地分支名x</span><br></pre></td></tr></table></figure></p>\n<p>使用该方式会在本地新建分支x，但是不会自动切换到该本地分支x，需要手动checkout。</p>\n<blockquote>\n<p>采用此种方法建立的本地分支不会和远程分支建立映射关系。</p>\n</blockquote>\n<h3 id=\"本地分支和远程分支建立映射关系的作用\"><a href=\"#本地分支和远程分支建立映射关系的作用\" class=\"headerlink\" title=\"本地分支和远程分支建立映射关系的作用\"></a>本地分支和远程分支建立映射关系的作用</h3><p>ref: 博文<a href=\"https://blog.csdn.net/tterminator/article/details/78108550\" target=\"_blank\" rel=\"noopener\">Git branch upstream</a></p>\n<h4 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h4><p>本博文中git操作的目标为建立本地分支与远程分支的映射关系（或者为跟踪关系track）。这样使用 <code>git pull</code> 或者 <code>git push</code> 时就不必每次都要指定从远程的哪个分支拉取合并和推送到远程的哪个分支了。</p>\n<h4 id=\"查看本地分支与远程分支的映射关系\"><a href=\"#查看本地分支与远程分支的映射关系\" class=\"headerlink\" title=\"查看本地分支与远程分支的映射关系\"></a>查看本地分支与远程分支的映射关系</h4><p>使用以下命令（注意是双v）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv</span><br></pre></td></tr></table></figure>\n<p>可以获得如下信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* hexo   d60a56a create the world</span><br><span class=\"line\">  master 649e511 [origin/master: ahead 6, behind 3] Site updated: 2018-04-22 18:23:40</span><br></pre></td></tr></table></figure></p>\n<p>可以看到分支hexo没有和远程分支建立任何映射，此时若执行如下拉取命令则不成功（因为git此时不知道拉取哪个远程分支和本地分支合并）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br><span class=\"line\">There is no tracking information for the current branch.</span><br><span class=\"line\">Please specify which branch you want to merge with.</span><br><span class=\"line\">See git-pull(1) for details.</span><br><span class=\"line\"></span><br><span class=\"line\">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">If you wish to set tracking information for this branch you can do so with:</span><br><span class=\"line\"></span><br><span class=\"line\">    git branch --set-upstream-to=origin/&lt;branch&gt; hexo</span><br></pre></td></tr></table></figure></p>\n<p>同理，若此时执行如下推送命令同样不成功：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br><span class=\"line\">There is no tracking information for the current branch.</span><br><span class=\"line\">Please specify which branch you want to merge with.</span><br><span class=\"line\">See git-pull(1) for details.</span><br><span class=\"line\"></span><br><span class=\"line\">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">If you wish to set tracking information for this branch you can do so with:</span><br><span class=\"line\"></span><br><span class=\"line\">    git branch --set-upstream-to=origin/&lt;branch&gt; hexo</span><br><span class=\"line\"></span><br><span class=\"line\">Kevin-MacBook-Air:blog arthur-mac$ git push</span><br><span class=\"line\">fatal: The current branch hexo has no upstream branch.</span><br><span class=\"line\">To push the current branch and set the remote as upstream, use</span><br><span class=\"line\"></span><br><span class=\"line\">    git push --set-upstream origin hexo</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"建立本地分支与远程分支的映射关系\"><a href=\"#建立本地分支与远程分支的映射关系\" class=\"headerlink\" title=\"建立本地分支与远程分支的映射关系\"></a>建立本地分支与远程分支的映射关系</h4><p>建立当前分支与远程分支的映射关系:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -u origin/hexo</span><br></pre></td></tr></table></figure></p>\n<p>或者使用命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --set-upstream-to origin/hexo</span><br></pre></td></tr></table></figure></p>\n<p>得到结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Branch &apos;hexo&apos; set up to track remote branch &apos;hexo&apos; from &apos;origin&apos;.</span><br></pre></td></tr></table></figure></p>\n<p>查看当前本地分支与远程分支的映射关系结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -vv</span><br><span class=\"line\">* hexo   d60a56a [origin/hexo] create the world</span><br><span class=\"line\">  master 649e511 [origin/master: ahead 6, behind 3] Site updated: 2018-04-22 18:23:40</span><br></pre></td></tr></table></figure></p>\n<p>此时就能够正常的拉取和推送了。</p>\n<h4 id=\"撤销本地分支与远程分支的映射关系\"><a href=\"#撤销本地分支与远程分支的映射关系\" class=\"headerlink\" title=\"撤销本地分支与远程分支的映射关系\"></a>撤销本地分支与远程分支的映射关系</h4><p>撤销本地分支与远程分支的映射关系</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --unset-upstream</span><br></pre></td></tr></table></figure>\n<p>使用git branch -vv得到结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -vv</span><br><span class=\"line\">* hexo   d60a56a create the world</span><br><span class=\"line\">  master 649e511 [origin/master: ahead 6, behind 3] Site updated: 2018-04-22 18:23:40</span><br></pre></td></tr></table></figure></p>\n<p>可以看到本地分支与远程分支的映射关系已经撤销。</p>\n<h4 id=\"问题思考：本地分支只能跟踪远程的同名分支吗？\"><a href=\"#问题思考：本地分支只能跟踪远程的同名分支吗？\" class=\"headerlink\" title=\"问题思考：本地分支只能跟踪远程的同名分支吗？\"></a>问题思考：本地分支只能跟踪远程的同名分支吗？</h4><p>答案是否定的，本地分支可以与远程不同名的分支建立映射关系。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"克隆-git-仓库\"><a href=\"#克隆-git-仓库\" class=\"headerlink\" title=\"克隆 git 仓库\"></a>克隆 git 仓库</h1><p>命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> &lt;remote_repo&gt; -b &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h1><h2 id=\"添加远程仓库\"><a href=\"#添加远程仓库\" class=\"headerlink\" title=\"添加远程仓库\"></a>添加远程仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin http://192.168.36.10:10080/quantum_rng_testing/nist <span class=\"comment\"># （”quantum_rng_testing/nist“ 为工程的目录）</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"git-push-命令\"><a href=\"#git-push-命令\" class=\"headerlink\" title=\"git push 命令\"></a>git push 命令</h2><p>git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相似。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push [参数] &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure>\n<p>参数：</p>\n<ul>\n<li>-u 第一次推送的时候，可以将分支进行关联，以后只要 <code>git push</code> 就行了</li>\n</ul>\n<h3 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h3><p>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin :master</span><br><span class=\"line\"># 等同于</span><br><span class=\"line\">$ git push origin --delete master</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"强制覆盖远程分支\"><a href=\"#强制覆盖远程分支\" class=\"headerlink\" title=\"强制覆盖远程分支\"></a>强制覆盖远程分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方法一</span></span><br><span class=\"line\">git push origin develop:master -f <span class=\"comment\"># 就可以把本地的develop分支强制(-f)推送到远程master</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法二 </span></span><br><span class=\"line\">git checkout master \t\t<span class=\"comment\"># 切换到旧的分支 </span></span><br><span class=\"line\">git reset –hard develop \t<span class=\"comment\"># 将本地的旧分支 master 重置成 develop </span></span><br><span class=\"line\">git push origin master –force \t<span class=\"comment\"># 再推送到远程仓库</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"推送本地所有分支\"><a href=\"#推送本地所有分支\" class=\"headerlink\" title=\"推送本地所有分支\"></a>推送本地所有分支</h3><p>不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用–all选项。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --all origin</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"放弃本地所有修改，强制拉取远程更新\"><a href=\"#放弃本地所有修改，强制拉取远程更新\" class=\"headerlink\" title=\"放弃本地所有修改，强制拉取远程更新\"></a>放弃本地所有修改，强制拉取远程更新</h2><p>开发时，对于本地的项目中修改不做保存操作（或代码改崩），可以用到Git pull的强制覆盖，具体代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all</span><br><span class=\"line\">git reset --hard origin/master</span><br><span class=\"line\">git pull //可以省略</span><br></pre></td></tr></table></figure>\n<p>git fetch 指令是下载远程仓库最新内容，不做合并<br>git reset 指令把HEAD指向master最新版本</p>\n<h2 id=\"查看远程分支\"><a href=\"#查看远程分支\" class=\"headerlink\" title=\"查看远程分支\"></a>查看远程分支</h2><p>查看远程分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"拉取远程分支并创建本地分支\"><a href=\"#拉取远程分支并创建本地分支\" class=\"headerlink\" title=\"拉取远程分支并创建本地分支\"></a>拉取远程分支并创建本地分支</h2><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>使用如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b 本地分支名 origin/远程分支名</span><br></pre></td></tr></table></figure></p>\n<p>使用该方式会在本地新建分支，并自动切换到该本地分支x</p>\n<blockquote>\n<p>采用此种方法建立的本地分支会和远程分支建立映射关系。</p>\n</blockquote>\n<h3 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h3><p>使用如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin 远程分支名x:本地分支名x</span><br></pre></td></tr></table></figure></p>\n<p>使用该方式会在本地新建分支x，但是不会自动切换到该本地分支x，需要手动checkout。</p>\n<blockquote>\n<p>采用此种方法建立的本地分支不会和远程分支建立映射关系。</p>\n</blockquote>\n<h3 id=\"本地分支和远程分支建立映射关系的作用\"><a href=\"#本地分支和远程分支建立映射关系的作用\" class=\"headerlink\" title=\"本地分支和远程分支建立映射关系的作用\"></a>本地分支和远程分支建立映射关系的作用</h3><p>ref: 博文<a href=\"https://blog.csdn.net/tterminator/article/details/78108550\" target=\"_blank\" rel=\"noopener\">Git branch upstream</a></p>\n<h4 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h4><p>本博文中git操作的目标为建立本地分支与远程分支的映射关系（或者为跟踪关系track）。这样使用 <code>git pull</code> 或者 <code>git push</code> 时就不必每次都要指定从远程的哪个分支拉取合并和推送到远程的哪个分支了。</p>\n<h4 id=\"查看本地分支与远程分支的映射关系\"><a href=\"#查看本地分支与远程分支的映射关系\" class=\"headerlink\" title=\"查看本地分支与远程分支的映射关系\"></a>查看本地分支与远程分支的映射关系</h4><p>使用以下命令（注意是双v）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv</span><br></pre></td></tr></table></figure>\n<p>可以获得如下信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* hexo   d60a56a create the world</span><br><span class=\"line\">  master 649e511 [origin/master: ahead 6, behind 3] Site updated: 2018-04-22 18:23:40</span><br></pre></td></tr></table></figure></p>\n<p>可以看到分支hexo没有和远程分支建立任何映射，此时若执行如下拉取命令则不成功（因为git此时不知道拉取哪个远程分支和本地分支合并）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br><span class=\"line\">There is no tracking information for the current branch.</span><br><span class=\"line\">Please specify which branch you want to merge with.</span><br><span class=\"line\">See git-pull(1) for details.</span><br><span class=\"line\"></span><br><span class=\"line\">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">If you wish to set tracking information for this branch you can do so with:</span><br><span class=\"line\"></span><br><span class=\"line\">    git branch --set-upstream-to=origin/&lt;branch&gt; hexo</span><br></pre></td></tr></table></figure></p>\n<p>同理，若此时执行如下推送命令同样不成功：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br><span class=\"line\">There is no tracking information for the current branch.</span><br><span class=\"line\">Please specify which branch you want to merge with.</span><br><span class=\"line\">See git-pull(1) for details.</span><br><span class=\"line\"></span><br><span class=\"line\">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">If you wish to set tracking information for this branch you can do so with:</span><br><span class=\"line\"></span><br><span class=\"line\">    git branch --set-upstream-to=origin/&lt;branch&gt; hexo</span><br><span class=\"line\"></span><br><span class=\"line\">Kevin-MacBook-Air:blog arthur-mac$ git push</span><br><span class=\"line\">fatal: The current branch hexo has no upstream branch.</span><br><span class=\"line\">To push the current branch and set the remote as upstream, use</span><br><span class=\"line\"></span><br><span class=\"line\">    git push --set-upstream origin hexo</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"建立本地分支与远程分支的映射关系\"><a href=\"#建立本地分支与远程分支的映射关系\" class=\"headerlink\" title=\"建立本地分支与远程分支的映射关系\"></a>建立本地分支与远程分支的映射关系</h4><p>建立当前分支与远程分支的映射关系:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -u origin/hexo</span><br></pre></td></tr></table></figure></p>\n<p>或者使用命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --set-upstream-to origin/hexo</span><br></pre></td></tr></table></figure></p>\n<p>得到结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Branch &apos;hexo&apos; set up to track remote branch &apos;hexo&apos; from &apos;origin&apos;.</span><br></pre></td></tr></table></figure></p>\n<p>查看当前本地分支与远程分支的映射关系结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -vv</span><br><span class=\"line\">* hexo   d60a56a [origin/hexo] create the world</span><br><span class=\"line\">  master 649e511 [origin/master: ahead 6, behind 3] Site updated: 2018-04-22 18:23:40</span><br></pre></td></tr></table></figure></p>\n<p>此时就能够正常的拉取和推送了。</p>\n<h4 id=\"撤销本地分支与远程分支的映射关系\"><a href=\"#撤销本地分支与远程分支的映射关系\" class=\"headerlink\" title=\"撤销本地分支与远程分支的映射关系\"></a>撤销本地分支与远程分支的映射关系</h4><p>撤销本地分支与远程分支的映射关系</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --unset-upstream</span><br></pre></td></tr></table></figure>\n<p>使用git branch -vv得到结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -vv</span><br><span class=\"line\">* hexo   d60a56a create the world</span><br><span class=\"line\">  master 649e511 [origin/master: ahead 6, behind 3] Site updated: 2018-04-22 18:23:40</span><br></pre></td></tr></table></figure></p>\n<p>可以看到本地分支与远程分支的映射关系已经撤销。</p>\n<h4 id=\"问题思考：本地分支只能跟踪远程的同名分支吗？\"><a href=\"#问题思考：本地分支只能跟踪远程的同名分支吗？\" class=\"headerlink\" title=\"问题思考：本地分支只能跟踪远程的同名分支吗？\"></a>问题思考：本地分支只能跟踪远程的同名分支吗？</h4><p>答案是否定的，本地分支可以与远程不同名的分支建立映射关系。</p>\n"},{"title":"linux 命令行和 iterm2 操作指南","date":"2018-05-31T04:39:47.000Z","_content":"\n# 标签\n\n- 新建标签：`command + t`\n- 关闭标签：`command + w`\n- 切换标签：`command + 数字` 或 `command + 左右方向键`\n- 切换全屏：`command + enter`\n\n# 分屏\n\n- 垂直分屏：command + d\n- 水平分屏：command + shift + d\n- 切换屏幕：command + option + 方向键 command + [ 或 command + ]\n\n# 命令编辑\n\n## 删除\n\n- 删除单词：ctrl + w, 删除光标之前的单词\n- 删除行：ctrl + u，删除到行首\n- 删除行：ctrl + k，删除到行尾\n- 删除字符：删除当前光标`ctrl + d`，删除光标之前：`ctrl + h`\n- 清屏1：command + r\n- 清屏2：ctrl + l\n\n## 光标移动\n\n- 光标到行首：ctrl + a (同 ⌘ + ←)\n- 光标到行尾：ctrl + e (同 ⌘ + →)\n- 单词移动：alt + b / alt + b 按单词前移/后移\n- 字符移动：ctrl + f / ctrl +b 按字符前移/后移，相当于左右方向\n- 交换光标处文本：ctrl + t\n\n## 历史命令\n\n- 查看历史命令：`command + ;` （输入打头几个字母，然后输入 `command + ;` iterm2将自动列出之前输入过的类似命令。）\n- 查看剪贴板历史：command + shift + h\n- 上一条命令：ctrl + p\n- 搜索命令历史：ctrl + r\n\n# 选中即复制\n\niterm2 有 2 种好用的选中即复制模式。\n\n- 一种是用鼠标，在 iterm2 中，选中某个路径或者某个词汇，那么，iterm2 就自动复制了。 　　\n- 另一种是无鼠标模式，`command + f`,弹出 iterm2 的查找模式，输入要查找并复制的内容的前几个字母，确认找到的是自己的内容之- 后，输入 tab，查找窗口将自动变化内容，并将其复制。如果输入的是 s- hift+tab，则自动将查找内容的左边选中并复制。\n","source":"_posts/201805-linux-command-line-and-iterm-use-guide.md","raw":"---\ntitle: linux 命令行和 iterm2 操作指南\ndate: 2018-05-31 12:39:47\ntags: linux command line, iterms, shortcut\n---\n\n# 标签\n\n- 新建标签：`command + t`\n- 关闭标签：`command + w`\n- 切换标签：`command + 数字` 或 `command + 左右方向键`\n- 切换全屏：`command + enter`\n\n# 分屏\n\n- 垂直分屏：command + d\n- 水平分屏：command + shift + d\n- 切换屏幕：command + option + 方向键 command + [ 或 command + ]\n\n# 命令编辑\n\n## 删除\n\n- 删除单词：ctrl + w, 删除光标之前的单词\n- 删除行：ctrl + u，删除到行首\n- 删除行：ctrl + k，删除到行尾\n- 删除字符：删除当前光标`ctrl + d`，删除光标之前：`ctrl + h`\n- 清屏1：command + r\n- 清屏2：ctrl + l\n\n## 光标移动\n\n- 光标到行首：ctrl + a (同 ⌘ + ←)\n- 光标到行尾：ctrl + e (同 ⌘ + →)\n- 单词移动：alt + b / alt + b 按单词前移/后移\n- 字符移动：ctrl + f / ctrl +b 按字符前移/后移，相当于左右方向\n- 交换光标处文本：ctrl + t\n\n## 历史命令\n\n- 查看历史命令：`command + ;` （输入打头几个字母，然后输入 `command + ;` iterm2将自动列出之前输入过的类似命令。）\n- 查看剪贴板历史：command + shift + h\n- 上一条命令：ctrl + p\n- 搜索命令历史：ctrl + r\n\n# 选中即复制\n\niterm2 有 2 种好用的选中即复制模式。\n\n- 一种是用鼠标，在 iterm2 中，选中某个路径或者某个词汇，那么，iterm2 就自动复制了。 　　\n- 另一种是无鼠标模式，`command + f`,弹出 iterm2 的查找模式，输入要查找并复制的内容的前几个字母，确认找到的是自己的内容之- 后，输入 tab，查找窗口将自动变化内容，并将其复制。如果输入的是 s- hift+tab，则自动将查找内容的左边选中并复制。\n","slug":"linux-command-line-and-iterm-use-guide","published":1,"updated":"2018-05-31T07:26:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjidbf1q20002ry1d8r8xjizq","content":"<h1 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h1><ul>\n<li>新建标签：<code>command + t</code></li>\n<li>关闭标签：<code>command + w</code></li>\n<li>切换标签：<code>command + 数字</code> 或 <code>command + 左右方向键</code></li>\n<li>切换全屏：<code>command + enter</code></li>\n</ul>\n<h1 id=\"分屏\"><a href=\"#分屏\" class=\"headerlink\" title=\"分屏\"></a>分屏</h1><ul>\n<li>垂直分屏：command + d</li>\n<li>水平分屏：command + shift + d</li>\n<li>切换屏幕：command + option + 方向键 command + [ 或 command + ]</li>\n</ul>\n<h1 id=\"命令编辑\"><a href=\"#命令编辑\" class=\"headerlink\" title=\"命令编辑\"></a>命令编辑</h1><h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><ul>\n<li>删除单词：ctrl + w, 删除光标之前的单词</li>\n<li>删除行：ctrl + u，删除到行首</li>\n<li>删除行：ctrl + k，删除到行尾</li>\n<li>删除字符：删除当前光标<code>ctrl + d</code>，删除光标之前：<code>ctrl + h</code></li>\n<li>清屏1：command + r</li>\n<li>清屏2：ctrl + l</li>\n</ul>\n<h2 id=\"光标移动\"><a href=\"#光标移动\" class=\"headerlink\" title=\"光标移动\"></a>光标移动</h2><ul>\n<li>光标到行首：ctrl + a (同 ⌘ + ←)</li>\n<li>光标到行尾：ctrl + e (同 ⌘ + →)</li>\n<li>单词移动：alt + b / alt + b 按单词前移/后移</li>\n<li>字符移动：ctrl + f / ctrl +b 按字符前移/后移，相当于左右方向</li>\n<li>交换光标处文本：ctrl + t</li>\n</ul>\n<h2 id=\"历史命令\"><a href=\"#历史命令\" class=\"headerlink\" title=\"历史命令\"></a>历史命令</h2><ul>\n<li>查看历史命令：<code>command + ;</code> （输入打头几个字母，然后输入 <code>command + ;</code> iterm2将自动列出之前输入过的类似命令。）</li>\n<li>查看剪贴板历史：command + shift + h</li>\n<li>上一条命令：ctrl + p</li>\n<li>搜索命令历史：ctrl + r</li>\n</ul>\n<h1 id=\"选中即复制\"><a href=\"#选中即复制\" class=\"headerlink\" title=\"选中即复制\"></a>选中即复制</h1><p>iterm2 有 2 种好用的选中即复制模式。</p>\n<ul>\n<li>一种是用鼠标，在 iterm2 中，选中某个路径或者某个词汇，那么，iterm2 就自动复制了。 　　</li>\n<li>另一种是无鼠标模式，<code>command + f</code>,弹出 iterm2 的查找模式，输入要查找并复制的内容的前几个字母，确认找到的是自己的内容之- 后，输入 tab，查找窗口将自动变化内容，并将其复制。如果输入的是 s- hift+tab，则自动将查找内容的左边选中并复制。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h1><ul>\n<li>新建标签：<code>command + t</code></li>\n<li>关闭标签：<code>command + w</code></li>\n<li>切换标签：<code>command + 数字</code> 或 <code>command + 左右方向键</code></li>\n<li>切换全屏：<code>command + enter</code></li>\n</ul>\n<h1 id=\"分屏\"><a href=\"#分屏\" class=\"headerlink\" title=\"分屏\"></a>分屏</h1><ul>\n<li>垂直分屏：command + d</li>\n<li>水平分屏：command + shift + d</li>\n<li>切换屏幕：command + option + 方向键 command + [ 或 command + ]</li>\n</ul>\n<h1 id=\"命令编辑\"><a href=\"#命令编辑\" class=\"headerlink\" title=\"命令编辑\"></a>命令编辑</h1><h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><ul>\n<li>删除单词：ctrl + w, 删除光标之前的单词</li>\n<li>删除行：ctrl + u，删除到行首</li>\n<li>删除行：ctrl + k，删除到行尾</li>\n<li>删除字符：删除当前光标<code>ctrl + d</code>，删除光标之前：<code>ctrl + h</code></li>\n<li>清屏1：command + r</li>\n<li>清屏2：ctrl + l</li>\n</ul>\n<h2 id=\"光标移动\"><a href=\"#光标移动\" class=\"headerlink\" title=\"光标移动\"></a>光标移动</h2><ul>\n<li>光标到行首：ctrl + a (同 ⌘ + ←)</li>\n<li>光标到行尾：ctrl + e (同 ⌘ + →)</li>\n<li>单词移动：alt + b / alt + b 按单词前移/后移</li>\n<li>字符移动：ctrl + f / ctrl +b 按字符前移/后移，相当于左右方向</li>\n<li>交换光标处文本：ctrl + t</li>\n</ul>\n<h2 id=\"历史命令\"><a href=\"#历史命令\" class=\"headerlink\" title=\"历史命令\"></a>历史命令</h2><ul>\n<li>查看历史命令：<code>command + ;</code> （输入打头几个字母，然后输入 <code>command + ;</code> iterm2将自动列出之前输入过的类似命令。）</li>\n<li>查看剪贴板历史：command + shift + h</li>\n<li>上一条命令：ctrl + p</li>\n<li>搜索命令历史：ctrl + r</li>\n</ul>\n<h1 id=\"选中即复制\"><a href=\"#选中即复制\" class=\"headerlink\" title=\"选中即复制\"></a>选中即复制</h1><p>iterm2 有 2 种好用的选中即复制模式。</p>\n<ul>\n<li>一种是用鼠标，在 iterm2 中，选中某个路径或者某个词汇，那么，iterm2 就自动复制了。 　　</li>\n<li>另一种是无鼠标模式，<code>command + f</code>,弹出 iterm2 的查找模式，输入要查找并复制的内容的前几个字母，确认找到的是自己的内容之- 后，输入 tab，查找窗口将自动变化内容，并将其复制。如果输入的是 s- hift+tab，则自动将查找内容的左边选中并复制。</li>\n</ul>\n"},{"title":"hexo 网站的迁移","date":"2018-05-27T09:06:53.000Z","_content":"\nmark\nhttps://blog.csdn.net/aceking10/article/details/41540889\n\nhttps://www.jianshu.com/p/f8a55b972972","source":"_posts/201805-hexo-transfer.md","raw":"---\ntitle: hexo 网站的迁移\ndate: 2018-05-27 17:06:53\ntags:\n---\n\nmark\nhttps://blog.csdn.net/aceking10/article/details/41540889\n\nhttps://www.jianshu.com/p/f8a55b972972","slug":"hexo-transfer","published":1,"updated":"2018-05-27T12:52:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjidbf1q70004ry1d3tk5wpft","content":"<p>mark<br><a href=\"https://blog.csdn.net/aceking10/article/details/41540889\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/aceking10/article/details/41540889</a></p>\n<p><a href=\"https://www.jianshu.com/p/f8a55b972972\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/f8a55b972972</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>mark<br><a href=\"https://blog.csdn.net/aceking10/article/details/41540889\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/aceking10/article/details/41540889</a></p>\n<p><a href=\"https://www.jianshu.com/p/f8a55b972972\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/f8a55b972972</a></p>\n"},{"title":"tensorflow 中的 tf.app.flags","date":"2018-05-21T12:29:51.000Z","_content":"\ntf定义了tf.app.flags，用于支持接受命令行传递参数，相当于接受argv\n\n``` python\nimport tensorflow as tf\nflags = tf.app.flags #flags是一个文件：flags.py，用于处理命令行参数的解析工作\n\n# 第一个是参数名称，第二个参数是默认值，第三个是参数描述\nflags.DEFINE_string(\"para_string\", \"default_val\", \"description\") # 定义一个 string\nflags.DEFINE_integer(\"pare_int\", 1000, \"this is an integer\") # 定义一个integer\nflags.DEFINE_bool(\"para_bool\", True, \"description\") # 定义一个 bool\n\n# FLAGS是一个对象，保存了解析后的命令行参数\nFLAGS = flags.FLAGS\ndef main(_):\n    print FLAGS.para_string #调用命令行输入的参数\n\nif __name__ = \"__main__\": # 使用这种方式保证了，如果此文件被其它文件import的时候，不会执行main中的代码\n    tf.app.run() # 解析命令行参数，调用main函数 main(sys.argv)\n```\n\n传入参数方法：\n\n``` bash\n$ python script.py --para_1=value1 --para_2=value2\n# 不传的话，会使用默认值,注意等号左右没有空格\n```","source":"_posts/201805-tensorflow-flags-guide.md","raw":"---\ntitle: tensorflow 中的 tf.app.flags\ndate: 2018-05-21 20:29:51\ntags:\n---\n\ntf定义了tf.app.flags，用于支持接受命令行传递参数，相当于接受argv\n\n``` python\nimport tensorflow as tf\nflags = tf.app.flags #flags是一个文件：flags.py，用于处理命令行参数的解析工作\n\n# 第一个是参数名称，第二个参数是默认值，第三个是参数描述\nflags.DEFINE_string(\"para_string\", \"default_val\", \"description\") # 定义一个 string\nflags.DEFINE_integer(\"pare_int\", 1000, \"this is an integer\") # 定义一个integer\nflags.DEFINE_bool(\"para_bool\", True, \"description\") # 定义一个 bool\n\n# FLAGS是一个对象，保存了解析后的命令行参数\nFLAGS = flags.FLAGS\ndef main(_):\n    print FLAGS.para_string #调用命令行输入的参数\n\nif __name__ = \"__main__\": # 使用这种方式保证了，如果此文件被其它文件import的时候，不会执行main中的代码\n    tf.app.run() # 解析命令行参数，调用main函数 main(sys.argv)\n```\n\n传入参数方法：\n\n``` bash\n$ python script.py --para_1=value1 --para_2=value2\n# 不传的话，会使用默认值,注意等号左右没有空格\n```","slug":"tensorflow-flags-guide","published":1,"updated":"2018-05-28T16:17:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjidbf1q90005ry1dipbh8v5s","content":"<p>tf定义了tf.app.flags，用于支持接受命令行传递参数，相当于接受argv</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\">flags = tf.app.flags <span class=\"comment\">#flags是一个文件：flags.py，用于处理命令行参数的解析工作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第一个是参数名称，第二个参数是默认值，第三个是参数描述</span></span><br><span class=\"line\">flags.DEFINE_string(<span class=\"string\">\"para_string\"</span>, <span class=\"string\">\"default_val\"</span>, <span class=\"string\">\"description\"</span>) <span class=\"comment\"># 定义一个 string</span></span><br><span class=\"line\">flags.DEFINE_integer(<span class=\"string\">\"pare_int\"</span>, <span class=\"number\">1000</span>, <span class=\"string\">\"this is an integer\"</span>) <span class=\"comment\"># 定义一个integer</span></span><br><span class=\"line\">flags.DEFINE_bool(<span class=\"string\">\"para_bool\"</span>, <span class=\"keyword\">True</span>, <span class=\"string\">\"description\"</span>) <span class=\"comment\"># 定义一个 bool</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># FLAGS是一个对象，保存了解析后的命令行参数</span></span><br><span class=\"line\">FLAGS = flags.FLAGS</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(_)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> FLAGS.para_string <span class=\"comment\">#调用命令行输入的参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ = <span class=\"string\">\"__main__\"</span>: <span class=\"comment\"># 使用这种方式保证了，如果此文件被其它文件import的时候，不会执行main中的代码</span></span><br><span class=\"line\">    tf.app.run() <span class=\"comment\"># 解析命令行参数，调用main函数 main(sys.argv)</span></span><br></pre></td></tr></table></figure>\n<p>传入参数方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python script.py --para_1=value1 --para_2=value2</span><br><span class=\"line\"><span class=\"comment\"># 不传的话，会使用默认值,注意等号左右没有空格</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>tf定义了tf.app.flags，用于支持接受命令行传递参数，相当于接受argv</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\">flags = tf.app.flags <span class=\"comment\">#flags是一个文件：flags.py，用于处理命令行参数的解析工作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第一个是参数名称，第二个参数是默认值，第三个是参数描述</span></span><br><span class=\"line\">flags.DEFINE_string(<span class=\"string\">\"para_string\"</span>, <span class=\"string\">\"default_val\"</span>, <span class=\"string\">\"description\"</span>) <span class=\"comment\"># 定义一个 string</span></span><br><span class=\"line\">flags.DEFINE_integer(<span class=\"string\">\"pare_int\"</span>, <span class=\"number\">1000</span>, <span class=\"string\">\"this is an integer\"</span>) <span class=\"comment\"># 定义一个integer</span></span><br><span class=\"line\">flags.DEFINE_bool(<span class=\"string\">\"para_bool\"</span>, <span class=\"keyword\">True</span>, <span class=\"string\">\"description\"</span>) <span class=\"comment\"># 定义一个 bool</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># FLAGS是一个对象，保存了解析后的命令行参数</span></span><br><span class=\"line\">FLAGS = flags.FLAGS</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(_)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> FLAGS.para_string <span class=\"comment\">#调用命令行输入的参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ = <span class=\"string\">\"__main__\"</span>: <span class=\"comment\"># 使用这种方式保证了，如果此文件被其它文件import的时候，不会执行main中的代码</span></span><br><span class=\"line\">    tf.app.run() <span class=\"comment\"># 解析命令行参数，调用main函数 main(sys.argv)</span></span><br></pre></td></tr></table></figure>\n<p>传入参数方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python script.py --para_1=value1 --para_2=value2</span><br><span class=\"line\"><span class=\"comment\"># 不传的话，会使用默认值,注意等号左右没有空格</span></span><br></pre></td></tr></table></figure>"},{"title":"google-deep-and-cross","date":"2018-06-03T03:17:46.000Z","_content":"","source":"_posts/201806-google-deep-and-cross.md","raw":"---\ntitle: google-deep-and-cross\ndate: 2018-06-03 11:17:46\ntags:\n---\n","slug":"google-deep-and-cross","published":1,"updated":"2018-06-03T03:17:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjidbf1qa0006ry1d4xn3lo46","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"vim使用指南及vim快捷键","date":"2018-05-19T17:12:54.000Z","_content":"\n# 移动光标\n\n``` \nh, j, k, l 上，下，左，右\nctrl-e 移动页面\nctrl-f 上翻一页\nctrl-b 下翻一页\nctrl-u 上翻半页\nctrl-d 下翻半页\nw 跳到下一个字首，按标点或单词分割\nW 跳到下一个字首，长跳，如end-of-line被认为是一个字\ne 跳到下一个字尾\nE 跳到下一个字尾，长跳\nb 跳到上一个字\nB 跳到上一个字，长跳\n0 跳至行首，不管有无缩进，就是跳到第0个字符\n^ 跳至行首的第一个字符\n$ 跳至行尾\ngg 跳至文首\nG 调至文尾\n5gg/5G 调至第5行\ngd 跳至当前光标所在的变量的声明处\nfx 在当前行中找x字符，找到了就跳转至\n; 重复上一个f命令，而不用重复的输入fx\n* 查找光标所在处的单词，向下查找\n# 查找光标所在处的单词，向上查找\n```\n\n# 删除复制\n\n```\ndd 删除光标所在行\ndw 删除一个字(word)\nd/D删除到行末x删除当前字符X删除前一个字符yy复制一行yw复制一个字y/Y 复制到行末\np 粘贴粘贴板的内容到当前行的下面\nP 粘贴粘贴板的内容到当前行的上面\n```\n\n# 插入模式\n\n```\ni 从当前光标处进入插入模式\nI 进入插入模式，并置光标于行首\na 追加模式，置光标于当前光标之后\nA 追加模式，置光标于行末\no 在当前行之下新加一行，并进入插入模式\nO 在当前行之上新加一行，并进入插入模式\nEsc 退出插入模式\n```\n\n# 编辑\n\n```\nJ 将下一行和当前行连接为一行\ncc 删除当前行并进入编辑模式\ncw 删除当前字，并进入编辑模式\nc$ 擦除从当前位置至行末的内容，并进入编辑模式\ns 删除当前字符并进入编辑模式\nS 删除光标所在行并进入编辑模式\nxp 交换当前字符和下一个字符\nu 撤销\nctrl+r 重做\n~ 切换大小写，当前字符\n>> 将当前行右移一个单位\n<< 将当前行左移一个单位(一个tab符)\n== 自动缩进当前行\n```\n\n# 查找替换\n```\n/pattern 向后搜索字符串pattern\n?pattern 向前搜索字符串pattern\n\"\\c\" 忽略大小写\n\"\\C\" 大小写敏感\n\nn 下一个匹配(如果是/搜索，则是向下的下一个，?搜索则是向上的下一个)\nN 上一个匹配(同上)\n:%s/old/new/g 搜索整个文件，将所有的old替换为new\n:%s/old/new/gc 搜索整个文件，将所有的old替换为new，每次都要你确认是否替换\n```\n# 退出编辑器\n```\n:w 将缓冲区写入文件，即保存修改\n:wq 保存修改并退出\n:x 保存修改并退出\n:q 退出，如果对缓冲区进行过修改，则会提示\n:q! 强制退出，放弃修改\n```\n# 多文件编辑\n\n```\nvim file1.. 同时打开多个文件\n:args 显示当前编辑文件\n:next 切换到下个文件\n:prev 切换到前个文件\n:next！ 不保存当前编辑文件并切换到下个文件\n:prev！ 不保存当前编辑文件并切换到上个文件\n:wnext 保存当前编辑文件并切换到下个文件\n:wprev 保存当前编辑文件并切换到上个文件\n:first 定位首文件\n:last 定位尾文件\nctrl+^ 快速在最近打开的两个文件间切换\n:split[sp] 把当前文件水平分割\n:split file 把当前窗口水平分割, file\n:vsplit[vsp] file 把当前窗口垂直分割, file\n:new file 同split file\n:close 关闭当前窗口\n:only 只显示当前窗口, 关闭所有其他的窗口\n:all 打开所有的窗口\n:vertical all 打开所有的窗口, 垂直打开\n:qall 对所有窗口执行：q操作\n:qall! 对所有窗口执行：q!操作\n:wall 对所有窗口执行：w操作\n:wqall 对所有窗口执行：wq操作\nctrl-w h 跳转到左边的窗口\nctrl-w j 跳转到下面的窗口\nctrl-w k 跳转到上面的窗口\nctrl-w l 跳转到右边的窗口\nctrl-w t 跳转到最顶上的窗口\nctrl-w b 跳转到最底下的窗口\n```\n# 多标签编辑\n```\n:tabedit file 在新标签中打开文件file\n:tab split file 在新标签中打开文件file\n:tabp 切换到前一个标签\n:tabn 切换到后一个标签\n:tabc 关闭当前标签\n:tabo 关闭其他标签\ngt 到下一个tab\ngT 到上一个tab\n0gt 跳到第一个tab\n5gt 跳到第五个tab\n```\n# 执行shell命令\n\n1、在命令模式下输入\":sh\"，可以运行相当于在字符模式下，到输入结束想回到VIM编辑器中用exit，ctrl+D返回VIM编辑器\n2、可以\"!command\"，运行结束后自动回到VIM编辑器中\n3、用“Ctrl+Z“回到shell，用fg返回编辑\n4、:!make -> 直接在当前目录下运行make指令\n\n# VIM启动项\n-o[n] 以水平分屏的方式打开多个文件\n-O[n] 以垂直分屏的方式打开多个文件\n\n# 自动排版\n在粘贴了一些代码之后，vim变得比较乱，只要执行gg=G就能搞定\n\n# 如何在vim中编译程序\n在vim中可以完成make,而且可以将编译的结果也显示在vim里，先执行 :copen 命令，将结果输出的窗口打开，然后执行 :make\n编译后的结果就显示在了copen打开的小窗口里了，而且用鼠标双击错误信息，就会跳转到发生错误的行。\n\n# buffer操作\n\n## buffer状态\n```\n- （非活动的缓冲区）\na （当前被激活缓冲区）\nh （隐藏的缓冲区）\n% （当前的缓冲区）\n# （交换缓冲区）\n= （只读缓冲区）\n+ （已经更改的缓冲区）\n```\n\n# VIM 操作目录\n## 打开目录\n\n```\nvim .\nvim a-path/\n```\n## 以下操作在操作目录时生效\n```\np,P,t,u,U,x,v,o,r,s\n\nc 使当前打开的目录成为当前目录\nd 创建目录\n% 创建文件\nD 删除文件/目录\n- 转到上层目录\ngb 转到上一个 bookmarked directory\ni 改变目录文件列表方式\n^l 刷新当前打开的目录\n\nmf - 标记文件\nmu - unmark all marked files\nmz - Compress/decompress marked files\ngh 显示/不显示隐藏文件( dot-files)\n^h 编辑隐藏文件列表\na 转换显示模式, all - hide - unhide\nqf diplay infomation about file\nqb list the bookmarked directories and directory traversal history\ngi Display information on file\n\nmb\nmc\nmd - 将标记的文件(mf标记文件)使用 diff 模式\nme - 编辑标记的文件,只显示一个，其余放入 buffer 中\nmh\nmm - move marked files to marked-file target directory\nmc - copy\nmp\nmr\nmt\n```\n\nvim 中复制,移动文件\n```\n1, mt - 移动到的目录\n2, mf - 标记要移动的文件\n3, mc - 移动/复制\n```\n\nR 移动文件\n\n打开当前编辑文件的目录\n\n```\n:Explore\n:Hexplore\n:Nexplore\n:Pexplore\n:Sexplore\n:Texplore\n:Vexplore\n```\n\n[详细使用教程](https://www.cnblogs.com/lijia0511/p/5644566.html)","source":"_posts/201805-vim-guide.md","raw":"---\ntitle: vim使用指南及vim快捷键\ndate: 2018-05-20 01:12:54\ntags: Linux, vim\n---\n\n# 移动光标\n\n``` \nh, j, k, l 上，下，左，右\nctrl-e 移动页面\nctrl-f 上翻一页\nctrl-b 下翻一页\nctrl-u 上翻半页\nctrl-d 下翻半页\nw 跳到下一个字首，按标点或单词分割\nW 跳到下一个字首，长跳，如end-of-line被认为是一个字\ne 跳到下一个字尾\nE 跳到下一个字尾，长跳\nb 跳到上一个字\nB 跳到上一个字，长跳\n0 跳至行首，不管有无缩进，就是跳到第0个字符\n^ 跳至行首的第一个字符\n$ 跳至行尾\ngg 跳至文首\nG 调至文尾\n5gg/5G 调至第5行\ngd 跳至当前光标所在的变量的声明处\nfx 在当前行中找x字符，找到了就跳转至\n; 重复上一个f命令，而不用重复的输入fx\n* 查找光标所在处的单词，向下查找\n# 查找光标所在处的单词，向上查找\n```\n\n# 删除复制\n\n```\ndd 删除光标所在行\ndw 删除一个字(word)\nd/D删除到行末x删除当前字符X删除前一个字符yy复制一行yw复制一个字y/Y 复制到行末\np 粘贴粘贴板的内容到当前行的下面\nP 粘贴粘贴板的内容到当前行的上面\n```\n\n# 插入模式\n\n```\ni 从当前光标处进入插入模式\nI 进入插入模式，并置光标于行首\na 追加模式，置光标于当前光标之后\nA 追加模式，置光标于行末\no 在当前行之下新加一行，并进入插入模式\nO 在当前行之上新加一行，并进入插入模式\nEsc 退出插入模式\n```\n\n# 编辑\n\n```\nJ 将下一行和当前行连接为一行\ncc 删除当前行并进入编辑模式\ncw 删除当前字，并进入编辑模式\nc$ 擦除从当前位置至行末的内容，并进入编辑模式\ns 删除当前字符并进入编辑模式\nS 删除光标所在行并进入编辑模式\nxp 交换当前字符和下一个字符\nu 撤销\nctrl+r 重做\n~ 切换大小写，当前字符\n>> 将当前行右移一个单位\n<< 将当前行左移一个单位(一个tab符)\n== 自动缩进当前行\n```\n\n# 查找替换\n```\n/pattern 向后搜索字符串pattern\n?pattern 向前搜索字符串pattern\n\"\\c\" 忽略大小写\n\"\\C\" 大小写敏感\n\nn 下一个匹配(如果是/搜索，则是向下的下一个，?搜索则是向上的下一个)\nN 上一个匹配(同上)\n:%s/old/new/g 搜索整个文件，将所有的old替换为new\n:%s/old/new/gc 搜索整个文件，将所有的old替换为new，每次都要你确认是否替换\n```\n# 退出编辑器\n```\n:w 将缓冲区写入文件，即保存修改\n:wq 保存修改并退出\n:x 保存修改并退出\n:q 退出，如果对缓冲区进行过修改，则会提示\n:q! 强制退出，放弃修改\n```\n# 多文件编辑\n\n```\nvim file1.. 同时打开多个文件\n:args 显示当前编辑文件\n:next 切换到下个文件\n:prev 切换到前个文件\n:next！ 不保存当前编辑文件并切换到下个文件\n:prev！ 不保存当前编辑文件并切换到上个文件\n:wnext 保存当前编辑文件并切换到下个文件\n:wprev 保存当前编辑文件并切换到上个文件\n:first 定位首文件\n:last 定位尾文件\nctrl+^ 快速在最近打开的两个文件间切换\n:split[sp] 把当前文件水平分割\n:split file 把当前窗口水平分割, file\n:vsplit[vsp] file 把当前窗口垂直分割, file\n:new file 同split file\n:close 关闭当前窗口\n:only 只显示当前窗口, 关闭所有其他的窗口\n:all 打开所有的窗口\n:vertical all 打开所有的窗口, 垂直打开\n:qall 对所有窗口执行：q操作\n:qall! 对所有窗口执行：q!操作\n:wall 对所有窗口执行：w操作\n:wqall 对所有窗口执行：wq操作\nctrl-w h 跳转到左边的窗口\nctrl-w j 跳转到下面的窗口\nctrl-w k 跳转到上面的窗口\nctrl-w l 跳转到右边的窗口\nctrl-w t 跳转到最顶上的窗口\nctrl-w b 跳转到最底下的窗口\n```\n# 多标签编辑\n```\n:tabedit file 在新标签中打开文件file\n:tab split file 在新标签中打开文件file\n:tabp 切换到前一个标签\n:tabn 切换到后一个标签\n:tabc 关闭当前标签\n:tabo 关闭其他标签\ngt 到下一个tab\ngT 到上一个tab\n0gt 跳到第一个tab\n5gt 跳到第五个tab\n```\n# 执行shell命令\n\n1、在命令模式下输入\":sh\"，可以运行相当于在字符模式下，到输入结束想回到VIM编辑器中用exit，ctrl+D返回VIM编辑器\n2、可以\"!command\"，运行结束后自动回到VIM编辑器中\n3、用“Ctrl+Z“回到shell，用fg返回编辑\n4、:!make -> 直接在当前目录下运行make指令\n\n# VIM启动项\n-o[n] 以水平分屏的方式打开多个文件\n-O[n] 以垂直分屏的方式打开多个文件\n\n# 自动排版\n在粘贴了一些代码之后，vim变得比较乱，只要执行gg=G就能搞定\n\n# 如何在vim中编译程序\n在vim中可以完成make,而且可以将编译的结果也显示在vim里，先执行 :copen 命令，将结果输出的窗口打开，然后执行 :make\n编译后的结果就显示在了copen打开的小窗口里了，而且用鼠标双击错误信息，就会跳转到发生错误的行。\n\n# buffer操作\n\n## buffer状态\n```\n- （非活动的缓冲区）\na （当前被激活缓冲区）\nh （隐藏的缓冲区）\n% （当前的缓冲区）\n# （交换缓冲区）\n= （只读缓冲区）\n+ （已经更改的缓冲区）\n```\n\n# VIM 操作目录\n## 打开目录\n\n```\nvim .\nvim a-path/\n```\n## 以下操作在操作目录时生效\n```\np,P,t,u,U,x,v,o,r,s\n\nc 使当前打开的目录成为当前目录\nd 创建目录\n% 创建文件\nD 删除文件/目录\n- 转到上层目录\ngb 转到上一个 bookmarked directory\ni 改变目录文件列表方式\n^l 刷新当前打开的目录\n\nmf - 标记文件\nmu - unmark all marked files\nmz - Compress/decompress marked files\ngh 显示/不显示隐藏文件( dot-files)\n^h 编辑隐藏文件列表\na 转换显示模式, all - hide - unhide\nqf diplay infomation about file\nqb list the bookmarked directories and directory traversal history\ngi Display information on file\n\nmb\nmc\nmd - 将标记的文件(mf标记文件)使用 diff 模式\nme - 编辑标记的文件,只显示一个，其余放入 buffer 中\nmh\nmm - move marked files to marked-file target directory\nmc - copy\nmp\nmr\nmt\n```\n\nvim 中复制,移动文件\n```\n1, mt - 移动到的目录\n2, mf - 标记要移动的文件\n3, mc - 移动/复制\n```\n\nR 移动文件\n\n打开当前编辑文件的目录\n\n```\n:Explore\n:Hexplore\n:Nexplore\n:Pexplore\n:Sexplore\n:Texplore\n:Vexplore\n```\n\n[详细使用教程](https://www.cnblogs.com/lijia0511/p/5644566.html)","slug":"vim-guide","published":1,"updated":"2018-05-30T16:40:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjidbf1qb0009ry1d524p4a67","content":"<h1 id=\"移动光标\"><a href=\"#移动光标\" class=\"headerlink\" title=\"移动光标\"></a>移动光标</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h, j, k, l 上，下，左，右</span><br><span class=\"line\">ctrl-e 移动页面</span><br><span class=\"line\">ctrl-f 上翻一页</span><br><span class=\"line\">ctrl-b 下翻一页</span><br><span class=\"line\">ctrl-u 上翻半页</span><br><span class=\"line\">ctrl-d 下翻半页</span><br><span class=\"line\">w 跳到下一个字首，按标点或单词分割</span><br><span class=\"line\">W 跳到下一个字首，长跳，如end-of-line被认为是一个字</span><br><span class=\"line\">e 跳到下一个字尾</span><br><span class=\"line\">E 跳到下一个字尾，长跳</span><br><span class=\"line\">b 跳到上一个字</span><br><span class=\"line\">B 跳到上一个字，长跳</span><br><span class=\"line\">0 跳至行首，不管有无缩进，就是跳到第0个字符</span><br><span class=\"line\">^ 跳至行首的第一个字符</span><br><span class=\"line\">$ 跳至行尾</span><br><span class=\"line\">gg 跳至文首</span><br><span class=\"line\">G 调至文尾</span><br><span class=\"line\">5gg/5G 调至第5行</span><br><span class=\"line\">gd 跳至当前光标所在的变量的声明处</span><br><span class=\"line\">fx 在当前行中找x字符，找到了就跳转至</span><br><span class=\"line\">; 重复上一个f命令，而不用重复的输入fx</span><br><span class=\"line\">* 查找光标所在处的单词，向下查找</span><br><span class=\"line\"># 查找光标所在处的单词，向上查找</span><br></pre></td></tr></table></figure>\n<h1 id=\"删除复制\"><a href=\"#删除复制\" class=\"headerlink\" title=\"删除复制\"></a>删除复制</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd 删除光标所在行</span><br><span class=\"line\">dw 删除一个字(word)</span><br><span class=\"line\">d/D删除到行末x删除当前字符X删除前一个字符yy复制一行yw复制一个字y/Y 复制到行末</span><br><span class=\"line\">p 粘贴粘贴板的内容到当前行的下面</span><br><span class=\"line\">P 粘贴粘贴板的内容到当前行的上面</span><br></pre></td></tr></table></figure>\n<h1 id=\"插入模式\"><a href=\"#插入模式\" class=\"headerlink\" title=\"插入模式\"></a>插入模式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i 从当前光标处进入插入模式</span><br><span class=\"line\">I 进入插入模式，并置光标于行首</span><br><span class=\"line\">a 追加模式，置光标于当前光标之后</span><br><span class=\"line\">A 追加模式，置光标于行末</span><br><span class=\"line\">o 在当前行之下新加一行，并进入插入模式</span><br><span class=\"line\">O 在当前行之上新加一行，并进入插入模式</span><br><span class=\"line\">Esc 退出插入模式</span><br></pre></td></tr></table></figure>\n<h1 id=\"编辑\"><a href=\"#编辑\" class=\"headerlink\" title=\"编辑\"></a>编辑</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">J 将下一行和当前行连接为一行</span><br><span class=\"line\">cc 删除当前行并进入编辑模式</span><br><span class=\"line\">cw 删除当前字，并进入编辑模式</span><br><span class=\"line\">c$ 擦除从当前位置至行末的内容，并进入编辑模式</span><br><span class=\"line\">s 删除当前字符并进入编辑模式</span><br><span class=\"line\">S 删除光标所在行并进入编辑模式</span><br><span class=\"line\">xp 交换当前字符和下一个字符</span><br><span class=\"line\">u 撤销</span><br><span class=\"line\">ctrl+r 重做</span><br><span class=\"line\">~ 切换大小写，当前字符</span><br><span class=\"line\">&gt;&gt; 将当前行右移一个单位</span><br><span class=\"line\">&lt;&lt; 将当前行左移一个单位(一个tab符)</span><br><span class=\"line\">== 自动缩进当前行</span><br></pre></td></tr></table></figure>\n<h1 id=\"查找替换\"><a href=\"#查找替换\" class=\"headerlink\" title=\"查找替换\"></a>查找替换</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/pattern 向后搜索字符串pattern</span><br><span class=\"line\">?pattern 向前搜索字符串pattern</span><br><span class=\"line\">&quot;\\c&quot; 忽略大小写</span><br><span class=\"line\">&quot;\\C&quot; 大小写敏感</span><br><span class=\"line\"></span><br><span class=\"line\">n 下一个匹配(如果是/搜索，则是向下的下一个，?搜索则是向上的下一个)</span><br><span class=\"line\">N 上一个匹配(同上)</span><br><span class=\"line\">:%s/old/new/g 搜索整个文件，将所有的old替换为new</span><br><span class=\"line\">:%s/old/new/gc 搜索整个文件，将所有的old替换为new，每次都要你确认是否替换</span><br></pre></td></tr></table></figure>\n<h1 id=\"退出编辑器\"><a href=\"#退出编辑器\" class=\"headerlink\" title=\"退出编辑器\"></a>退出编辑器</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:w 将缓冲区写入文件，即保存修改</span><br><span class=\"line\">:wq 保存修改并退出</span><br><span class=\"line\">:x 保存修改并退出</span><br><span class=\"line\">:q 退出，如果对缓冲区进行过修改，则会提示</span><br><span class=\"line\">:q! 强制退出，放弃修改</span><br></pre></td></tr></table></figure>\n<h1 id=\"多文件编辑\"><a href=\"#多文件编辑\" class=\"headerlink\" title=\"多文件编辑\"></a>多文件编辑</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim file1.. 同时打开多个文件</span><br><span class=\"line\">:args 显示当前编辑文件</span><br><span class=\"line\">:next 切换到下个文件</span><br><span class=\"line\">:prev 切换到前个文件</span><br><span class=\"line\">:next！ 不保存当前编辑文件并切换到下个文件</span><br><span class=\"line\">:prev！ 不保存当前编辑文件并切换到上个文件</span><br><span class=\"line\">:wnext 保存当前编辑文件并切换到下个文件</span><br><span class=\"line\">:wprev 保存当前编辑文件并切换到上个文件</span><br><span class=\"line\">:first 定位首文件</span><br><span class=\"line\">:last 定位尾文件</span><br><span class=\"line\">ctrl+^ 快速在最近打开的两个文件间切换</span><br><span class=\"line\">:split[sp] 把当前文件水平分割</span><br><span class=\"line\">:split file 把当前窗口水平分割, file</span><br><span class=\"line\">:vsplit[vsp] file 把当前窗口垂直分割, file</span><br><span class=\"line\">:new file 同split file</span><br><span class=\"line\">:close 关闭当前窗口</span><br><span class=\"line\">:only 只显示当前窗口, 关闭所有其他的窗口</span><br><span class=\"line\">:all 打开所有的窗口</span><br><span class=\"line\">:vertical all 打开所有的窗口, 垂直打开</span><br><span class=\"line\">:qall 对所有窗口执行：q操作</span><br><span class=\"line\">:qall! 对所有窗口执行：q!操作</span><br><span class=\"line\">:wall 对所有窗口执行：w操作</span><br><span class=\"line\">:wqall 对所有窗口执行：wq操作</span><br><span class=\"line\">ctrl-w h 跳转到左边的窗口</span><br><span class=\"line\">ctrl-w j 跳转到下面的窗口</span><br><span class=\"line\">ctrl-w k 跳转到上面的窗口</span><br><span class=\"line\">ctrl-w l 跳转到右边的窗口</span><br><span class=\"line\">ctrl-w t 跳转到最顶上的窗口</span><br><span class=\"line\">ctrl-w b 跳转到最底下的窗口</span><br></pre></td></tr></table></figure>\n<h1 id=\"多标签编辑\"><a href=\"#多标签编辑\" class=\"headerlink\" title=\"多标签编辑\"></a>多标签编辑</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:tabedit file 在新标签中打开文件file</span><br><span class=\"line\">:tab split file 在新标签中打开文件file</span><br><span class=\"line\">:tabp 切换到前一个标签</span><br><span class=\"line\">:tabn 切换到后一个标签</span><br><span class=\"line\">:tabc 关闭当前标签</span><br><span class=\"line\">:tabo 关闭其他标签</span><br><span class=\"line\">gt 到下一个tab</span><br><span class=\"line\">gT 到上一个tab</span><br><span class=\"line\">0gt 跳到第一个tab</span><br><span class=\"line\">5gt 跳到第五个tab</span><br></pre></td></tr></table></figure>\n<h1 id=\"执行shell命令\"><a href=\"#执行shell命令\" class=\"headerlink\" title=\"执行shell命令\"></a>执行shell命令</h1><p>1、在命令模式下输入”:sh”，可以运行相当于在字符模式下，到输入结束想回到VIM编辑器中用exit，ctrl+D返回VIM编辑器<br>2、可以”!command”，运行结束后自动回到VIM编辑器中<br>3、用“Ctrl+Z“回到shell，用fg返回编辑<br>4、:!make -&gt; 直接在当前目录下运行make指令</p>\n<h1 id=\"VIM启动项\"><a href=\"#VIM启动项\" class=\"headerlink\" title=\"VIM启动项\"></a>VIM启动项</h1><p>-o[n] 以水平分屏的方式打开多个文件<br>-O[n] 以垂直分屏的方式打开多个文件</p>\n<h1 id=\"自动排版\"><a href=\"#自动排版\" class=\"headerlink\" title=\"自动排版\"></a>自动排版</h1><p>在粘贴了一些代码之后，vim变得比较乱，只要执行gg=G就能搞定</p>\n<h1 id=\"如何在vim中编译程序\"><a href=\"#如何在vim中编译程序\" class=\"headerlink\" title=\"如何在vim中编译程序\"></a>如何在vim中编译程序</h1><p>在vim中可以完成make,而且可以将编译的结果也显示在vim里，先执行 :copen 命令，将结果输出的窗口打开，然后执行 :make<br>编译后的结果就显示在了copen打开的小窗口里了，而且用鼠标双击错误信息，就会跳转到发生错误的行。</p>\n<h1 id=\"buffer操作\"><a href=\"#buffer操作\" class=\"headerlink\" title=\"buffer操作\"></a>buffer操作</h1><h2 id=\"buffer状态\"><a href=\"#buffer状态\" class=\"headerlink\" title=\"buffer状态\"></a>buffer状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- （非活动的缓冲区）</span><br><span class=\"line\">a （当前被激活缓冲区）</span><br><span class=\"line\">h （隐藏的缓冲区）</span><br><span class=\"line\">% （当前的缓冲区）</span><br><span class=\"line\"># （交换缓冲区）</span><br><span class=\"line\">= （只读缓冲区）</span><br><span class=\"line\">+ （已经更改的缓冲区）</span><br></pre></td></tr></table></figure>\n<h1 id=\"VIM-操作目录\"><a href=\"#VIM-操作目录\" class=\"headerlink\" title=\"VIM 操作目录\"></a>VIM 操作目录</h1><h2 id=\"打开目录\"><a href=\"#打开目录\" class=\"headerlink\" title=\"打开目录\"></a>打开目录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim .</span><br><span class=\"line\">vim a-path/</span><br></pre></td></tr></table></figure>\n<h2 id=\"以下操作在操作目录时生效\"><a href=\"#以下操作在操作目录时生效\" class=\"headerlink\" title=\"以下操作在操作目录时生效\"></a>以下操作在操作目录时生效</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p,P,t,u,U,x,v,o,r,s</span><br><span class=\"line\"></span><br><span class=\"line\">c 使当前打开的目录成为当前目录</span><br><span class=\"line\">d 创建目录</span><br><span class=\"line\">% 创建文件</span><br><span class=\"line\">D 删除文件/目录</span><br><span class=\"line\">- 转到上层目录</span><br><span class=\"line\">gb 转到上一个 bookmarked directory</span><br><span class=\"line\">i 改变目录文件列表方式</span><br><span class=\"line\">^l 刷新当前打开的目录</span><br><span class=\"line\"></span><br><span class=\"line\">mf - 标记文件</span><br><span class=\"line\">mu - unmark all marked files</span><br><span class=\"line\">mz - Compress/decompress marked files</span><br><span class=\"line\">gh 显示/不显示隐藏文件( dot-files)</span><br><span class=\"line\">^h 编辑隐藏文件列表</span><br><span class=\"line\">a 转换显示模式, all - hide - unhide</span><br><span class=\"line\">qf diplay infomation about file</span><br><span class=\"line\">qb list the bookmarked directories and directory traversal history</span><br><span class=\"line\">gi Display information on file</span><br><span class=\"line\"></span><br><span class=\"line\">mb</span><br><span class=\"line\">mc</span><br><span class=\"line\">md - 将标记的文件(mf标记文件)使用 diff 模式</span><br><span class=\"line\">me - 编辑标记的文件,只显示一个，其余放入 buffer 中</span><br><span class=\"line\">mh</span><br><span class=\"line\">mm - move marked files to marked-file target directory</span><br><span class=\"line\">mc - copy</span><br><span class=\"line\">mp</span><br><span class=\"line\">mr</span><br><span class=\"line\">mt</span><br></pre></td></tr></table></figure>\n<p>vim 中复制,移动文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1, mt - 移动到的目录</span><br><span class=\"line\">2, mf - 标记要移动的文件</span><br><span class=\"line\">3, mc - 移动/复制</span><br></pre></td></tr></table></figure></p>\n<p>R 移动文件</p>\n<p>打开当前编辑文件的目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:Explore</span><br><span class=\"line\">:Hexplore</span><br><span class=\"line\">:Nexplore</span><br><span class=\"line\">:Pexplore</span><br><span class=\"line\">:Sexplore</span><br><span class=\"line\">:Texplore</span><br><span class=\"line\">:Vexplore</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.cnblogs.com/lijia0511/p/5644566.html\" target=\"_blank\" rel=\"noopener\">详细使用教程</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"移动光标\"><a href=\"#移动光标\" class=\"headerlink\" title=\"移动光标\"></a>移动光标</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h, j, k, l 上，下，左，右</span><br><span class=\"line\">ctrl-e 移动页面</span><br><span class=\"line\">ctrl-f 上翻一页</span><br><span class=\"line\">ctrl-b 下翻一页</span><br><span class=\"line\">ctrl-u 上翻半页</span><br><span class=\"line\">ctrl-d 下翻半页</span><br><span class=\"line\">w 跳到下一个字首，按标点或单词分割</span><br><span class=\"line\">W 跳到下一个字首，长跳，如end-of-line被认为是一个字</span><br><span class=\"line\">e 跳到下一个字尾</span><br><span class=\"line\">E 跳到下一个字尾，长跳</span><br><span class=\"line\">b 跳到上一个字</span><br><span class=\"line\">B 跳到上一个字，长跳</span><br><span class=\"line\">0 跳至行首，不管有无缩进，就是跳到第0个字符</span><br><span class=\"line\">^ 跳至行首的第一个字符</span><br><span class=\"line\">$ 跳至行尾</span><br><span class=\"line\">gg 跳至文首</span><br><span class=\"line\">G 调至文尾</span><br><span class=\"line\">5gg/5G 调至第5行</span><br><span class=\"line\">gd 跳至当前光标所在的变量的声明处</span><br><span class=\"line\">fx 在当前行中找x字符，找到了就跳转至</span><br><span class=\"line\">; 重复上一个f命令，而不用重复的输入fx</span><br><span class=\"line\">* 查找光标所在处的单词，向下查找</span><br><span class=\"line\"># 查找光标所在处的单词，向上查找</span><br></pre></td></tr></table></figure>\n<h1 id=\"删除复制\"><a href=\"#删除复制\" class=\"headerlink\" title=\"删除复制\"></a>删除复制</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd 删除光标所在行</span><br><span class=\"line\">dw 删除一个字(word)</span><br><span class=\"line\">d/D删除到行末x删除当前字符X删除前一个字符yy复制一行yw复制一个字y/Y 复制到行末</span><br><span class=\"line\">p 粘贴粘贴板的内容到当前行的下面</span><br><span class=\"line\">P 粘贴粘贴板的内容到当前行的上面</span><br></pre></td></tr></table></figure>\n<h1 id=\"插入模式\"><a href=\"#插入模式\" class=\"headerlink\" title=\"插入模式\"></a>插入模式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i 从当前光标处进入插入模式</span><br><span class=\"line\">I 进入插入模式，并置光标于行首</span><br><span class=\"line\">a 追加模式，置光标于当前光标之后</span><br><span class=\"line\">A 追加模式，置光标于行末</span><br><span class=\"line\">o 在当前行之下新加一行，并进入插入模式</span><br><span class=\"line\">O 在当前行之上新加一行，并进入插入模式</span><br><span class=\"line\">Esc 退出插入模式</span><br></pre></td></tr></table></figure>\n<h1 id=\"编辑\"><a href=\"#编辑\" class=\"headerlink\" title=\"编辑\"></a>编辑</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">J 将下一行和当前行连接为一行</span><br><span class=\"line\">cc 删除当前行并进入编辑模式</span><br><span class=\"line\">cw 删除当前字，并进入编辑模式</span><br><span class=\"line\">c$ 擦除从当前位置至行末的内容，并进入编辑模式</span><br><span class=\"line\">s 删除当前字符并进入编辑模式</span><br><span class=\"line\">S 删除光标所在行并进入编辑模式</span><br><span class=\"line\">xp 交换当前字符和下一个字符</span><br><span class=\"line\">u 撤销</span><br><span class=\"line\">ctrl+r 重做</span><br><span class=\"line\">~ 切换大小写，当前字符</span><br><span class=\"line\">&gt;&gt; 将当前行右移一个单位</span><br><span class=\"line\">&lt;&lt; 将当前行左移一个单位(一个tab符)</span><br><span class=\"line\">== 自动缩进当前行</span><br></pre></td></tr></table></figure>\n<h1 id=\"查找替换\"><a href=\"#查找替换\" class=\"headerlink\" title=\"查找替换\"></a>查找替换</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/pattern 向后搜索字符串pattern</span><br><span class=\"line\">?pattern 向前搜索字符串pattern</span><br><span class=\"line\">&quot;\\c&quot; 忽略大小写</span><br><span class=\"line\">&quot;\\C&quot; 大小写敏感</span><br><span class=\"line\"></span><br><span class=\"line\">n 下一个匹配(如果是/搜索，则是向下的下一个，?搜索则是向上的下一个)</span><br><span class=\"line\">N 上一个匹配(同上)</span><br><span class=\"line\">:%s/old/new/g 搜索整个文件，将所有的old替换为new</span><br><span class=\"line\">:%s/old/new/gc 搜索整个文件，将所有的old替换为new，每次都要你确认是否替换</span><br></pre></td></tr></table></figure>\n<h1 id=\"退出编辑器\"><a href=\"#退出编辑器\" class=\"headerlink\" title=\"退出编辑器\"></a>退出编辑器</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:w 将缓冲区写入文件，即保存修改</span><br><span class=\"line\">:wq 保存修改并退出</span><br><span class=\"line\">:x 保存修改并退出</span><br><span class=\"line\">:q 退出，如果对缓冲区进行过修改，则会提示</span><br><span class=\"line\">:q! 强制退出，放弃修改</span><br></pre></td></tr></table></figure>\n<h1 id=\"多文件编辑\"><a href=\"#多文件编辑\" class=\"headerlink\" title=\"多文件编辑\"></a>多文件编辑</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim file1.. 同时打开多个文件</span><br><span class=\"line\">:args 显示当前编辑文件</span><br><span class=\"line\">:next 切换到下个文件</span><br><span class=\"line\">:prev 切换到前个文件</span><br><span class=\"line\">:next！ 不保存当前编辑文件并切换到下个文件</span><br><span class=\"line\">:prev！ 不保存当前编辑文件并切换到上个文件</span><br><span class=\"line\">:wnext 保存当前编辑文件并切换到下个文件</span><br><span class=\"line\">:wprev 保存当前编辑文件并切换到上个文件</span><br><span class=\"line\">:first 定位首文件</span><br><span class=\"line\">:last 定位尾文件</span><br><span class=\"line\">ctrl+^ 快速在最近打开的两个文件间切换</span><br><span class=\"line\">:split[sp] 把当前文件水平分割</span><br><span class=\"line\">:split file 把当前窗口水平分割, file</span><br><span class=\"line\">:vsplit[vsp] file 把当前窗口垂直分割, file</span><br><span class=\"line\">:new file 同split file</span><br><span class=\"line\">:close 关闭当前窗口</span><br><span class=\"line\">:only 只显示当前窗口, 关闭所有其他的窗口</span><br><span class=\"line\">:all 打开所有的窗口</span><br><span class=\"line\">:vertical all 打开所有的窗口, 垂直打开</span><br><span class=\"line\">:qall 对所有窗口执行：q操作</span><br><span class=\"line\">:qall! 对所有窗口执行：q!操作</span><br><span class=\"line\">:wall 对所有窗口执行：w操作</span><br><span class=\"line\">:wqall 对所有窗口执行：wq操作</span><br><span class=\"line\">ctrl-w h 跳转到左边的窗口</span><br><span class=\"line\">ctrl-w j 跳转到下面的窗口</span><br><span class=\"line\">ctrl-w k 跳转到上面的窗口</span><br><span class=\"line\">ctrl-w l 跳转到右边的窗口</span><br><span class=\"line\">ctrl-w t 跳转到最顶上的窗口</span><br><span class=\"line\">ctrl-w b 跳转到最底下的窗口</span><br></pre></td></tr></table></figure>\n<h1 id=\"多标签编辑\"><a href=\"#多标签编辑\" class=\"headerlink\" title=\"多标签编辑\"></a>多标签编辑</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:tabedit file 在新标签中打开文件file</span><br><span class=\"line\">:tab split file 在新标签中打开文件file</span><br><span class=\"line\">:tabp 切换到前一个标签</span><br><span class=\"line\">:tabn 切换到后一个标签</span><br><span class=\"line\">:tabc 关闭当前标签</span><br><span class=\"line\">:tabo 关闭其他标签</span><br><span class=\"line\">gt 到下一个tab</span><br><span class=\"line\">gT 到上一个tab</span><br><span class=\"line\">0gt 跳到第一个tab</span><br><span class=\"line\">5gt 跳到第五个tab</span><br></pre></td></tr></table></figure>\n<h1 id=\"执行shell命令\"><a href=\"#执行shell命令\" class=\"headerlink\" title=\"执行shell命令\"></a>执行shell命令</h1><p>1、在命令模式下输入”:sh”，可以运行相当于在字符模式下，到输入结束想回到VIM编辑器中用exit，ctrl+D返回VIM编辑器<br>2、可以”!command”，运行结束后自动回到VIM编辑器中<br>3、用“Ctrl+Z“回到shell，用fg返回编辑<br>4、:!make -&gt; 直接在当前目录下运行make指令</p>\n<h1 id=\"VIM启动项\"><a href=\"#VIM启动项\" class=\"headerlink\" title=\"VIM启动项\"></a>VIM启动项</h1><p>-o[n] 以水平分屏的方式打开多个文件<br>-O[n] 以垂直分屏的方式打开多个文件</p>\n<h1 id=\"自动排版\"><a href=\"#自动排版\" class=\"headerlink\" title=\"自动排版\"></a>自动排版</h1><p>在粘贴了一些代码之后，vim变得比较乱，只要执行gg=G就能搞定</p>\n<h1 id=\"如何在vim中编译程序\"><a href=\"#如何在vim中编译程序\" class=\"headerlink\" title=\"如何在vim中编译程序\"></a>如何在vim中编译程序</h1><p>在vim中可以完成make,而且可以将编译的结果也显示在vim里，先执行 :copen 命令，将结果输出的窗口打开，然后执行 :make<br>编译后的结果就显示在了copen打开的小窗口里了，而且用鼠标双击错误信息，就会跳转到发生错误的行。</p>\n<h1 id=\"buffer操作\"><a href=\"#buffer操作\" class=\"headerlink\" title=\"buffer操作\"></a>buffer操作</h1><h2 id=\"buffer状态\"><a href=\"#buffer状态\" class=\"headerlink\" title=\"buffer状态\"></a>buffer状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- （非活动的缓冲区）</span><br><span class=\"line\">a （当前被激活缓冲区）</span><br><span class=\"line\">h （隐藏的缓冲区）</span><br><span class=\"line\">% （当前的缓冲区）</span><br><span class=\"line\"># （交换缓冲区）</span><br><span class=\"line\">= （只读缓冲区）</span><br><span class=\"line\">+ （已经更改的缓冲区）</span><br></pre></td></tr></table></figure>\n<h1 id=\"VIM-操作目录\"><a href=\"#VIM-操作目录\" class=\"headerlink\" title=\"VIM 操作目录\"></a>VIM 操作目录</h1><h2 id=\"打开目录\"><a href=\"#打开目录\" class=\"headerlink\" title=\"打开目录\"></a>打开目录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim .</span><br><span class=\"line\">vim a-path/</span><br></pre></td></tr></table></figure>\n<h2 id=\"以下操作在操作目录时生效\"><a href=\"#以下操作在操作目录时生效\" class=\"headerlink\" title=\"以下操作在操作目录时生效\"></a>以下操作在操作目录时生效</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p,P,t,u,U,x,v,o,r,s</span><br><span class=\"line\"></span><br><span class=\"line\">c 使当前打开的目录成为当前目录</span><br><span class=\"line\">d 创建目录</span><br><span class=\"line\">% 创建文件</span><br><span class=\"line\">D 删除文件/目录</span><br><span class=\"line\">- 转到上层目录</span><br><span class=\"line\">gb 转到上一个 bookmarked directory</span><br><span class=\"line\">i 改变目录文件列表方式</span><br><span class=\"line\">^l 刷新当前打开的目录</span><br><span class=\"line\"></span><br><span class=\"line\">mf - 标记文件</span><br><span class=\"line\">mu - unmark all marked files</span><br><span class=\"line\">mz - Compress/decompress marked files</span><br><span class=\"line\">gh 显示/不显示隐藏文件( dot-files)</span><br><span class=\"line\">^h 编辑隐藏文件列表</span><br><span class=\"line\">a 转换显示模式, all - hide - unhide</span><br><span class=\"line\">qf diplay infomation about file</span><br><span class=\"line\">qb list the bookmarked directories and directory traversal history</span><br><span class=\"line\">gi Display information on file</span><br><span class=\"line\"></span><br><span class=\"line\">mb</span><br><span class=\"line\">mc</span><br><span class=\"line\">md - 将标记的文件(mf标记文件)使用 diff 模式</span><br><span class=\"line\">me - 编辑标记的文件,只显示一个，其余放入 buffer 中</span><br><span class=\"line\">mh</span><br><span class=\"line\">mm - move marked files to marked-file target directory</span><br><span class=\"line\">mc - copy</span><br><span class=\"line\">mp</span><br><span class=\"line\">mr</span><br><span class=\"line\">mt</span><br></pre></td></tr></table></figure>\n<p>vim 中复制,移动文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1, mt - 移动到的目录</span><br><span class=\"line\">2, mf - 标记要移动的文件</span><br><span class=\"line\">3, mc - 移动/复制</span><br></pre></td></tr></table></figure></p>\n<p>R 移动文件</p>\n<p>打开当前编辑文件的目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:Explore</span><br><span class=\"line\">:Hexplore</span><br><span class=\"line\">:Nexplore</span><br><span class=\"line\">:Pexplore</span><br><span class=\"line\">:Sexplore</span><br><span class=\"line\">:Texplore</span><br><span class=\"line\">:Vexplore</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.cnblogs.com/lijia0511/p/5644566.html\" target=\"_blank\" rel=\"noopener\">详细使用教程</a></p>\n"},{"title":"to-write-list","date":"2018-05-27T09:07:59.000Z","_content":"","source":"_posts/201805-to-write-list.md","raw":"---\ntitle: to-write-list\ndate: 2018-05-27 17:07:59\ntags:\n---\n","slug":"to-write-list","published":1,"updated":"2018-05-27T09:07:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjidbf1qd000ary1dtotooxau","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"scala array list tuple and so on","date":"2018-05-20T02:11:31.000Z","_content":"\n# Array 类型参数化数组\n\nscala Array 的初始化\n\n``` java\n// 简洁的方法创造和初始化：\nval numNames = Array(\"zero\", \"one\", \"two\")\n\n// 更罗嗦的调用 apply 方法：\nval numNames2 = Array.apply(\"zero\", \"one\", \"two\") \n```\n\n``` java\nobject HelloWorld \n{\n\n    def main(args: Array[String]) \n    {\n      val greetStrings = new Array[String](3)  \n\n      greetStrings(0) = \"Scala: Hello\" \n      greetStrings(1) = \", \" \n      greetStrings(2) = \"world!\\n\" \n      for (i <- 0 to 2) \n           print(greetStrings(i)) \n    }\n\n}\n// 输出结果：Scala: Hello, world!\n```\n\nScala里的数组是通过把索引放在圆括号里面访问的，而不是像Java那样放在方括号里。所以数组的第零个元素是greetStrings(0)，不是greetStrings[0]。\n\n`val` 的概念: 当你用val定义一个变量，那么这个变量就不能重新赋值，但它指向的对象却仍可以改变。\n\n> 在本例中，你不能把greetStrings重新赋值成不同的数组；greetStrings将永远指向那个它被初始化时候指向的同一个Array[String]实例。但是你能一遍遍修改那个Array[String]的元素，因此数组本身是可变的。\n\n# 使用列表【List】\n\nScala `Array` 数组是一个所有对象都共享相同类型的可变序列。比方说Array[String]仅包含String。尽管实例化之后你无法改变Array的长度，它的元素值却是可变的。因此，Array是可变的对象。\n\nScala的List类是共享相同类型的不可变对象序列。\n\n和数组一样，List[String]包含的仅仅是String。 \nScala的List不同于Java的java.util.List，总是不可变的（而Java的List可变）。\n\n``` java\n// 创建一个Scala的List很简单\nval oneTwoThree = List(1, 2, 3)\n\n```\n上述代码完成了一个新的叫做oneTwoThree的val，并已经用带有整数元素值1，2和3的新List[Int]初始化。\n\n## List 操作\n\n这个List可以这么用：\n\n``` java\nval oneTwo = List(1, 2)  \nval threeFour = List(3, 4) \nval oneTwoThreeFour = oneTwo ::: threeFour  // ::: 拼接List\n\nprintln(oneTwo + \" 和 \" + threeFour + \" 是不可变的\")  \nprintln(oneTwoThreeFour + \" 是个新列表了\")\n\n// 运行结果:\n// List(1, 2) 和 List(3, 4) 是不可变的\n// List(1, 2, 3, 4) 是个新列表了\n```\n\nList最常用的操作符是发音为”cons”的” :: “. 例如，\n\n``` java\nval twoThree = List(2, 3)\nval oneTwoThree = 1 :: twoThree  // 拼接元素 和 List\nprintln(oneTwoThree) \n\n// 结果为：List(1, 2, 3) \n```\n\n类List没有提供append操作。 \n如果你想通过添加元素来构造列表： \n- 前缀进去，完成之后再调用reverse； \n- 使用ListBuffer，一种提供append操作的可变列表，完成之后调用toList。\n\n# 使用元组【Tuple】\n\n另一种有用的容器对象是元组：tuple。与列表一样，元组也是不可变的，但与列表不同，元组可以包含不同类型的元素。\n\n列表应该是List[Int]或List[String]的样子，元组可以同时拥有Int和String。\n\nScala里你可以简单地返回一个元组。 \n而且这么做的确简单：实例化一个装有一些对象的新元组，只要把这些对象放在括号里，并用逗号分隔即可。 \n一旦你已经实例化了一个元组，你可以用点号，下划线和一个基于1的元素索引访问它。\n\n一个例子：\n\n``` java\nval pair = (99, \"Luftballons\")  //Scala推断元组类型为Tuple2[Int, String]，并把它赋给变量pair。\nprintln(pair._1)                //访问_1字段，从而输出第一个元素，99。\nprintln(pair._2)                \n\n// 运行结果\n// 99\n// Luftballons\n```\n\n元组第一个元素是以99为值的Int，第二个是”luftballons”为值的String。\n\n元组的实际类型取决于它含有的元素数量和这些元素的类型。 \n因此，(99, “Luftballons”)的类型是Tuple2[Int, String]。\n\n类似地，(‘u’, ‘r’, ‘the’, 1, 4, “me”)是Tuple6[Char, Char, String, Int, Int, String]。\n\n## 访问元组的元素\n\n为什么你不能像访问List里的元素那样访问元组的，就像pair(0)？ \n因为List的apply方法始终返回同样的类型，但是元组里的或许类型不同。 \n_1可以有一个结果类型，_2是另外一个。 \n\n> 另：元组元素编号从1开始。\n\n# 使用Set和Map\n\n当问题讨论到集和映射，Scala同样提供了可变和不可变的替代品，不过用了不同的办法。\n\n对于集和映射，Scala把可变性建模在类继承中。\n\n例如，Scala的API包含了集的一个基本特质：trait，特质这个概念接近于Java的接口。\n\nScala于是提供了两个子特质，一个是可变的集，另一个是不可变的集。这三个特质都共享同样的简化名，Set。\n\n如果你想要使用HashSet，你可以根据你的需要选择可变的或不可变的变体。\n\n创造集的缺省方法实例：\n\n``` java\nvar jetSet = Set(\"Boeing\", \"Airbus\")  //定义了名为jetSet的新var，包含两个字串\njetSet += \"Lear\"                      // jetSet = jetSet + \"Lear\" \nprintln(jetSet.contains(\"Cessna\"))    //打印输出集是否包含字串\"Cessna\"。\nprintln(jetSet.contains(\"Lear\"))      //打印输出集是否包含字串\"Lear\"。\n\n// 运行结果：\n// false\n// true\n```\n\n需要不可变集，就需要使用一个引用：import，如下所示：\n\n``` java\nimport scala.collection.mutable.Set  \n\nval movieSet = Set(\"Hitch\", \"Poltergeist\")  \nmovieSet += \"Shrek\" \nprintln(movieSet)  \n\n// 运行结果：\n// Set(Poltergeist, Shrek, Hitch)\n```\n\n需要一个不可变的HashSet，你可以这么做：\n\n``` java\nimport scala.collection.immutable.HashSet  \nval hashSet = HashSet(\"Tomatoes\", \"Chilies\")  \nprintln(hashSet + \"Coriander\") \n\n// 运行结果\n// Set(Chilies, Tomatoes, Coriander)\n```\n\nMap是Scala里另一种有用的集合类。 \n和集一样，Scala采用了类继承机制提供了可变的和不可变的两种版本的Map。\n\n`scala.collection` 包里面有一个基础Map特质和两个子特质Map： \n可变的Map在scala.collection.mutable里，不可变的在scala.collection.immutable里。\n\n可变映射的创造过程：\n\n``` java\nimport scala.collection.mutable.Map  \n\nval treasureMap = Map[Int, String]()  \ntreasureMap += (1 -> \"我在\")  \ntreasureMap += (2 -> \"学习\")  \ntreasureMap += (3 -> \"Scala\")  \nprintln(treasureMap(1) + treasureMap(2) + treasureMap(3)) \n\n// 运行结果：\n// 我在学习Scala.\n```\n\n至于不可变映射，就不用引用任何类了，因为不可变映射是缺省的，代码例子：\n\n``` java\nval romanNumeral = Map(      \n        1 -> \"我\", 2 -> \"是\", 3 -> \"缺\", 4 -> \"省\", 5 -> \"的\" )  \nprintln(romanNumeral(1) + romanNumeral(2) + romanNumeral(3) + romanNumeral(4) + romanNumeral(5))  \n\n// 运行结果：\n// 我是缺省的\n```","source":"_posts/201805-scala-array-list-tuple-and-so-on.md","raw":"---\ntitle: scala array list tuple and so on\ndate: 2018-05-20 10:11:31\ntags:\n---\n\n# Array 类型参数化数组\n\nscala Array 的初始化\n\n``` java\n// 简洁的方法创造和初始化：\nval numNames = Array(\"zero\", \"one\", \"two\")\n\n// 更罗嗦的调用 apply 方法：\nval numNames2 = Array.apply(\"zero\", \"one\", \"two\") \n```\n\n``` java\nobject HelloWorld \n{\n\n    def main(args: Array[String]) \n    {\n      val greetStrings = new Array[String](3)  \n\n      greetStrings(0) = \"Scala: Hello\" \n      greetStrings(1) = \", \" \n      greetStrings(2) = \"world!\\n\" \n      for (i <- 0 to 2) \n           print(greetStrings(i)) \n    }\n\n}\n// 输出结果：Scala: Hello, world!\n```\n\nScala里的数组是通过把索引放在圆括号里面访问的，而不是像Java那样放在方括号里。所以数组的第零个元素是greetStrings(0)，不是greetStrings[0]。\n\n`val` 的概念: 当你用val定义一个变量，那么这个变量就不能重新赋值，但它指向的对象却仍可以改变。\n\n> 在本例中，你不能把greetStrings重新赋值成不同的数组；greetStrings将永远指向那个它被初始化时候指向的同一个Array[String]实例。但是你能一遍遍修改那个Array[String]的元素，因此数组本身是可变的。\n\n# 使用列表【List】\n\nScala `Array` 数组是一个所有对象都共享相同类型的可变序列。比方说Array[String]仅包含String。尽管实例化之后你无法改变Array的长度，它的元素值却是可变的。因此，Array是可变的对象。\n\nScala的List类是共享相同类型的不可变对象序列。\n\n和数组一样，List[String]包含的仅仅是String。 \nScala的List不同于Java的java.util.List，总是不可变的（而Java的List可变）。\n\n``` java\n// 创建一个Scala的List很简单\nval oneTwoThree = List(1, 2, 3)\n\n```\n上述代码完成了一个新的叫做oneTwoThree的val，并已经用带有整数元素值1，2和3的新List[Int]初始化。\n\n## List 操作\n\n这个List可以这么用：\n\n``` java\nval oneTwo = List(1, 2)  \nval threeFour = List(3, 4) \nval oneTwoThreeFour = oneTwo ::: threeFour  // ::: 拼接List\n\nprintln(oneTwo + \" 和 \" + threeFour + \" 是不可变的\")  \nprintln(oneTwoThreeFour + \" 是个新列表了\")\n\n// 运行结果:\n// List(1, 2) 和 List(3, 4) 是不可变的\n// List(1, 2, 3, 4) 是个新列表了\n```\n\nList最常用的操作符是发音为”cons”的” :: “. 例如，\n\n``` java\nval twoThree = List(2, 3)\nval oneTwoThree = 1 :: twoThree  // 拼接元素 和 List\nprintln(oneTwoThree) \n\n// 结果为：List(1, 2, 3) \n```\n\n类List没有提供append操作。 \n如果你想通过添加元素来构造列表： \n- 前缀进去，完成之后再调用reverse； \n- 使用ListBuffer，一种提供append操作的可变列表，完成之后调用toList。\n\n# 使用元组【Tuple】\n\n另一种有用的容器对象是元组：tuple。与列表一样，元组也是不可变的，但与列表不同，元组可以包含不同类型的元素。\n\n列表应该是List[Int]或List[String]的样子，元组可以同时拥有Int和String。\n\nScala里你可以简单地返回一个元组。 \n而且这么做的确简单：实例化一个装有一些对象的新元组，只要把这些对象放在括号里，并用逗号分隔即可。 \n一旦你已经实例化了一个元组，你可以用点号，下划线和一个基于1的元素索引访问它。\n\n一个例子：\n\n``` java\nval pair = (99, \"Luftballons\")  //Scala推断元组类型为Tuple2[Int, String]，并把它赋给变量pair。\nprintln(pair._1)                //访问_1字段，从而输出第一个元素，99。\nprintln(pair._2)                \n\n// 运行结果\n// 99\n// Luftballons\n```\n\n元组第一个元素是以99为值的Int，第二个是”luftballons”为值的String。\n\n元组的实际类型取决于它含有的元素数量和这些元素的类型。 \n因此，(99, “Luftballons”)的类型是Tuple2[Int, String]。\n\n类似地，(‘u’, ‘r’, ‘the’, 1, 4, “me”)是Tuple6[Char, Char, String, Int, Int, String]。\n\n## 访问元组的元素\n\n为什么你不能像访问List里的元素那样访问元组的，就像pair(0)？ \n因为List的apply方法始终返回同样的类型，但是元组里的或许类型不同。 \n_1可以有一个结果类型，_2是另外一个。 \n\n> 另：元组元素编号从1开始。\n\n# 使用Set和Map\n\n当问题讨论到集和映射，Scala同样提供了可变和不可变的替代品，不过用了不同的办法。\n\n对于集和映射，Scala把可变性建模在类继承中。\n\n例如，Scala的API包含了集的一个基本特质：trait，特质这个概念接近于Java的接口。\n\nScala于是提供了两个子特质，一个是可变的集，另一个是不可变的集。这三个特质都共享同样的简化名，Set。\n\n如果你想要使用HashSet，你可以根据你的需要选择可变的或不可变的变体。\n\n创造集的缺省方法实例：\n\n``` java\nvar jetSet = Set(\"Boeing\", \"Airbus\")  //定义了名为jetSet的新var，包含两个字串\njetSet += \"Lear\"                      // jetSet = jetSet + \"Lear\" \nprintln(jetSet.contains(\"Cessna\"))    //打印输出集是否包含字串\"Cessna\"。\nprintln(jetSet.contains(\"Lear\"))      //打印输出集是否包含字串\"Lear\"。\n\n// 运行结果：\n// false\n// true\n```\n\n需要不可变集，就需要使用一个引用：import，如下所示：\n\n``` java\nimport scala.collection.mutable.Set  \n\nval movieSet = Set(\"Hitch\", \"Poltergeist\")  \nmovieSet += \"Shrek\" \nprintln(movieSet)  \n\n// 运行结果：\n// Set(Poltergeist, Shrek, Hitch)\n```\n\n需要一个不可变的HashSet，你可以这么做：\n\n``` java\nimport scala.collection.immutable.HashSet  \nval hashSet = HashSet(\"Tomatoes\", \"Chilies\")  \nprintln(hashSet + \"Coriander\") \n\n// 运行结果\n// Set(Chilies, Tomatoes, Coriander)\n```\n\nMap是Scala里另一种有用的集合类。 \n和集一样，Scala采用了类继承机制提供了可变的和不可变的两种版本的Map。\n\n`scala.collection` 包里面有一个基础Map特质和两个子特质Map： \n可变的Map在scala.collection.mutable里，不可变的在scala.collection.immutable里。\n\n可变映射的创造过程：\n\n``` java\nimport scala.collection.mutable.Map  \n\nval treasureMap = Map[Int, String]()  \ntreasureMap += (1 -> \"我在\")  \ntreasureMap += (2 -> \"学习\")  \ntreasureMap += (3 -> \"Scala\")  \nprintln(treasureMap(1) + treasureMap(2) + treasureMap(3)) \n\n// 运行结果：\n// 我在学习Scala.\n```\n\n至于不可变映射，就不用引用任何类了，因为不可变映射是缺省的，代码例子：\n\n``` java\nval romanNumeral = Map(      \n        1 -> \"我\", 2 -> \"是\", 3 -> \"缺\", 4 -> \"省\", 5 -> \"的\" )  \nprintln(romanNumeral(1) + romanNumeral(2) + romanNumeral(3) + romanNumeral(4) + romanNumeral(5))  \n\n// 运行结果：\n// 我是缺省的\n```","slug":"scala-array-list-tuple-and-so-on","published":1,"updated":"2018-05-27T07:16:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjidbf1qe000cry1d7ko6lf91","content":"<h1 id=\"Array-类型参数化数组\"><a href=\"#Array-类型参数化数组\" class=\"headerlink\" title=\"Array 类型参数化数组\"></a>Array 类型参数化数组</h1><p>scala Array 的初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 简洁的方法创造和初始化：</span></span><br><span class=\"line\">val numNames = Array(<span class=\"string\">\"zero\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更罗嗦的调用 apply 方法：</span></span><br><span class=\"line\">val numNames2 = Array.apply(<span class=\"string\">\"zero\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object HelloWorld </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">def <span class=\"title\">main</span><span class=\"params\">(args: Array[String])</span> </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">      val greetStrings = <span class=\"keyword\">new</span> Array[String](<span class=\"number\">3</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\">      greetStrings(<span class=\"number\">0</span>) = <span class=\"string\">\"Scala: Hello\"</span> </span><br><span class=\"line\">      greetStrings(<span class=\"number\">1</span>) = <span class=\"string\">\", \"</span> </span><br><span class=\"line\">      greetStrings(<span class=\"number\">2</span>) = <span class=\"string\">\"world!\\n\"</span> </span><br><span class=\"line\">      <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">0</span> to <span class=\"number\">2</span>) </span><br><span class=\"line\">           print(greetStrings(i)) </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出结果：Scala: Hello, world!</span></span><br></pre></td></tr></table></figure>\n<p>Scala里的数组是通过把索引放在圆括号里面访问的，而不是像Java那样放在方括号里。所以数组的第零个元素是greetStrings(0)，不是greetStrings[0]。</p>\n<p><code>val</code> 的概念: 当你用val定义一个变量，那么这个变量就不能重新赋值，但它指向的对象却仍可以改变。</p>\n<blockquote>\n<p>在本例中，你不能把greetStrings重新赋值成不同的数组；greetStrings将永远指向那个它被初始化时候指向的同一个Array[String]实例。但是你能一遍遍修改那个Array[String]的元素，因此数组本身是可变的。</p>\n</blockquote>\n<h1 id=\"使用列表【List】\"><a href=\"#使用列表【List】\" class=\"headerlink\" title=\"使用列表【List】\"></a>使用列表【List】</h1><p>Scala <code>Array</code> 数组是一个所有对象都共享相同类型的可变序列。比方说Array[String]仅包含String。尽管实例化之后你无法改变Array的长度，它的元素值却是可变的。因此，Array是可变的对象。</p>\n<p>Scala的List类是共享相同类型的不可变对象序列。</p>\n<p>和数组一样，List[String]包含的仅仅是String。<br>Scala的List不同于Java的java.util.List，总是不可变的（而Java的List可变）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个Scala的List很简单</span></span><br><span class=\"line\">val oneTwoThree = List(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>上述代码完成了一个新的叫做oneTwoThree的val，并已经用带有整数元素值1，2和3的新List[Int]初始化。</p>\n<h2 id=\"List-操作\"><a href=\"#List-操作\" class=\"headerlink\" title=\"List 操作\"></a>List 操作</h2><p>这个List可以这么用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val oneTwo = List(<span class=\"number\">1</span>, <span class=\"number\">2</span>)  </span><br><span class=\"line\">val threeFour = List(<span class=\"number\">3</span>, <span class=\"number\">4</span>) </span><br><span class=\"line\">val oneTwoThreeFour = oneTwo ::: threeFour  <span class=\"comment\">// ::: 拼接List</span></span><br><span class=\"line\"></span><br><span class=\"line\">println(oneTwo + <span class=\"string\">\" 和 \"</span> + threeFour + <span class=\"string\">\" 是不可变的\"</span>)  </span><br><span class=\"line\">println(oneTwoThreeFour + <span class=\"string\">\" 是个新列表了\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行结果:</span></span><br><span class=\"line\"><span class=\"comment\">// List(1, 2) 和 List(3, 4) 是不可变的</span></span><br><span class=\"line\"><span class=\"comment\">// List(1, 2, 3, 4) 是个新列表了</span></span><br></pre></td></tr></table></figure>\n<p>List最常用的操作符是发音为”cons”的” :: “. 例如，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val twoThree = List(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">val oneTwoThree = <span class=\"number\">1</span> :: twoThree  <span class=\"comment\">// 拼接元素 和 List</span></span><br><span class=\"line\">println(oneTwoThree) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果为：List(1, 2, 3)</span></span><br></pre></td></tr></table></figure>\n<p>类List没有提供append操作。<br>如果你想通过添加元素来构造列表： </p>\n<ul>\n<li>前缀进去，完成之后再调用reverse； </li>\n<li>使用ListBuffer，一种提供append操作的可变列表，完成之后调用toList。</li>\n</ul>\n<h1 id=\"使用元组【Tuple】\"><a href=\"#使用元组【Tuple】\" class=\"headerlink\" title=\"使用元组【Tuple】\"></a>使用元组【Tuple】</h1><p>另一种有用的容器对象是元组：tuple。与列表一样，元组也是不可变的，但与列表不同，元组可以包含不同类型的元素。</p>\n<p>列表应该是List[Int]或List[String]的样子，元组可以同时拥有Int和String。</p>\n<p>Scala里你可以简单地返回一个元组。<br>而且这么做的确简单：实例化一个装有一些对象的新元组，只要把这些对象放在括号里，并用逗号分隔即可。<br>一旦你已经实例化了一个元组，你可以用点号，下划线和一个基于1的元素索引访问它。</p>\n<p>一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val pair = (<span class=\"number\">99</span>, <span class=\"string\">\"Luftballons\"</span>)  <span class=\"comment\">//Scala推断元组类型为Tuple2[Int, String]，并把它赋给变量pair。</span></span><br><span class=\"line\">println(pair._1)                <span class=\"comment\">//访问_1字段，从而输出第一个元素，99。</span></span><br><span class=\"line\">println(pair._2)                </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行结果</span></span><br><span class=\"line\"><span class=\"comment\">// 99</span></span><br><span class=\"line\"><span class=\"comment\">// Luftballons</span></span><br></pre></td></tr></table></figure>\n<p>元组第一个元素是以99为值的Int，第二个是”luftballons”为值的String。</p>\n<p>元组的实际类型取决于它含有的元素数量和这些元素的类型。<br>因此，(99, “Luftballons”)的类型是Tuple2[Int, String]。</p>\n<p>类似地，(‘u’, ‘r’, ‘the’, 1, 4, “me”)是Tuple6[Char, Char, String, Int, Int, String]。</p>\n<h2 id=\"访问元组的元素\"><a href=\"#访问元组的元素\" class=\"headerlink\" title=\"访问元组的元素\"></a>访问元组的元素</h2><p>为什么你不能像访问List里的元素那样访问元组的，就像pair(0)？<br>因为List的apply方法始终返回同样的类型，但是元组里的或许类型不同。<br>_1可以有一个结果类型，_2是另外一个。 </p>\n<blockquote>\n<p>另：元组元素编号从1开始。</p>\n</blockquote>\n<h1 id=\"使用Set和Map\"><a href=\"#使用Set和Map\" class=\"headerlink\" title=\"使用Set和Map\"></a>使用Set和Map</h1><p>当问题讨论到集和映射，Scala同样提供了可变和不可变的替代品，不过用了不同的办法。</p>\n<p>对于集和映射，Scala把可变性建模在类继承中。</p>\n<p>例如，Scala的API包含了集的一个基本特质：trait，特质这个概念接近于Java的接口。</p>\n<p>Scala于是提供了两个子特质，一个是可变的集，另一个是不可变的集。这三个特质都共享同样的简化名，Set。</p>\n<p>如果你想要使用HashSet，你可以根据你的需要选择可变的或不可变的变体。</p>\n<p>创造集的缺省方法实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var jetSet = Set(<span class=\"string\">\"Boeing\"</span>, <span class=\"string\">\"Airbus\"</span>)  <span class=\"comment\">//定义了名为jetSet的新var，包含两个字串</span></span><br><span class=\"line\">jetSet += <span class=\"string\">\"Lear\"</span>                      <span class=\"comment\">// jetSet = jetSet + \"Lear\" </span></span><br><span class=\"line\">println(jetSet.contains(<span class=\"string\">\"Cessna\"</span>))    <span class=\"comment\">//打印输出集是否包含字串\"Cessna\"。</span></span><br><span class=\"line\">println(jetSet.contains(<span class=\"string\">\"Lear\"</span>))      <span class=\"comment\">//打印输出集是否包含字串\"Lear\"。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>需要不可变集，就需要使用一个引用：import，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scala.collection.mutable.Set  </span><br><span class=\"line\"></span><br><span class=\"line\">val movieSet = Set(<span class=\"string\">\"Hitch\"</span>, <span class=\"string\">\"Poltergeist\"</span>)  </span><br><span class=\"line\">movieSet += <span class=\"string\">\"Shrek\"</span> </span><br><span class=\"line\">println(movieSet)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// Set(Poltergeist, Shrek, Hitch)</span></span><br></pre></td></tr></table></figure>\n<p>需要一个不可变的HashSet，你可以这么做：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scala.collection.immutable.HashSet  </span><br><span class=\"line\">val hashSet = HashSet(<span class=\"string\">\"Tomatoes\"</span>, <span class=\"string\">\"Chilies\"</span>)  </span><br><span class=\"line\">println(hashSet + <span class=\"string\">\"Coriander\"</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行结果</span></span><br><span class=\"line\"><span class=\"comment\">// Set(Chilies, Tomatoes, Coriander)</span></span><br></pre></td></tr></table></figure>\n<p>Map是Scala里另一种有用的集合类。<br>和集一样，Scala采用了类继承机制提供了可变的和不可变的两种版本的Map。</p>\n<p><code>scala.collection</code> 包里面有一个基础Map特质和两个子特质Map：<br>可变的Map在scala.collection.mutable里，不可变的在scala.collection.immutable里。</p>\n<p>可变映射的创造过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scala.collection.mutable.Map  </span><br><span class=\"line\"></span><br><span class=\"line\">val treasureMap = Map[Int, String]()  </span><br><span class=\"line\">treasureMap += (<span class=\"number\">1</span> -&gt; <span class=\"string\">\"我在\"</span>)  </span><br><span class=\"line\">treasureMap += (<span class=\"number\">2</span> -&gt; <span class=\"string\">\"学习\"</span>)  </span><br><span class=\"line\">treasureMap += (<span class=\"number\">3</span> -&gt; <span class=\"string\">\"Scala\"</span>)  </span><br><span class=\"line\">println(treasureMap(<span class=\"number\">1</span>) + treasureMap(<span class=\"number\">2</span>) + treasureMap(<span class=\"number\">3</span>)) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// 我在学习Scala.</span></span><br></pre></td></tr></table></figure>\n<p>至于不可变映射，就不用引用任何类了，因为不可变映射是缺省的，代码例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val romanNumeral = Map(      </span><br><span class=\"line\">        <span class=\"number\">1</span> -&gt; <span class=\"string\">\"我\"</span>, <span class=\"number\">2</span> -&gt; <span class=\"string\">\"是\"</span>, <span class=\"number\">3</span> -&gt; <span class=\"string\">\"缺\"</span>, <span class=\"number\">4</span> -&gt; <span class=\"string\">\"省\"</span>, <span class=\"number\">5</span> -&gt; <span class=\"string\">\"的\"</span> )  </span><br><span class=\"line\">println(romanNumeral(<span class=\"number\">1</span>) + romanNumeral(<span class=\"number\">2</span>) + romanNumeral(<span class=\"number\">3</span>) + romanNumeral(<span class=\"number\">4</span>) + romanNumeral(<span class=\"number\">5</span>))  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// 我是缺省的</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Array-类型参数化数组\"><a href=\"#Array-类型参数化数组\" class=\"headerlink\" title=\"Array 类型参数化数组\"></a>Array 类型参数化数组</h1><p>scala Array 的初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 简洁的方法创造和初始化：</span></span><br><span class=\"line\">val numNames = Array(<span class=\"string\">\"zero\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更罗嗦的调用 apply 方法：</span></span><br><span class=\"line\">val numNames2 = Array.apply(<span class=\"string\">\"zero\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object HelloWorld </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">def <span class=\"title\">main</span><span class=\"params\">(args: Array[String])</span> </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">      val greetStrings = <span class=\"keyword\">new</span> Array[String](<span class=\"number\">3</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\">      greetStrings(<span class=\"number\">0</span>) = <span class=\"string\">\"Scala: Hello\"</span> </span><br><span class=\"line\">      greetStrings(<span class=\"number\">1</span>) = <span class=\"string\">\", \"</span> </span><br><span class=\"line\">      greetStrings(<span class=\"number\">2</span>) = <span class=\"string\">\"world!\\n\"</span> </span><br><span class=\"line\">      <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">0</span> to <span class=\"number\">2</span>) </span><br><span class=\"line\">           print(greetStrings(i)) </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出结果：Scala: Hello, world!</span></span><br></pre></td></tr></table></figure>\n<p>Scala里的数组是通过把索引放在圆括号里面访问的，而不是像Java那样放在方括号里。所以数组的第零个元素是greetStrings(0)，不是greetStrings[0]。</p>\n<p><code>val</code> 的概念: 当你用val定义一个变量，那么这个变量就不能重新赋值，但它指向的对象却仍可以改变。</p>\n<blockquote>\n<p>在本例中，你不能把greetStrings重新赋值成不同的数组；greetStrings将永远指向那个它被初始化时候指向的同一个Array[String]实例。但是你能一遍遍修改那个Array[String]的元素，因此数组本身是可变的。</p>\n</blockquote>\n<h1 id=\"使用列表【List】\"><a href=\"#使用列表【List】\" class=\"headerlink\" title=\"使用列表【List】\"></a>使用列表【List】</h1><p>Scala <code>Array</code> 数组是一个所有对象都共享相同类型的可变序列。比方说Array[String]仅包含String。尽管实例化之后你无法改变Array的长度，它的元素值却是可变的。因此，Array是可变的对象。</p>\n<p>Scala的List类是共享相同类型的不可变对象序列。</p>\n<p>和数组一样，List[String]包含的仅仅是String。<br>Scala的List不同于Java的java.util.List，总是不可变的（而Java的List可变）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个Scala的List很简单</span></span><br><span class=\"line\">val oneTwoThree = List(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>上述代码完成了一个新的叫做oneTwoThree的val，并已经用带有整数元素值1，2和3的新List[Int]初始化。</p>\n<h2 id=\"List-操作\"><a href=\"#List-操作\" class=\"headerlink\" title=\"List 操作\"></a>List 操作</h2><p>这个List可以这么用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val oneTwo = List(<span class=\"number\">1</span>, <span class=\"number\">2</span>)  </span><br><span class=\"line\">val threeFour = List(<span class=\"number\">3</span>, <span class=\"number\">4</span>) </span><br><span class=\"line\">val oneTwoThreeFour = oneTwo ::: threeFour  <span class=\"comment\">// ::: 拼接List</span></span><br><span class=\"line\"></span><br><span class=\"line\">println(oneTwo + <span class=\"string\">\" 和 \"</span> + threeFour + <span class=\"string\">\" 是不可变的\"</span>)  </span><br><span class=\"line\">println(oneTwoThreeFour + <span class=\"string\">\" 是个新列表了\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行结果:</span></span><br><span class=\"line\"><span class=\"comment\">// List(1, 2) 和 List(3, 4) 是不可变的</span></span><br><span class=\"line\"><span class=\"comment\">// List(1, 2, 3, 4) 是个新列表了</span></span><br></pre></td></tr></table></figure>\n<p>List最常用的操作符是发音为”cons”的” :: “. 例如，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val twoThree = List(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">val oneTwoThree = <span class=\"number\">1</span> :: twoThree  <span class=\"comment\">// 拼接元素 和 List</span></span><br><span class=\"line\">println(oneTwoThree) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果为：List(1, 2, 3)</span></span><br></pre></td></tr></table></figure>\n<p>类List没有提供append操作。<br>如果你想通过添加元素来构造列表： </p>\n<ul>\n<li>前缀进去，完成之后再调用reverse； </li>\n<li>使用ListBuffer，一种提供append操作的可变列表，完成之后调用toList。</li>\n</ul>\n<h1 id=\"使用元组【Tuple】\"><a href=\"#使用元组【Tuple】\" class=\"headerlink\" title=\"使用元组【Tuple】\"></a>使用元组【Tuple】</h1><p>另一种有用的容器对象是元组：tuple。与列表一样，元组也是不可变的，但与列表不同，元组可以包含不同类型的元素。</p>\n<p>列表应该是List[Int]或List[String]的样子，元组可以同时拥有Int和String。</p>\n<p>Scala里你可以简单地返回一个元组。<br>而且这么做的确简单：实例化一个装有一些对象的新元组，只要把这些对象放在括号里，并用逗号分隔即可。<br>一旦你已经实例化了一个元组，你可以用点号，下划线和一个基于1的元素索引访问它。</p>\n<p>一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val pair = (<span class=\"number\">99</span>, <span class=\"string\">\"Luftballons\"</span>)  <span class=\"comment\">//Scala推断元组类型为Tuple2[Int, String]，并把它赋给变量pair。</span></span><br><span class=\"line\">println(pair._1)                <span class=\"comment\">//访问_1字段，从而输出第一个元素，99。</span></span><br><span class=\"line\">println(pair._2)                </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行结果</span></span><br><span class=\"line\"><span class=\"comment\">// 99</span></span><br><span class=\"line\"><span class=\"comment\">// Luftballons</span></span><br></pre></td></tr></table></figure>\n<p>元组第一个元素是以99为值的Int，第二个是”luftballons”为值的String。</p>\n<p>元组的实际类型取决于它含有的元素数量和这些元素的类型。<br>因此，(99, “Luftballons”)的类型是Tuple2[Int, String]。</p>\n<p>类似地，(‘u’, ‘r’, ‘the’, 1, 4, “me”)是Tuple6[Char, Char, String, Int, Int, String]。</p>\n<h2 id=\"访问元组的元素\"><a href=\"#访问元组的元素\" class=\"headerlink\" title=\"访问元组的元素\"></a>访问元组的元素</h2><p>为什么你不能像访问List里的元素那样访问元组的，就像pair(0)？<br>因为List的apply方法始终返回同样的类型，但是元组里的或许类型不同。<br>_1可以有一个结果类型，_2是另外一个。 </p>\n<blockquote>\n<p>另：元组元素编号从1开始。</p>\n</blockquote>\n<h1 id=\"使用Set和Map\"><a href=\"#使用Set和Map\" class=\"headerlink\" title=\"使用Set和Map\"></a>使用Set和Map</h1><p>当问题讨论到集和映射，Scala同样提供了可变和不可变的替代品，不过用了不同的办法。</p>\n<p>对于集和映射，Scala把可变性建模在类继承中。</p>\n<p>例如，Scala的API包含了集的一个基本特质：trait，特质这个概念接近于Java的接口。</p>\n<p>Scala于是提供了两个子特质，一个是可变的集，另一个是不可变的集。这三个特质都共享同样的简化名，Set。</p>\n<p>如果你想要使用HashSet，你可以根据你的需要选择可变的或不可变的变体。</p>\n<p>创造集的缺省方法实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var jetSet = Set(<span class=\"string\">\"Boeing\"</span>, <span class=\"string\">\"Airbus\"</span>)  <span class=\"comment\">//定义了名为jetSet的新var，包含两个字串</span></span><br><span class=\"line\">jetSet += <span class=\"string\">\"Lear\"</span>                      <span class=\"comment\">// jetSet = jetSet + \"Lear\" </span></span><br><span class=\"line\">println(jetSet.contains(<span class=\"string\">\"Cessna\"</span>))    <span class=\"comment\">//打印输出集是否包含字串\"Cessna\"。</span></span><br><span class=\"line\">println(jetSet.contains(<span class=\"string\">\"Lear\"</span>))      <span class=\"comment\">//打印输出集是否包含字串\"Lear\"。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>需要不可变集，就需要使用一个引用：import，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scala.collection.mutable.Set  </span><br><span class=\"line\"></span><br><span class=\"line\">val movieSet = Set(<span class=\"string\">\"Hitch\"</span>, <span class=\"string\">\"Poltergeist\"</span>)  </span><br><span class=\"line\">movieSet += <span class=\"string\">\"Shrek\"</span> </span><br><span class=\"line\">println(movieSet)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// Set(Poltergeist, Shrek, Hitch)</span></span><br></pre></td></tr></table></figure>\n<p>需要一个不可变的HashSet，你可以这么做：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scala.collection.immutable.HashSet  </span><br><span class=\"line\">val hashSet = HashSet(<span class=\"string\">\"Tomatoes\"</span>, <span class=\"string\">\"Chilies\"</span>)  </span><br><span class=\"line\">println(hashSet + <span class=\"string\">\"Coriander\"</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行结果</span></span><br><span class=\"line\"><span class=\"comment\">// Set(Chilies, Tomatoes, Coriander)</span></span><br></pre></td></tr></table></figure>\n<p>Map是Scala里另一种有用的集合类。<br>和集一样，Scala采用了类继承机制提供了可变的和不可变的两种版本的Map。</p>\n<p><code>scala.collection</code> 包里面有一个基础Map特质和两个子特质Map：<br>可变的Map在scala.collection.mutable里，不可变的在scala.collection.immutable里。</p>\n<p>可变映射的创造过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scala.collection.mutable.Map  </span><br><span class=\"line\"></span><br><span class=\"line\">val treasureMap = Map[Int, String]()  </span><br><span class=\"line\">treasureMap += (<span class=\"number\">1</span> -&gt; <span class=\"string\">\"我在\"</span>)  </span><br><span class=\"line\">treasureMap += (<span class=\"number\">2</span> -&gt; <span class=\"string\">\"学习\"</span>)  </span><br><span class=\"line\">treasureMap += (<span class=\"number\">3</span> -&gt; <span class=\"string\">\"Scala\"</span>)  </span><br><span class=\"line\">println(treasureMap(<span class=\"number\">1</span>) + treasureMap(<span class=\"number\">2</span>) + treasureMap(<span class=\"number\">3</span>)) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// 我在学习Scala.</span></span><br></pre></td></tr></table></figure>\n<p>至于不可变映射，就不用引用任何类了，因为不可变映射是缺省的，代码例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val romanNumeral = Map(      </span><br><span class=\"line\">        <span class=\"number\">1</span> -&gt; <span class=\"string\">\"我\"</span>, <span class=\"number\">2</span> -&gt; <span class=\"string\">\"是\"</span>, <span class=\"number\">3</span> -&gt; <span class=\"string\">\"缺\"</span>, <span class=\"number\">4</span> -&gt; <span class=\"string\">\"省\"</span>, <span class=\"number\">5</span> -&gt; <span class=\"string\">\"的\"</span> )  </span><br><span class=\"line\">println(romanNumeral(<span class=\"number\">1</span>) + romanNumeral(<span class=\"number\">2</span>) + romanNumeral(<span class=\"number\">3</span>) + romanNumeral(<span class=\"number\">4</span>) + romanNumeral(<span class=\"number\">5</span>))  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// 我是缺省的</span></span><br></pre></td></tr></table></figure>"},{"title":"google-wide-and-deep-network","date":"2018-06-02T05:32:55.000Z","mathjax":true,"_content":"\n# 第0章\n\nwide是指高维特征+特征组合的LR。LR高效、容易规模化（scalable）、可解释性强。但是泛化性需要在特征工程上下功夫\ndeep就是deep learning了。特征工程省力，但是容易过度泛化over-generalize。\n\n## 参考阅读\n\n- 2016 《Wide & Deep Learning for Recommender Systems》 \b[blog]()\n- 2017 《Deep & Cross Network for Ad Click Predictions》 [blog]()\n- [google research blog](https://research.googleblog.com/2016/06/wide-deep-learning-better-together-with.html)\n- [wide & deep github code](https://github.com/tensorflow/models/tree/master/official/wide_deep)\n- 《2016-Deep Crossing: Web-Scale Modeling without Manually Crafted Combinatorial Features》 \n\n链接：本文参考：https://blog.csdn.net/yujianmin1990/article/details/78989099\n\n# paper\n\nWide & Deep前者是用来给用户推荐潜在喜欢的APP；Deep & Cross是用来预测用户可能点击的广告排序。\n\n## Memorization 和 Generalization\n\npaper 的两个重要概念：\n\nMemorization（对应wide）: 特征关系的 Memorization ，是 cross-product transformation 实现的一个wide set，它有效也便于理解。*Memorization* 可以宽泛地定义成学到items或features的共现率，并利用（exploiting）这种在历史数据中的相关关系（correlation）。\n\nGeneralization （对应deep)： 相关性的传递（transitivity），新特征组合,多样性（diversity）好一些。是基于相关关系的转移，并探索（explores）在过往很少或从不出现的新的特征组合。\n\n基于Memorization的推荐系统通常更局部化(topical)，将items与执行相应动作的users直接相关。而基于Generalization的推荐则更趋向于推荐多样化的items。\n\n## 本文的主要贡献\n\nWide & Deep 学习框架，可以用于联合训练带embeddings的feed-forward神经网络，以及对于稀疏输入的常用推荐系统所使用的带特征转换的线性模型。\nWide & Deep推荐系统的实现和评估在Google Play上已经产品化，这个app store具有数十亿的活跃用户、以及上百万的app。\n开源，在Tensorflow上提供了一个高级API。\n\n## 特征输入\n\nW&D的特征包括三方面： \n- User-Feature：contry, language, demographics. \n- Contextual-Feature：device, hour of the day, day of the week. 像余额宝、阿里音乐那个比赛都用了时间特征\n- Impression-Feature：app age, historical statistics of an app. \n\n1. Wide部分的输入特征\n\n    - raw input features and transformed features [手挑的交叉特征]. \n\nnotice: Wide_Deep 这里的 cross-product transformation：只在离散特征（稀疏）之间做组合，不管是文本策略型的，还是离散值的；没有连续值特征的啥事，至少在W&D的paper里面是这样使用的。 \n\n2. Deep部分的输入特征\n\n    - raw input + embeding处理 \n\n对非连续值之外的特征做 embedding 处理，这里都是策略特征，就是乘以个 embedding_matrix 。在TensorFlow里面的接口是：tf.feature_column.embedding_column，默认trainable=True. \n\n对连续值特征的处理是：将其按照累积分布函数P(X≤x)，压缩至[0,1]内。 \n\n### notice\n\nWide部分用FTRL+L1来训练；Deep部分用AdaGrad来训练。 \n\nWide&Deep在TensorFlow里面的API接口为：tf.estimator.DNNLinearCombinedClassifier \n\n![](http://p8vrqzrnj.bkt.clouddn.com/wide-and-deep-1.png)\n\n## 3. Wide & Deep Learning\n\n### 3.1 Wide组件\n\nwide组件是一个泛化的线性模型，形式为：$y=w^Tx+b$，如图1(左）所示。y是预测，$x = [x_1, x_2, …, x_d]$ 是d维的特征向量， $w = [w_1, w_2,…, w_d]$ 是模型参数，其中b为bias。特征集包括原始的输入特征和转换后的特征，一个最重要的转换是，cross-product transformation。它可以定义成：\n\n$\\phi_k(x)=\\prod_{i=1}^{d}x_{i}^{c_{ki}}, c_{ki} \\in \\{0, 1\\}$ (paper 公式1)\n\n其中 $c_{ki}$ 为一个boolean变量，如果第i个特征是第k个变换ϕk的一部分，那么为1; 否则为0.对于二值特征，一个cross-product transformation（比如：”AND(gender=female, language=en)”）只能当组成特征（“gender=female” 和 “language=en”）都为1时才会为1, 否则为0. 这会捕获二值特征间的交叉，为通用的线性模型添加非线性。\n\n### 3.2 Deep组件\n\nDeep组件是一个前馈神经网络(feed-forward NN)，如图1(右）所示。对于类别型特征，原始的输入是特征字符串（比如：”language=en”）。这些稀疏的，高维的类别型特征会首先被转换成一个低维的、dense的、real-valued的向量，通常叫做“embedding vector”。embedding的维度通常是O(10)到O(100)的阶。该 embedding vectors 被随机初始化，接着最小化最终的loss的方式训练得到该值。这些低维的dense embedding vectors接着通过前向传递被feed给神经网络的隐层。特别地，每个隐层都会执行以下的计算：\n\n$a^{l+1}=f(W^{(l)}a^{(l)}+b^{(l)})$ (公式2)\n\n其中，l是层数，f是激活函数（通常为ReLUs），$a^{(l)}$，$b^{(l)}$ 和$W^{(l)}$分别是第l层的activations, bias，以及weights。\n\n![](http://p8vrqzrnj.bkt.clouddn.com/DX-20180603@2x.png)\n\n### 3.3 Wide & Deep模型的联合训练\n\nWide组件和Deep组件组合在一起，对它们的输入日志进行一个加权求和来做为预测，它会被feed给一个常见的logistic loss function来进行联合训练。注意，联合训练（joint training）和集成训练（ensemble）有明显的区别。在ensemble中，每个独立的模型会单独训练，相互并不知道，只有在预测时会组合在一起。相反地，**联合训练（joint training）会同时优化所有参数，通过将wide组件和deep组件在训练时进行加权求和的方式进行。**这也暗示了模型的size：对于一个ensemble，由于训练是不联合的（disjoint），每个单独的模型size通常需要更大些（例如：更多的特征和转换）来达到合理的精度。相比之下，对于联合训练（joint training）来说，wide组件只需要补充deep组件的缺点，使用一小部分的cross-product特征转换即可，而非使用一个full-size的wide模型。\n\n一个Wide&Deep模型的联合训练，通过对梯度进行后向传播算法、SGD优化来完成。在试验中，我们使用FTRL算法，使用L1正则做为Wide组件的优化器，对Deep组件使用AdaGrad。\n\n组合模型如图一（中）所示。对于一个logistic regression问题，模型的预测为：\n\n$P(Y = 1 | x) = \\sigma(w_{wide}^{T} [x, \\phi(x)] + w_{deep}^{T} a^{(l_f)} + b)$  (paper \b公式3)\n\n其中Y是二分类的label，$\\sigma(·)$是sigmoid function， $\\phi(x)$ 是对原始特征x做cross product transformations，b是bias项。$w_{wide}$ 是所有wide模型权重向量，$w_{deep}$ 是应用在最终激活函数 $a^{(lf)}$ 上的权重。\n\n## 4 \b系统实践\n\n连续值先用累计分布函数CDF归一化到[0,1]，再划档离散化。\n\n# 论文翻译\n\n[基于Wide & Deep Learning的推荐系统](http://d0evi1.com/widedeep-recsys/)\n\n# 附\n\n## Tensorflow\n\n只需要3步，即可以使用tf.estimator API来配置一个wide，deep或者Wide&Deep：\n\n1. 选中wide组件的特征：选中你想用的稀疏的base特征列和交叉列特征列\n2. 选择deep组件的特征：选择连续型的列，对于每个类别型列的embedding维，以及隐层的size。\n\n将它们放置到一个Wide&Deep模型中（DNNLinearCombinedClassifier）\n\n关于更详细的操作，示例代码在：/tensorflow/tensorflow/examples/learn/wide_n_deep_tutorial.py，具体详见tensorflow tutorial。\n\n## tf.nn.embedding_lookup_sparse\n\n如何处理不定长的字符串的embedding问题\n\n``` python\nimport tensorflow as tf\n\n# 输入数据如下\ncsv = [\n    \"1,oscars|brad-pitt|awards\",\n    \"2,oscars|film|reviews\",\n    \"3,matt-damon|bourne\",\n]\n\n# 第二列是不定长的特征。处理如下\n# Purposefully omitting \"bourne\" to demonstrate OOV mappings.\nTAG_SET = [\"oscars\", \"brad-pitt\", \"awards\", \"film\", \"reviews\", \"matt-damon\"]\nNUM_OOV = 1\n\ndef sparse_from_csv(csv):\n    ids, post_tags_str = tf.decode_csv(csv, [[-1], [\"\"]])\n    table = tf.contrib.lookup.index_table_from_tensor(\n        mapping=TAG_SET, num_oov_buckets=NUM_OOV, default_value=-1)  # 构造查找表\n    split_tags = tf.string_split(post_tags_str, \"|\")\n    return ids, tf.SparseTensor(\n            indices=split_tags.indices,\n            values=table.lookup(split_tags.values),  # 不同值通过表查到的index\n            dense_shape=split_tags.dense_shape)\n\n# Optionally create an embedding for this.\nTAG_EMBEDDING_DIM = 3\n\nids, tags = sparse_from_csv(csv)\n\nembedding_params = tf.Variable(tf.truncated_normal([len(TAG_SET) + NUM_OOV, TAG_EMBEDDING_DIM]))\nembedded_tags = tf.nn.embedding_lookup_sparse(embedding_params, sp_ids=tags, sp_weights=None)\n\n# Test it out\nwith tf.Session() as sess:\n    sess.run([tf.global_variables_initializer(), tf.tables_initializer()])\n    print(s.run([ids, embedded_tags]))\n```\n\n## 继续学习\n\n[TensorFlow Wide And Deep 模型详解与应用](https://blog.csdn.net/kwame211/article/details/78015498)\n","source":"_posts/201806-google-wide-and-deep-network.md","raw":"---\ntitle: google-wide-and-deep-network\ndate: 2018-06-02 13:32:55\nmathjax: true\ntags:\n---\n\n# 第0章\n\nwide是指高维特征+特征组合的LR。LR高效、容易规模化（scalable）、可解释性强。但是泛化性需要在特征工程上下功夫\ndeep就是deep learning了。特征工程省力，但是容易过度泛化over-generalize。\n\n## 参考阅读\n\n- 2016 《Wide & Deep Learning for Recommender Systems》 \b[blog]()\n- 2017 《Deep & Cross Network for Ad Click Predictions》 [blog]()\n- [google research blog](https://research.googleblog.com/2016/06/wide-deep-learning-better-together-with.html)\n- [wide & deep github code](https://github.com/tensorflow/models/tree/master/official/wide_deep)\n- 《2016-Deep Crossing: Web-Scale Modeling without Manually Crafted Combinatorial Features》 \n\n链接：本文参考：https://blog.csdn.net/yujianmin1990/article/details/78989099\n\n# paper\n\nWide & Deep前者是用来给用户推荐潜在喜欢的APP；Deep & Cross是用来预测用户可能点击的广告排序。\n\n## Memorization 和 Generalization\n\npaper 的两个重要概念：\n\nMemorization（对应wide）: 特征关系的 Memorization ，是 cross-product transformation 实现的一个wide set，它有效也便于理解。*Memorization* 可以宽泛地定义成学到items或features的共现率，并利用（exploiting）这种在历史数据中的相关关系（correlation）。\n\nGeneralization （对应deep)： 相关性的传递（transitivity），新特征组合,多样性（diversity）好一些。是基于相关关系的转移，并探索（explores）在过往很少或从不出现的新的特征组合。\n\n基于Memorization的推荐系统通常更局部化(topical)，将items与执行相应动作的users直接相关。而基于Generalization的推荐则更趋向于推荐多样化的items。\n\n## 本文的主要贡献\n\nWide & Deep 学习框架，可以用于联合训练带embeddings的feed-forward神经网络，以及对于稀疏输入的常用推荐系统所使用的带特征转换的线性模型。\nWide & Deep推荐系统的实现和评估在Google Play上已经产品化，这个app store具有数十亿的活跃用户、以及上百万的app。\n开源，在Tensorflow上提供了一个高级API。\n\n## 特征输入\n\nW&D的特征包括三方面： \n- User-Feature：contry, language, demographics. \n- Contextual-Feature：device, hour of the day, day of the week. 像余额宝、阿里音乐那个比赛都用了时间特征\n- Impression-Feature：app age, historical statistics of an app. \n\n1. Wide部分的输入特征\n\n    - raw input features and transformed features [手挑的交叉特征]. \n\nnotice: Wide_Deep 这里的 cross-product transformation：只在离散特征（稀疏）之间做组合，不管是文本策略型的，还是离散值的；没有连续值特征的啥事，至少在W&D的paper里面是这样使用的。 \n\n2. Deep部分的输入特征\n\n    - raw input + embeding处理 \n\n对非连续值之外的特征做 embedding 处理，这里都是策略特征，就是乘以个 embedding_matrix 。在TensorFlow里面的接口是：tf.feature_column.embedding_column，默认trainable=True. \n\n对连续值特征的处理是：将其按照累积分布函数P(X≤x)，压缩至[0,1]内。 \n\n### notice\n\nWide部分用FTRL+L1来训练；Deep部分用AdaGrad来训练。 \n\nWide&Deep在TensorFlow里面的API接口为：tf.estimator.DNNLinearCombinedClassifier \n\n![](http://p8vrqzrnj.bkt.clouddn.com/wide-and-deep-1.png)\n\n## 3. Wide & Deep Learning\n\n### 3.1 Wide组件\n\nwide组件是一个泛化的线性模型，形式为：$y=w^Tx+b$，如图1(左）所示。y是预测，$x = [x_1, x_2, …, x_d]$ 是d维的特征向量， $w = [w_1, w_2,…, w_d]$ 是模型参数，其中b为bias。特征集包括原始的输入特征和转换后的特征，一个最重要的转换是，cross-product transformation。它可以定义成：\n\n$\\phi_k(x)=\\prod_{i=1}^{d}x_{i}^{c_{ki}}, c_{ki} \\in \\{0, 1\\}$ (paper 公式1)\n\n其中 $c_{ki}$ 为一个boolean变量，如果第i个特征是第k个变换ϕk的一部分，那么为1; 否则为0.对于二值特征，一个cross-product transformation（比如：”AND(gender=female, language=en)”）只能当组成特征（“gender=female” 和 “language=en”）都为1时才会为1, 否则为0. 这会捕获二值特征间的交叉，为通用的线性模型添加非线性。\n\n### 3.2 Deep组件\n\nDeep组件是一个前馈神经网络(feed-forward NN)，如图1(右）所示。对于类别型特征，原始的输入是特征字符串（比如：”language=en”）。这些稀疏的，高维的类别型特征会首先被转换成一个低维的、dense的、real-valued的向量，通常叫做“embedding vector”。embedding的维度通常是O(10)到O(100)的阶。该 embedding vectors 被随机初始化，接着最小化最终的loss的方式训练得到该值。这些低维的dense embedding vectors接着通过前向传递被feed给神经网络的隐层。特别地，每个隐层都会执行以下的计算：\n\n$a^{l+1}=f(W^{(l)}a^{(l)}+b^{(l)})$ (公式2)\n\n其中，l是层数，f是激活函数（通常为ReLUs），$a^{(l)}$，$b^{(l)}$ 和$W^{(l)}$分别是第l层的activations, bias，以及weights。\n\n![](http://p8vrqzrnj.bkt.clouddn.com/DX-20180603@2x.png)\n\n### 3.3 Wide & Deep模型的联合训练\n\nWide组件和Deep组件组合在一起，对它们的输入日志进行一个加权求和来做为预测，它会被feed给一个常见的logistic loss function来进行联合训练。注意，联合训练（joint training）和集成训练（ensemble）有明显的区别。在ensemble中，每个独立的模型会单独训练，相互并不知道，只有在预测时会组合在一起。相反地，**联合训练（joint training）会同时优化所有参数，通过将wide组件和deep组件在训练时进行加权求和的方式进行。**这也暗示了模型的size：对于一个ensemble，由于训练是不联合的（disjoint），每个单独的模型size通常需要更大些（例如：更多的特征和转换）来达到合理的精度。相比之下，对于联合训练（joint training）来说，wide组件只需要补充deep组件的缺点，使用一小部分的cross-product特征转换即可，而非使用一个full-size的wide模型。\n\n一个Wide&Deep模型的联合训练，通过对梯度进行后向传播算法、SGD优化来完成。在试验中，我们使用FTRL算法，使用L1正则做为Wide组件的优化器，对Deep组件使用AdaGrad。\n\n组合模型如图一（中）所示。对于一个logistic regression问题，模型的预测为：\n\n$P(Y = 1 | x) = \\sigma(w_{wide}^{T} [x, \\phi(x)] + w_{deep}^{T} a^{(l_f)} + b)$  (paper \b公式3)\n\n其中Y是二分类的label，$\\sigma(·)$是sigmoid function， $\\phi(x)$ 是对原始特征x做cross product transformations，b是bias项。$w_{wide}$ 是所有wide模型权重向量，$w_{deep}$ 是应用在最终激活函数 $a^{(lf)}$ 上的权重。\n\n## 4 \b系统实践\n\n连续值先用累计分布函数CDF归一化到[0,1]，再划档离散化。\n\n# 论文翻译\n\n[基于Wide & Deep Learning的推荐系统](http://d0evi1.com/widedeep-recsys/)\n\n# 附\n\n## Tensorflow\n\n只需要3步，即可以使用tf.estimator API来配置一个wide，deep或者Wide&Deep：\n\n1. 选中wide组件的特征：选中你想用的稀疏的base特征列和交叉列特征列\n2. 选择deep组件的特征：选择连续型的列，对于每个类别型列的embedding维，以及隐层的size。\n\n将它们放置到一个Wide&Deep模型中（DNNLinearCombinedClassifier）\n\n关于更详细的操作，示例代码在：/tensorflow/tensorflow/examples/learn/wide_n_deep_tutorial.py，具体详见tensorflow tutorial。\n\n## tf.nn.embedding_lookup_sparse\n\n如何处理不定长的字符串的embedding问题\n\n``` python\nimport tensorflow as tf\n\n# 输入数据如下\ncsv = [\n    \"1,oscars|brad-pitt|awards\",\n    \"2,oscars|film|reviews\",\n    \"3,matt-damon|bourne\",\n]\n\n# 第二列是不定长的特征。处理如下\n# Purposefully omitting \"bourne\" to demonstrate OOV mappings.\nTAG_SET = [\"oscars\", \"brad-pitt\", \"awards\", \"film\", \"reviews\", \"matt-damon\"]\nNUM_OOV = 1\n\ndef sparse_from_csv(csv):\n    ids, post_tags_str = tf.decode_csv(csv, [[-1], [\"\"]])\n    table = tf.contrib.lookup.index_table_from_tensor(\n        mapping=TAG_SET, num_oov_buckets=NUM_OOV, default_value=-1)  # 构造查找表\n    split_tags = tf.string_split(post_tags_str, \"|\")\n    return ids, tf.SparseTensor(\n            indices=split_tags.indices,\n            values=table.lookup(split_tags.values),  # 不同值通过表查到的index\n            dense_shape=split_tags.dense_shape)\n\n# Optionally create an embedding for this.\nTAG_EMBEDDING_DIM = 3\n\nids, tags = sparse_from_csv(csv)\n\nembedding_params = tf.Variable(tf.truncated_normal([len(TAG_SET) + NUM_OOV, TAG_EMBEDDING_DIM]))\nembedded_tags = tf.nn.embedding_lookup_sparse(embedding_params, sp_ids=tags, sp_weights=None)\n\n# Test it out\nwith tf.Session() as sess:\n    sess.run([tf.global_variables_initializer(), tf.tables_initializer()])\n    print(s.run([ids, embedded_tags]))\n```\n\n## 继续学习\n\n[TensorFlow Wide And Deep 模型详解与应用](https://blog.csdn.net/kwame211/article/details/78015498)\n","slug":"google-wide-and-deep-network","published":1,"updated":"2018-06-04T06:53:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjidbf1qf000ery1dji4m1s7g","content":"<h1 id=\"第0章\"><a href=\"#第0章\" class=\"headerlink\" title=\"第0章\"></a>第0章</h1><p>wide是指高维特征+特征组合的LR。LR高效、容易规模化（scalable）、可解释性强。但是泛化性需要在特征工程上下功夫<br>deep就是deep learning了。特征工程省力，但是容易过度泛化over-generalize。</p>\n<h2 id=\"参考阅读\"><a href=\"#参考阅读\" class=\"headerlink\" title=\"参考阅读\"></a>参考阅读</h2><ul>\n<li>2016 《Wide &amp; Deep Learning for Recommender Systems》 \b<a href=\"\">blog</a></li>\n<li>2017 《Deep &amp; Cross Network for Ad Click Predictions》 <a href=\"\">blog</a></li>\n<li><a href=\"https://research.googleblog.com/2016/06/wide-deep-learning-better-together-with.html\" target=\"_blank\" rel=\"noopener\">google research blog</a></li>\n<li><a href=\"https://github.com/tensorflow/models/tree/master/official/wide_deep\" target=\"_blank\" rel=\"noopener\">wide &amp; deep github code</a></li>\n<li>《2016-Deep Crossing: Web-Scale Modeling without Manually Crafted Combinatorial Features》 </li>\n</ul>\n<p>链接：本文参考：<a href=\"https://blog.csdn.net/yujianmin1990/article/details/78989099\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/yujianmin1990/article/details/78989099</a></p>\n<h1 id=\"paper\"><a href=\"#paper\" class=\"headerlink\" title=\"paper\"></a>paper</h1><p>Wide &amp; Deep前者是用来给用户推荐潜在喜欢的APP；Deep &amp; Cross是用来预测用户可能点击的广告排序。</p>\n<h2 id=\"Memorization-和-Generalization\"><a href=\"#Memorization-和-Generalization\" class=\"headerlink\" title=\"Memorization 和 Generalization\"></a>Memorization 和 Generalization</h2><p>paper 的两个重要概念：</p>\n<p>Memorization（对应wide）: 特征关系的 Memorization ，是 cross-product transformation 实现的一个wide set，它有效也便于理解。<em>Memorization</em> 可以宽泛地定义成学到items或features的共现率，并利用（exploiting）这种在历史数据中的相关关系（correlation）。</p>\n<p>Generalization （对应deep)： 相关性的传递（transitivity），新特征组合,多样性（diversity）好一些。是基于相关关系的转移，并探索（explores）在过往很少或从不出现的新的特征组合。</p>\n<p>基于Memorization的推荐系统通常更局部化(topical)，将items与执行相应动作的users直接相关。而基于Generalization的推荐则更趋向于推荐多样化的items。</p>\n<h2 id=\"本文的主要贡献\"><a href=\"#本文的主要贡献\" class=\"headerlink\" title=\"本文的主要贡献\"></a>本文的主要贡献</h2><p>Wide &amp; Deep 学习框架，可以用于联合训练带embeddings的feed-forward神经网络，以及对于稀疏输入的常用推荐系统所使用的带特征转换的线性模型。<br>Wide &amp; Deep推荐系统的实现和评估在Google Play上已经产品化，这个app store具有数十亿的活跃用户、以及上百万的app。<br>开源，在Tensorflow上提供了一个高级API。</p>\n<h2 id=\"特征输入\"><a href=\"#特征输入\" class=\"headerlink\" title=\"特征输入\"></a>特征输入</h2><p>W&amp;D的特征包括三方面： </p>\n<ul>\n<li>User-Feature：contry, language, demographics. </li>\n<li>Contextual-Feature：device, hour of the day, day of the week. 像余额宝、阿里音乐那个比赛都用了时间特征</li>\n<li>Impression-Feature：app age, historical statistics of an app. </li>\n</ul>\n<ol>\n<li><p>Wide部分的输入特征</p>\n<ul>\n<li>raw input features and transformed features [手挑的交叉特征]. </li>\n</ul>\n</li>\n</ol>\n<p>notice: Wide_Deep 这里的 cross-product transformation：只在离散特征（稀疏）之间做组合，不管是文本策略型的，还是离散值的；没有连续值特征的啥事，至少在W&amp;D的paper里面是这样使用的。 </p>\n<ol>\n<li><p>Deep部分的输入特征</p>\n<ul>\n<li>raw input + embeding处理 </li>\n</ul>\n</li>\n</ol>\n<p>对非连续值之外的特征做 embedding 处理，这里都是策略特征，就是乘以个 embedding_matrix 。在TensorFlow里面的接口是：tf.feature_column.embedding_column，默认trainable=True. </p>\n<p>对连续值特征的处理是：将其按照累积分布函数P(X≤x)，压缩至[0,1]内。 </p>\n<h3 id=\"notice\"><a href=\"#notice\" class=\"headerlink\" title=\"notice\"></a>notice</h3><p>Wide部分用FTRL+L1来训练；Deep部分用AdaGrad来训练。 </p>\n<p>Wide&amp;Deep在TensorFlow里面的API接口为：tf.estimator.DNNLinearCombinedClassifier </p>\n<p><img src=\"http://p8vrqzrnj.bkt.clouddn.com/wide-and-deep-1.png\" alt=\"\"></p>\n<h2 id=\"3-Wide-amp-Deep-Learning\"><a href=\"#3-Wide-amp-Deep-Learning\" class=\"headerlink\" title=\"3. Wide &amp; Deep Learning\"></a>3. Wide &amp; Deep Learning</h2><h3 id=\"3-1-Wide组件\"><a href=\"#3-1-Wide组件\" class=\"headerlink\" title=\"3.1 Wide组件\"></a>3.1 Wide组件</h3><p>wide组件是一个泛化的线性模型，形式为：$y=w^Tx+b$，如图1(左）所示。y是预测，$x = [x_1, x_2, …, x_d]$ 是d维的特征向量， $w = [w_1, w_2,…, w_d]$ 是模型参数，其中b为bias。特征集包括原始的输入特征和转换后的特征，一个最重要的转换是，cross-product transformation。它可以定义成：</p>\n<p>$\\phi_k(x)=\\prod_{i=1}^{d}x_{i}^{c_{ki}}, c_{ki} \\in \\{0, 1\\}$ (paper 公式1)</p>\n<p>其中 $c_{ki}$ 为一个boolean变量，如果第i个特征是第k个变换ϕk的一部分，那么为1; 否则为0.对于二值特征，一个cross-product transformation（比如：”AND(gender=female, language=en)”）只能当组成特征（“gender=female” 和 “language=en”）都为1时才会为1, 否则为0. 这会捕获二值特征间的交叉，为通用的线性模型添加非线性。</p>\n<h3 id=\"3-2-Deep组件\"><a href=\"#3-2-Deep组件\" class=\"headerlink\" title=\"3.2 Deep组件\"></a>3.2 Deep组件</h3><p>Deep组件是一个前馈神经网络(feed-forward NN)，如图1(右）所示。对于类别型特征，原始的输入是特征字符串（比如：”language=en”）。这些稀疏的，高维的类别型特征会首先被转换成一个低维的、dense的、real-valued的向量，通常叫做“embedding vector”。embedding的维度通常是O(10)到O(100)的阶。该 embedding vectors 被随机初始化，接着最小化最终的loss的方式训练得到该值。这些低维的dense embedding vectors接着通过前向传递被feed给神经网络的隐层。特别地，每个隐层都会执行以下的计算：</p>\n<p>$a^{l+1}=f(W^{(l)}a^{(l)}+b^{(l)})$ (公式2)</p>\n<p>其中，l是层数，f是激活函数（通常为ReLUs），$a^{(l)}$，$b^{(l)}$ 和$W^{(l)}$分别是第l层的activations, bias，以及weights。</p>\n<p><img src=\"http://p8vrqzrnj.bkt.clouddn.com/DX-20180603@2x.png\" alt=\"\"></p>\n<h3 id=\"3-3-Wide-amp-Deep模型的联合训练\"><a href=\"#3-3-Wide-amp-Deep模型的联合训练\" class=\"headerlink\" title=\"3.3 Wide &amp; Deep模型的联合训练\"></a>3.3 Wide &amp; Deep模型的联合训练</h3><p>Wide组件和Deep组件组合在一起，对它们的输入日志进行一个加权求和来做为预测，它会被feed给一个常见的logistic loss function来进行联合训练。注意，联合训练（joint training）和集成训练（ensemble）有明显的区别。在ensemble中，每个独立的模型会单独训练，相互并不知道，只有在预测时会组合在一起。相反地，<strong>联合训练（joint training）会同时优化所有参数，通过将wide组件和deep组件在训练时进行加权求和的方式进行。</strong>这也暗示了模型的size：对于一个ensemble，由于训练是不联合的（disjoint），每个单独的模型size通常需要更大些（例如：更多的特征和转换）来达到合理的精度。相比之下，对于联合训练（joint training）来说，wide组件只需要补充deep组件的缺点，使用一小部分的cross-product特征转换即可，而非使用一个full-size的wide模型。</p>\n<p>一个Wide&amp;Deep模型的联合训练，通过对梯度进行后向传播算法、SGD优化来完成。在试验中，我们使用FTRL算法，使用L1正则做为Wide组件的优化器，对Deep组件使用AdaGrad。</p>\n<p>组合模型如图一（中）所示。对于一个logistic regression问题，模型的预测为：</p>\n<p>$P(Y = 1 | x) = \\sigma(w_{wide}^{T} [x, \\phi(x)] + w_{deep}^{T} a^{(l_f)} + b)$  (paper \b公式3)</p>\n<p>其中Y是二分类的label，$\\sigma(·)$是sigmoid function， $\\phi(x)$ 是对原始特征x做cross product transformations，b是bias项。$w_{wide}$ 是所有wide模型权重向量，$w_{deep}$ 是应用在最终激活函数 $a^{(lf)}$ 上的权重。</p>\n<h2 id=\"4-系统实践\"><a href=\"#4-系统实践\" class=\"headerlink\" title=\"4 \b系统实践\"></a>4 \b系统实践</h2><p>连续值先用累计分布函数CDF归一化到[0,1]，再划档离散化。</p>\n<h1 id=\"论文翻译\"><a href=\"#论文翻译\" class=\"headerlink\" title=\"论文翻译\"></a>论文翻译</h1><p><a href=\"http://d0evi1.com/widedeep-recsys/\" target=\"_blank\" rel=\"noopener\">基于Wide &amp; Deep Learning的推荐系统</a></p>\n<h1 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h1><h2 id=\"Tensorflow\"><a href=\"#Tensorflow\" class=\"headerlink\" title=\"Tensorflow\"></a>Tensorflow</h2><p>只需要3步，即可以使用tf.estimator API来配置一个wide，deep或者Wide&amp;Deep：</p>\n<ol>\n<li>选中wide组件的特征：选中你想用的稀疏的base特征列和交叉列特征列</li>\n<li>选择deep组件的特征：选择连续型的列，对于每个类别型列的embedding维，以及隐层的size。</li>\n</ol>\n<p>将它们放置到一个Wide&amp;Deep模型中（DNNLinearCombinedClassifier）</p>\n<p>关于更详细的操作，示例代码在：/tensorflow/tensorflow/examples/learn/wide_n_deep_tutorial.py，具体详见tensorflow tutorial。</p>\n<h2 id=\"tf-nn-embedding-lookup-sparse\"><a href=\"#tf-nn-embedding-lookup-sparse\" class=\"headerlink\" title=\"tf.nn.embedding_lookup_sparse\"></a>tf.nn.embedding_lookup_sparse</h2><p>如何处理不定长的字符串的embedding问题</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入数据如下</span></span><br><span class=\"line\">csv = [</span><br><span class=\"line\">    <span class=\"string\">\"1,oscars|brad-pitt|awards\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"2,oscars|film|reviews\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"3,matt-damon|bourne\"</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第二列是不定长的特征。处理如下</span></span><br><span class=\"line\"><span class=\"comment\"># Purposefully omitting \"bourne\" to demonstrate OOV mappings.</span></span><br><span class=\"line\">TAG_SET = [<span class=\"string\">\"oscars\"</span>, <span class=\"string\">\"brad-pitt\"</span>, <span class=\"string\">\"awards\"</span>, <span class=\"string\">\"film\"</span>, <span class=\"string\">\"reviews\"</span>, <span class=\"string\">\"matt-damon\"</span>]</span><br><span class=\"line\">NUM_OOV = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sparse_from_csv</span><span class=\"params\">(csv)</span>:</span></span><br><span class=\"line\">    ids, post_tags_str = tf.decode_csv(csv, [[<span class=\"number\">-1</span>], [<span class=\"string\">\"\"</span>]])</span><br><span class=\"line\">    table = tf.contrib.lookup.index_table_from_tensor(</span><br><span class=\"line\">        mapping=TAG_SET, num_oov_buckets=NUM_OOV, default_value=<span class=\"number\">-1</span>)  <span class=\"comment\"># 构造查找表</span></span><br><span class=\"line\">    split_tags = tf.string_split(post_tags_str, <span class=\"string\">\"|\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ids, tf.SparseTensor(</span><br><span class=\"line\">            indices=split_tags.indices,</span><br><span class=\"line\">            values=table.lookup(split_tags.values),  <span class=\"comment\"># 不同值通过表查到的index</span></span><br><span class=\"line\">            dense_shape=split_tags.dense_shape)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Optionally create an embedding for this.</span></span><br><span class=\"line\">TAG_EMBEDDING_DIM = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">ids, tags = sparse_from_csv(csv)</span><br><span class=\"line\"></span><br><span class=\"line\">embedding_params = tf.Variable(tf.truncated_normal([len(TAG_SET) + NUM_OOV, TAG_EMBEDDING_DIM]))</span><br><span class=\"line\">embedded_tags = tf.nn.embedding_lookup_sparse(embedding_params, sp_ids=tags, sp_weights=<span class=\"keyword\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Test it out</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    sess.run([tf.global_variables_initializer(), tf.tables_initializer()])</span><br><span class=\"line\">    print(s.run([ids, embedded_tags]))</span><br></pre></td></tr></table></figure>\n<h2 id=\"继续学习\"><a href=\"#继续学习\" class=\"headerlink\" title=\"继续学习\"></a>继续学习</h2><p><a href=\"https://blog.csdn.net/kwame211/article/details/78015498\" target=\"_blank\" rel=\"noopener\">TensorFlow Wide And Deep 模型详解与应用</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第0章\"><a href=\"#第0章\" class=\"headerlink\" title=\"第0章\"></a>第0章</h1><p>wide是指高维特征+特征组合的LR。LR高效、容易规模化（scalable）、可解释性强。但是泛化性需要在特征工程上下功夫<br>deep就是deep learning了。特征工程省力，但是容易过度泛化over-generalize。</p>\n<h2 id=\"参考阅读\"><a href=\"#参考阅读\" class=\"headerlink\" title=\"参考阅读\"></a>参考阅读</h2><ul>\n<li>2016 《Wide &amp; Deep Learning for Recommender Systems》 \b<a href=\"\">blog</a></li>\n<li>2017 《Deep &amp; Cross Network for Ad Click Predictions》 <a href=\"\">blog</a></li>\n<li><a href=\"https://research.googleblog.com/2016/06/wide-deep-learning-better-together-with.html\" target=\"_blank\" rel=\"noopener\">google research blog</a></li>\n<li><a href=\"https://github.com/tensorflow/models/tree/master/official/wide_deep\" target=\"_blank\" rel=\"noopener\">wide &amp; deep github code</a></li>\n<li>《2016-Deep Crossing: Web-Scale Modeling without Manually Crafted Combinatorial Features》 </li>\n</ul>\n<p>链接：本文参考：<a href=\"https://blog.csdn.net/yujianmin1990/article/details/78989099\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/yujianmin1990/article/details/78989099</a></p>\n<h1 id=\"paper\"><a href=\"#paper\" class=\"headerlink\" title=\"paper\"></a>paper</h1><p>Wide &amp; Deep前者是用来给用户推荐潜在喜欢的APP；Deep &amp; Cross是用来预测用户可能点击的广告排序。</p>\n<h2 id=\"Memorization-和-Generalization\"><a href=\"#Memorization-和-Generalization\" class=\"headerlink\" title=\"Memorization 和 Generalization\"></a>Memorization 和 Generalization</h2><p>paper 的两个重要概念：</p>\n<p>Memorization（对应wide）: 特征关系的 Memorization ，是 cross-product transformation 实现的一个wide set，它有效也便于理解。<em>Memorization</em> 可以宽泛地定义成学到items或features的共现率，并利用（exploiting）这种在历史数据中的相关关系（correlation）。</p>\n<p>Generalization （对应deep)： 相关性的传递（transitivity），新特征组合,多样性（diversity）好一些。是基于相关关系的转移，并探索（explores）在过往很少或从不出现的新的特征组合。</p>\n<p>基于Memorization的推荐系统通常更局部化(topical)，将items与执行相应动作的users直接相关。而基于Generalization的推荐则更趋向于推荐多样化的items。</p>\n<h2 id=\"本文的主要贡献\"><a href=\"#本文的主要贡献\" class=\"headerlink\" title=\"本文的主要贡献\"></a>本文的主要贡献</h2><p>Wide &amp; Deep 学习框架，可以用于联合训练带embeddings的feed-forward神经网络，以及对于稀疏输入的常用推荐系统所使用的带特征转换的线性模型。<br>Wide &amp; Deep推荐系统的实现和评估在Google Play上已经产品化，这个app store具有数十亿的活跃用户、以及上百万的app。<br>开源，在Tensorflow上提供了一个高级API。</p>\n<h2 id=\"特征输入\"><a href=\"#特征输入\" class=\"headerlink\" title=\"特征输入\"></a>特征输入</h2><p>W&amp;D的特征包括三方面： </p>\n<ul>\n<li>User-Feature：contry, language, demographics. </li>\n<li>Contextual-Feature：device, hour of the day, day of the week. 像余额宝、阿里音乐那个比赛都用了时间特征</li>\n<li>Impression-Feature：app age, historical statistics of an app. </li>\n</ul>\n<ol>\n<li><p>Wide部分的输入特征</p>\n<ul>\n<li>raw input features and transformed features [手挑的交叉特征]. </li>\n</ul>\n</li>\n</ol>\n<p>notice: Wide_Deep 这里的 cross-product transformation：只在离散特征（稀疏）之间做组合，不管是文本策略型的，还是离散值的；没有连续值特征的啥事，至少在W&amp;D的paper里面是这样使用的。 </p>\n<ol>\n<li><p>Deep部分的输入特征</p>\n<ul>\n<li>raw input + embeding处理 </li>\n</ul>\n</li>\n</ol>\n<p>对非连续值之外的特征做 embedding 处理，这里都是策略特征，就是乘以个 embedding_matrix 。在TensorFlow里面的接口是：tf.feature_column.embedding_column，默认trainable=True. </p>\n<p>对连续值特征的处理是：将其按照累积分布函数P(X≤x)，压缩至[0,1]内。 </p>\n<h3 id=\"notice\"><a href=\"#notice\" class=\"headerlink\" title=\"notice\"></a>notice</h3><p>Wide部分用FTRL+L1来训练；Deep部分用AdaGrad来训练。 </p>\n<p>Wide&amp;Deep在TensorFlow里面的API接口为：tf.estimator.DNNLinearCombinedClassifier </p>\n<p><img src=\"http://p8vrqzrnj.bkt.clouddn.com/wide-and-deep-1.png\" alt=\"\"></p>\n<h2 id=\"3-Wide-amp-Deep-Learning\"><a href=\"#3-Wide-amp-Deep-Learning\" class=\"headerlink\" title=\"3. Wide &amp; Deep Learning\"></a>3. Wide &amp; Deep Learning</h2><h3 id=\"3-1-Wide组件\"><a href=\"#3-1-Wide组件\" class=\"headerlink\" title=\"3.1 Wide组件\"></a>3.1 Wide组件</h3><p>wide组件是一个泛化的线性模型，形式为：$y=w^Tx+b$，如图1(左）所示。y是预测，$x = [x_1, x_2, …, x_d]$ 是d维的特征向量， $w = [w_1, w_2,…, w_d]$ 是模型参数，其中b为bias。特征集包括原始的输入特征和转换后的特征，一个最重要的转换是，cross-product transformation。它可以定义成：</p>\n<p>$\\phi_k(x)=\\prod_{i=1}^{d}x_{i}^{c_{ki}}, c_{ki} \\in \\{0, 1\\}$ (paper 公式1)</p>\n<p>其中 $c_{ki}$ 为一个boolean变量，如果第i个特征是第k个变换ϕk的一部分，那么为1; 否则为0.对于二值特征，一个cross-product transformation（比如：”AND(gender=female, language=en)”）只能当组成特征（“gender=female” 和 “language=en”）都为1时才会为1, 否则为0. 这会捕获二值特征间的交叉，为通用的线性模型添加非线性。</p>\n<h3 id=\"3-2-Deep组件\"><a href=\"#3-2-Deep组件\" class=\"headerlink\" title=\"3.2 Deep组件\"></a>3.2 Deep组件</h3><p>Deep组件是一个前馈神经网络(feed-forward NN)，如图1(右）所示。对于类别型特征，原始的输入是特征字符串（比如：”language=en”）。这些稀疏的，高维的类别型特征会首先被转换成一个低维的、dense的、real-valued的向量，通常叫做“embedding vector”。embedding的维度通常是O(10)到O(100)的阶。该 embedding vectors 被随机初始化，接着最小化最终的loss的方式训练得到该值。这些低维的dense embedding vectors接着通过前向传递被feed给神经网络的隐层。特别地，每个隐层都会执行以下的计算：</p>\n<p>$a^{l+1}=f(W^{(l)}a^{(l)}+b^{(l)})$ (公式2)</p>\n<p>其中，l是层数，f是激活函数（通常为ReLUs），$a^{(l)}$，$b^{(l)}$ 和$W^{(l)}$分别是第l层的activations, bias，以及weights。</p>\n<p><img src=\"http://p8vrqzrnj.bkt.clouddn.com/DX-20180603@2x.png\" alt=\"\"></p>\n<h3 id=\"3-3-Wide-amp-Deep模型的联合训练\"><a href=\"#3-3-Wide-amp-Deep模型的联合训练\" class=\"headerlink\" title=\"3.3 Wide &amp; Deep模型的联合训练\"></a>3.3 Wide &amp; Deep模型的联合训练</h3><p>Wide组件和Deep组件组合在一起，对它们的输入日志进行一个加权求和来做为预测，它会被feed给一个常见的logistic loss function来进行联合训练。注意，联合训练（joint training）和集成训练（ensemble）有明显的区别。在ensemble中，每个独立的模型会单独训练，相互并不知道，只有在预测时会组合在一起。相反地，<strong>联合训练（joint training）会同时优化所有参数，通过将wide组件和deep组件在训练时进行加权求和的方式进行。</strong>这也暗示了模型的size：对于一个ensemble，由于训练是不联合的（disjoint），每个单独的模型size通常需要更大些（例如：更多的特征和转换）来达到合理的精度。相比之下，对于联合训练（joint training）来说，wide组件只需要补充deep组件的缺点，使用一小部分的cross-product特征转换即可，而非使用一个full-size的wide模型。</p>\n<p>一个Wide&amp;Deep模型的联合训练，通过对梯度进行后向传播算法、SGD优化来完成。在试验中，我们使用FTRL算法，使用L1正则做为Wide组件的优化器，对Deep组件使用AdaGrad。</p>\n<p>组合模型如图一（中）所示。对于一个logistic regression问题，模型的预测为：</p>\n<p>$P(Y = 1 | x) = \\sigma(w_{wide}^{T} [x, \\phi(x)] + w_{deep}^{T} a^{(l_f)} + b)$  (paper \b公式3)</p>\n<p>其中Y是二分类的label，$\\sigma(·)$是sigmoid function， $\\phi(x)$ 是对原始特征x做cross product transformations，b是bias项。$w_{wide}$ 是所有wide模型权重向量，$w_{deep}$ 是应用在最终激活函数 $a^{(lf)}$ 上的权重。</p>\n<h2 id=\"4-系统实践\"><a href=\"#4-系统实践\" class=\"headerlink\" title=\"4 \b系统实践\"></a>4 \b系统实践</h2><p>连续值先用累计分布函数CDF归一化到[0,1]，再划档离散化。</p>\n<h1 id=\"论文翻译\"><a href=\"#论文翻译\" class=\"headerlink\" title=\"论文翻译\"></a>论文翻译</h1><p><a href=\"http://d0evi1.com/widedeep-recsys/\" target=\"_blank\" rel=\"noopener\">基于Wide &amp; Deep Learning的推荐系统</a></p>\n<h1 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h1><h2 id=\"Tensorflow\"><a href=\"#Tensorflow\" class=\"headerlink\" title=\"Tensorflow\"></a>Tensorflow</h2><p>只需要3步，即可以使用tf.estimator API来配置一个wide，deep或者Wide&amp;Deep：</p>\n<ol>\n<li>选中wide组件的特征：选中你想用的稀疏的base特征列和交叉列特征列</li>\n<li>选择deep组件的特征：选择连续型的列，对于每个类别型列的embedding维，以及隐层的size。</li>\n</ol>\n<p>将它们放置到一个Wide&amp;Deep模型中（DNNLinearCombinedClassifier）</p>\n<p>关于更详细的操作，示例代码在：/tensorflow/tensorflow/examples/learn/wide_n_deep_tutorial.py，具体详见tensorflow tutorial。</p>\n<h2 id=\"tf-nn-embedding-lookup-sparse\"><a href=\"#tf-nn-embedding-lookup-sparse\" class=\"headerlink\" title=\"tf.nn.embedding_lookup_sparse\"></a>tf.nn.embedding_lookup_sparse</h2><p>如何处理不定长的字符串的embedding问题</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入数据如下</span></span><br><span class=\"line\">csv = [</span><br><span class=\"line\">    <span class=\"string\">\"1,oscars|brad-pitt|awards\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"2,oscars|film|reviews\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"3,matt-damon|bourne\"</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第二列是不定长的特征。处理如下</span></span><br><span class=\"line\"><span class=\"comment\"># Purposefully omitting \"bourne\" to demonstrate OOV mappings.</span></span><br><span class=\"line\">TAG_SET = [<span class=\"string\">\"oscars\"</span>, <span class=\"string\">\"brad-pitt\"</span>, <span class=\"string\">\"awards\"</span>, <span class=\"string\">\"film\"</span>, <span class=\"string\">\"reviews\"</span>, <span class=\"string\">\"matt-damon\"</span>]</span><br><span class=\"line\">NUM_OOV = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sparse_from_csv</span><span class=\"params\">(csv)</span>:</span></span><br><span class=\"line\">    ids, post_tags_str = tf.decode_csv(csv, [[<span class=\"number\">-1</span>], [<span class=\"string\">\"\"</span>]])</span><br><span class=\"line\">    table = tf.contrib.lookup.index_table_from_tensor(</span><br><span class=\"line\">        mapping=TAG_SET, num_oov_buckets=NUM_OOV, default_value=<span class=\"number\">-1</span>)  <span class=\"comment\"># 构造查找表</span></span><br><span class=\"line\">    split_tags = tf.string_split(post_tags_str, <span class=\"string\">\"|\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ids, tf.SparseTensor(</span><br><span class=\"line\">            indices=split_tags.indices,</span><br><span class=\"line\">            values=table.lookup(split_tags.values),  <span class=\"comment\"># 不同值通过表查到的index</span></span><br><span class=\"line\">            dense_shape=split_tags.dense_shape)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Optionally create an embedding for this.</span></span><br><span class=\"line\">TAG_EMBEDDING_DIM = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">ids, tags = sparse_from_csv(csv)</span><br><span class=\"line\"></span><br><span class=\"line\">embedding_params = tf.Variable(tf.truncated_normal([len(TAG_SET) + NUM_OOV, TAG_EMBEDDING_DIM]))</span><br><span class=\"line\">embedded_tags = tf.nn.embedding_lookup_sparse(embedding_params, sp_ids=tags, sp_weights=<span class=\"keyword\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Test it out</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    sess.run([tf.global_variables_initializer(), tf.tables_initializer()])</span><br><span class=\"line\">    print(s.run([ids, embedded_tags]))</span><br></pre></td></tr></table></figure>\n<h2 id=\"继续学习\"><a href=\"#继续学习\" class=\"headerlink\" title=\"继续学习\"></a>继续学习</h2><p><a href=\"https://blog.csdn.net/kwame211/article/details/78015498\" target=\"_blank\" rel=\"noopener\">TensorFlow Wide And Deep 模型详解与应用</a></p>\n"},{"title":"tensorflow data generation","date":"2018-06-03T08:18:12.000Z","_content":"\n[tensorflow 数据读取 office guide](http://wiki.jikexueyuan.com/project/tensorflow-zh/how_tos/reading_data.html#AUTOGENERATED-preloaded-data)\n\n[十图详解tensorflow数据读取机制（附代码）](https://zhuanlan.zhihu.com/p/27238630)\n\n[tf.train.batch和tf.train.shuffle_batch的理解](https://blog.csdn.net/ying86615791/article/details/73864381)\n\n\n\n[如何使用TensorFlow中的高级API：Estimator、Experiment和Dataset](https://zhuanlan.zhihu.com/p/29210791)\n\n\n\ntensorflow架构\n\n[tensorflow架构](https://blog.csdn.net/stdcoutzyx/article/details/51645396)\n\n[Tensoflow 分布式部署简介](https://blog.csdn.net/sydpz1987/article/details/51340277)\n\n[TensorFlow分布式全套（原理，部署，实例）](https://blog.csdn.net/CodeMaster_/article/details/76223835)\n","source":"_posts/201806-tensorflow-data-generation.md","raw":"---\ntitle: tensorflow data generation\ndate: 2018-06-03 16:18:12\ntags:\n---\n\n[tensorflow 数据读取 office guide](http://wiki.jikexueyuan.com/project/tensorflow-zh/how_tos/reading_data.html#AUTOGENERATED-preloaded-data)\n\n[十图详解tensorflow数据读取机制（附代码）](https://zhuanlan.zhihu.com/p/27238630)\n\n[tf.train.batch和tf.train.shuffle_batch的理解](https://blog.csdn.net/ying86615791/article/details/73864381)\n\n\n\n[如何使用TensorFlow中的高级API：Estimator、Experiment和Dataset](https://zhuanlan.zhihu.com/p/29210791)\n\n\n\ntensorflow架构\n\n[tensorflow架构](https://blog.csdn.net/stdcoutzyx/article/details/51645396)\n\n[Tensoflow 分布式部署简介](https://blog.csdn.net/sydpz1987/article/details/51340277)\n\n[TensorFlow分布式全套（原理，部署，实例）](https://blog.csdn.net/CodeMaster_/article/details/76223835)\n","slug":"tensorflow-data-generation","published":1,"updated":"2018-06-03T08:34:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjidbf1qh000fry1dgea5xaeg","content":"<p><a href=\"http://wiki.jikexueyuan.com/project/tensorflow-zh/how_tos/reading_data.html#AUTOGENERATED-preloaded-data\" target=\"_blank\" rel=\"noopener\">tensorflow 数据读取 office guide</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/27238630\" target=\"_blank\" rel=\"noopener\">十图详解tensorflow数据读取机制（附代码）</a></p>\n<p><a href=\"https://blog.csdn.net/ying86615791/article/details/73864381\" target=\"_blank\" rel=\"noopener\">tf.train.batch和tf.train.shuffle_batch的理解</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/29210791\" target=\"_blank\" rel=\"noopener\">如何使用TensorFlow中的高级API：Estimator、Experiment和Dataset</a></p>\n<p>tensorflow架构</p>\n<p><a href=\"https://blog.csdn.net/stdcoutzyx/article/details/51645396\" target=\"_blank\" rel=\"noopener\">tensorflow架构</a></p>\n<p><a href=\"https://blog.csdn.net/sydpz1987/article/details/51340277\" target=\"_blank\" rel=\"noopener\">Tensoflow 分布式部署简介</a></p>\n<p><a href=\"https://blog.csdn.net/CodeMaster_/article/details/76223835\" target=\"_blank\" rel=\"noopener\">TensorFlow分布式全套（原理，部署，实例）</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://wiki.jikexueyuan.com/project/tensorflow-zh/how_tos/reading_data.html#AUTOGENERATED-preloaded-data\" target=\"_blank\" rel=\"noopener\">tensorflow 数据读取 office guide</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/27238630\" target=\"_blank\" rel=\"noopener\">十图详解tensorflow数据读取机制（附代码）</a></p>\n<p><a href=\"https://blog.csdn.net/ying86615791/article/details/73864381\" target=\"_blank\" rel=\"noopener\">tf.train.batch和tf.train.shuffle_batch的理解</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/29210791\" target=\"_blank\" rel=\"noopener\">如何使用TensorFlow中的高级API：Estimator、Experiment和Dataset</a></p>\n<p>tensorflow架构</p>\n<p><a href=\"https://blog.csdn.net/stdcoutzyx/article/details/51645396\" target=\"_blank\" rel=\"noopener\">tensorflow架构</a></p>\n<p><a href=\"https://blog.csdn.net/sydpz1987/article/details/51340277\" target=\"_blank\" rel=\"noopener\">Tensoflow 分布式部署简介</a></p>\n<p><a href=\"https://blog.csdn.net/CodeMaster_/article/details/76223835\" target=\"_blank\" rel=\"noopener\">TensorFlow分布式全套（原理，部署，实例）</a></p>\n"},{"title":"推荐算法方面的优秀文章","date":"2018-06-03T07:18:15.000Z","_content":"\n# 一些概念\n\n推荐广告怎么做？\n\n系统架构是什么样？ \n系统架构： bizer(特征抽取) → QR(用户理解 利用user id或上下文、位置等 → 相关的tag list) → Searcher(广告倒排 tag → ad list(后续ctr排序预选的ad)) → Ranker(根据cpm = ctr*bid，以及相关性等精排), 然后依次返回到用户做个性化推荐。\n\n广告从投放到计费经过哪些主要流程？\n投放到计费流程：点击付费(CPC), 展示付费(CPM), 按销售收入付费(CPS)等。\n\n这个流程中算法策略关注什么？\n算法策略关注：架构流程中每个步骤的数据的准确性，完整性对整个系统的准确度有重要影响。\n\n# 综述 \n\n[CTR预估算法之FM, FFM, DeepFM及实践](https://blog.csdn.net/John_xyz/article/details/78933253)\n\n阿里巴巴\n\n- [常用推荐算法（50页干货）](https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&mid=2247483811&idx=1&sn=fc3ee4ddfc4a8d6014a4cd90cdb5983c&scene=4#wechat_redirect)\n\n腾讯\n\n- [常见计算广告点击率预估算法总结](https://cloud.tencent.com/developer/article/1005915)\n- 高航，[深度学习在 CTR 中应用](https://cloud.tencent.com/developer/article/1006667)\n\n美团\n\n- [第09章：深入浅出ML之Factorization家族](http://www.52caml.com/head_first_ml/ml-chapter9-factorization-family/)\n# 时间线\n\n\n[FM算法(一)：算法理论](https://www.cnblogs.com/AndyJee/p/7879765.html)\n[FM算法(二)：工程实现](https://www.cnblogs.com/AndyJee/p/8032553.html)\n[FM算法详解](https://blog.csdn.net/bitcarmanlee/article/details/52143909)\n\n[深入FFM原理与实践](https://tech.meituan.com/deep-understanding-of-ffm-principles-and-practices.html)\n\n# 2013 \n\n[各大公司广泛使用的在线学习算法FTRL详解](http://www.cnblogs.com/EE-NovRain/p/3810737.html )\n\n\n# code + action\n\n[TensorFlow Estimator of Deep CTR --DeepFM/NFM/AFM/FNN/PNN](https://zhuanlan.zhihu.com/p/33699909)\n","source":"_posts/201806-recommemder-alg-introduction.md","raw":"---\ntitle: 推荐算法方面的优秀文章\ndate: 2018-06-03 15:18:15\ntags:\n---\n\n# 一些概念\n\n推荐广告怎么做？\n\n系统架构是什么样？ \n系统架构： bizer(特征抽取) → QR(用户理解 利用user id或上下文、位置等 → 相关的tag list) → Searcher(广告倒排 tag → ad list(后续ctr排序预选的ad)) → Ranker(根据cpm = ctr*bid，以及相关性等精排), 然后依次返回到用户做个性化推荐。\n\n广告从投放到计费经过哪些主要流程？\n投放到计费流程：点击付费(CPC), 展示付费(CPM), 按销售收入付费(CPS)等。\n\n这个流程中算法策略关注什么？\n算法策略关注：架构流程中每个步骤的数据的准确性，完整性对整个系统的准确度有重要影响。\n\n# 综述 \n\n[CTR预估算法之FM, FFM, DeepFM及实践](https://blog.csdn.net/John_xyz/article/details/78933253)\n\n阿里巴巴\n\n- [常用推荐算法（50页干货）](https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&mid=2247483811&idx=1&sn=fc3ee4ddfc4a8d6014a4cd90cdb5983c&scene=4#wechat_redirect)\n\n腾讯\n\n- [常见计算广告点击率预估算法总结](https://cloud.tencent.com/developer/article/1005915)\n- 高航，[深度学习在 CTR 中应用](https://cloud.tencent.com/developer/article/1006667)\n\n美团\n\n- [第09章：深入浅出ML之Factorization家族](http://www.52caml.com/head_first_ml/ml-chapter9-factorization-family/)\n# 时间线\n\n\n[FM算法(一)：算法理论](https://www.cnblogs.com/AndyJee/p/7879765.html)\n[FM算法(二)：工程实现](https://www.cnblogs.com/AndyJee/p/8032553.html)\n[FM算法详解](https://blog.csdn.net/bitcarmanlee/article/details/52143909)\n\n[深入FFM原理与实践](https://tech.meituan.com/deep-understanding-of-ffm-principles-and-practices.html)\n\n# 2013 \n\n[各大公司广泛使用的在线学习算法FTRL详解](http://www.cnblogs.com/EE-NovRain/p/3810737.html )\n\n\n# code + action\n\n[TensorFlow Estimator of Deep CTR --DeepFM/NFM/AFM/FNN/PNN](https://zhuanlan.zhihu.com/p/33699909)\n","slug":"recommemder-alg-introduction","published":1,"updated":"2018-06-03T08:34:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjidbf1qi000hry1dlei9v55x","content":"<h1 id=\"一些概念\"><a href=\"#一些概念\" class=\"headerlink\" title=\"一些概念\"></a>一些概念</h1><p>推荐广告怎么做？</p>\n<p>系统架构是什么样？<br>系统架构： bizer(特征抽取) → QR(用户理解 利用user id或上下文、位置等 → 相关的tag list) → Searcher(广告倒排 tag → ad list(后续ctr排序预选的ad)) → Ranker(根据cpm = ctr*bid，以及相关性等精排), 然后依次返回到用户做个性化推荐。</p>\n<p>广告从投放到计费经过哪些主要流程？<br>投放到计费流程：点击付费(CPC), 展示付费(CPM), 按销售收入付费(CPS)等。</p>\n<p>这个流程中算法策略关注什么？<br>算法策略关注：架构流程中每个步骤的数据的准确性，完整性对整个系统的准确度有重要影响。</p>\n<h1 id=\"综述\"><a href=\"#综述\" class=\"headerlink\" title=\"综述\"></a>综述</h1><p><a href=\"https://blog.csdn.net/John_xyz/article/details/78933253\" target=\"_blank\" rel=\"noopener\">CTR预估算法之FM, FFM, DeepFM及实践</a></p>\n<p>阿里巴巴</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;mid=2247483811&amp;idx=1&amp;sn=fc3ee4ddfc4a8d6014a4cd90cdb5983c&amp;scene=4#wechat_redirect\" target=\"_blank\" rel=\"noopener\">常用推荐算法（50页干货）</a></li>\n</ul>\n<p>腾讯</p>\n<ul>\n<li><a href=\"https://cloud.tencent.com/developer/article/1005915\" target=\"_blank\" rel=\"noopener\">常见计算广告点击率预估算法总结</a></li>\n<li>高航，<a href=\"https://cloud.tencent.com/developer/article/1006667\" target=\"_blank\" rel=\"noopener\">深度学习在 CTR 中应用</a></li>\n</ul>\n<p>美团</p>\n<ul>\n<li><a href=\"http://www.52caml.com/head_first_ml/ml-chapter9-factorization-family/\" target=\"_blank\" rel=\"noopener\">第09章：深入浅出ML之Factorization家族</a><h1 id=\"时间线\"><a href=\"#时间线\" class=\"headerlink\" title=\"时间线\"></a>时间线</h1></li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/AndyJee/p/7879765.html\" target=\"_blank\" rel=\"noopener\">FM算法(一)：算法理论</a><br><a href=\"https://www.cnblogs.com/AndyJee/p/8032553.html\" target=\"_blank\" rel=\"noopener\">FM算法(二)：工程实现</a><br><a href=\"https://blog.csdn.net/bitcarmanlee/article/details/52143909\" target=\"_blank\" rel=\"noopener\">FM算法详解</a></p>\n<p><a href=\"https://tech.meituan.com/deep-understanding-of-ffm-principles-and-practices.html\" target=\"_blank\" rel=\"noopener\">深入FFM原理与实践</a></p>\n<h1 id=\"2013\"><a href=\"#2013\" class=\"headerlink\" title=\"2013\"></a>2013</h1><p><a href=\"http://www.cnblogs.com/EE-NovRain/p/3810737.html\" target=\"_blank\" rel=\"noopener\">各大公司广泛使用的在线学习算法FTRL详解</a></p>\n<h1 id=\"code-action\"><a href=\"#code-action\" class=\"headerlink\" title=\"code + action\"></a>code + action</h1><p><a href=\"https://zhuanlan.zhihu.com/p/33699909\" target=\"_blank\" rel=\"noopener\">TensorFlow Estimator of Deep CTR —DeepFM/NFM/AFM/FNN/PNN</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一些概念\"><a href=\"#一些概念\" class=\"headerlink\" title=\"一些概念\"></a>一些概念</h1><p>推荐广告怎么做？</p>\n<p>系统架构是什么样？<br>系统架构： bizer(特征抽取) → QR(用户理解 利用user id或上下文、位置等 → 相关的tag list) → Searcher(广告倒排 tag → ad list(后续ctr排序预选的ad)) → Ranker(根据cpm = ctr*bid，以及相关性等精排), 然后依次返回到用户做个性化推荐。</p>\n<p>广告从投放到计费经过哪些主要流程？<br>投放到计费流程：点击付费(CPC), 展示付费(CPM), 按销售收入付费(CPS)等。</p>\n<p>这个流程中算法策略关注什么？<br>算法策略关注：架构流程中每个步骤的数据的准确性，完整性对整个系统的准确度有重要影响。</p>\n<h1 id=\"综述\"><a href=\"#综述\" class=\"headerlink\" title=\"综述\"></a>综述</h1><p><a href=\"https://blog.csdn.net/John_xyz/article/details/78933253\" target=\"_blank\" rel=\"noopener\">CTR预估算法之FM, FFM, DeepFM及实践</a></p>\n<p>阿里巴巴</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;mid=2247483811&amp;idx=1&amp;sn=fc3ee4ddfc4a8d6014a4cd90cdb5983c&amp;scene=4#wechat_redirect\" target=\"_blank\" rel=\"noopener\">常用推荐算法（50页干货）</a></li>\n</ul>\n<p>腾讯</p>\n<ul>\n<li><a href=\"https://cloud.tencent.com/developer/article/1005915\" target=\"_blank\" rel=\"noopener\">常见计算广告点击率预估算法总结</a></li>\n<li>高航，<a href=\"https://cloud.tencent.com/developer/article/1006667\" target=\"_blank\" rel=\"noopener\">深度学习在 CTR 中应用</a></li>\n</ul>\n<p>美团</p>\n<ul>\n<li><a href=\"http://www.52caml.com/head_first_ml/ml-chapter9-factorization-family/\" target=\"_blank\" rel=\"noopener\">第09章：深入浅出ML之Factorization家族</a><h1 id=\"时间线\"><a href=\"#时间线\" class=\"headerlink\" title=\"时间线\"></a>时间线</h1></li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/AndyJee/p/7879765.html\" target=\"_blank\" rel=\"noopener\">FM算法(一)：算法理论</a><br><a href=\"https://www.cnblogs.com/AndyJee/p/8032553.html\" target=\"_blank\" rel=\"noopener\">FM算法(二)：工程实现</a><br><a href=\"https://blog.csdn.net/bitcarmanlee/article/details/52143909\" target=\"_blank\" rel=\"noopener\">FM算法详解</a></p>\n<p><a href=\"https://tech.meituan.com/deep-understanding-of-ffm-principles-and-practices.html\" target=\"_blank\" rel=\"noopener\">深入FFM原理与实践</a></p>\n<h1 id=\"2013\"><a href=\"#2013\" class=\"headerlink\" title=\"2013\"></a>2013</h1><p><a href=\"http://www.cnblogs.com/EE-NovRain/p/3810737.html\" target=\"_blank\" rel=\"noopener\">各大公司广泛使用的在线学习算法FTRL详解</a></p>\n<h1 id=\"code-action\"><a href=\"#code-action\" class=\"headerlink\" title=\"code + action\"></a>code + action</h1><p><a href=\"https://zhuanlan.zhihu.com/p/33699909\" target=\"_blank\" rel=\"noopener\">TensorFlow Estimator of Deep CTR —DeepFM/NFM/AFM/FNN/PNN</a></p>\n"},{"title":"机器学习中的embedding原理及tf.nn.embedding_lookup_sparse等API的理解","date":"2018-06-01T06:57:00.000Z","mathjax":true,"_content":"\n# \b\b概述\n\n本文主要讲解tensorflow中涉及embedding的API。之前看了一些文章，写的云山雾绕，花了好长时间才搞懂，太笨了。\n\b\nembedding 算法主要用于处理稀疏\b特征，应用于\b\bNLP、推荐、广告等领域。所以word2vec 只是embbeding 思想的一个应用，而不是全部。\n\n代码地址：git@github.com:gshtime/tensorflow-api.git\n\n# embedding原理\n\n常见的特征降维方法主要有PCA、SVD等。\n\n而embedding的主要目的也是对（稀疏）特征进行降维，\b它降维的方式可以类比为一个全连接层（没有激活函数），通过\b embedding 层的权重矩阵计算来降低维度。\n\n假设：\n- feature_num : 原始特征数\n- embedding_size: embedding之后的特征数\n- [feature_num, embedding_size]  权重矩阵shape\n- [m, feature_num]  输入矩阵shape，m为样本数\n- [m, embedding_size]  \b输出矩阵shape，m为样本数\n\n![稀疏向量的选择](http://p8vrqzrnj.bkt.clouddn.com/WX20180601-155344.png)\n\n应用中一般将物体嵌入到一个低维空间 $R^{embedding-size} (embedding-size << feature_num)$ ，只需要再compose 上一个从 $R^{feature-num}$ 到 $R^{embedding-size}$ 的线性映射就好了。每一个shape为 $feature-num \\times embedding-size$ 的矩阵M(embedding矩阵) 都定义了 $R^{feature-num}$ 到 $R^{embedding-size}$ 的一个线性映射: $x \\mapsto Mx$ 。当 $x$ 是一个标准基向量的时候，$Mx$对应矩阵 $M$ 中的一列，这就是对应 $id$ 的向量表示。\n\n![连接层](http://p8vrqzrnj.bkt.clouddn.com/20170814220528829.jpg)\n\n从id(索引)找到对应的 One-hot encoding ，然后红色的weight就直接对应了输出节点的值(注意这里没有 activation function)，也就是对应的embedding向量。\n\n# tensorflow API\n\n## 基础： tf.SparseTensor\n\n构造稀疏向量矩阵，\b\b【未求证】\b使用上每一行为一个样本\n\nSparseTensor(indices, values, dense_shape)\n\nparams:\n\n- indices: A 2-D int64 tensor of dense_shape [N, ndims], which specifies the indices of the elements in the sparse tensor that contain nonzero values (elements are zero-indexed). For example, indices=[[1,3], [2,4]] specifies that the elements with indexes of [1,3] and [2,4] have nonzero values. 是dense_shape这个矩阵中所有values值的位置，与values一一对应。\n- values: A 1-D tensor of any type and dense_shape [N], which supplies the values for each element in indices. For example, given indices=[[1,3], [2,4]], the parameter values=[18, 3.6] specifies that element [1,3] of the sparse tensor has a value of 18, and element [2,4] of the tensor has a value of 3.6. \b每一个稀疏值，与其位置indices\b一一对应。\n- dense_shape: A 1-D int64 tensor of dense_shape [ndims], which specifies the dense_shape of the sparse tensor. Takes a list indicating the number of elements in each dimension. For example, dense_shape=[3,6] specifies a two-dimensional 3x6 tensor, dense_shape=[2,3,4] specifies a three-dimensional 2x3x4 tensor, and dense_shape=[9] specifies a one-dimensional tensor with 9 elements. 稀疏向量矩阵的shape\n\nExample: The sparse tensor\n\n``` python\nSparseTensor(indices=[[0, 0], [1, 2]], values=[1, 2], dense_shape=[3, 4])\n\n# represents the dense tensor\n\n# [[1, 0, 0, 0]\n#  [0, 0, 2, 0]\n#  [0, 0, 0, 0]]\n```\n## tf.nn.embedding_lookup 和 partition_strategy 参数\n\n``` python\n# Signature:\ntf.nn.embedding_lookup(params, ids, partition_strategy='mod', name=None, validate_indices=True, max_norm=None)\n# Docstring:\n# Looks up `ids` in a list of embedding tensors.\n```\n\n是根据 `ids` 中的id，寻找 `params` 中的第id行。比如 `ids=[1,3,5]`，则找出`params`中第1，3，5行，组成一个tensor返回。\n\nembedding_lookup不是简单的查表，`params` 对应的向量是可以训练的，训练参数个数应该是 feature_num * embedding_size，即前文表述的embedding层权重矩阵，就是说 lookup 的是一种全连接层。\n\n此外，以下要\b记录的几个API里，都有参数 partition_strategy （切分方式）, 这个参数是当len(params) > 1 时，才生效\b，即当params 以list [a, b, c] (a,b,c都是tensor) 输入多个tensor时，对\bparams的选择顺序进行切分，（而不是对ids进行切分，ids只有选择的作用，当然也决定了在return中次序）。\n\n### 输入为单个tensor时\n\n``` python \n# 当\b输入单个tensor时，partition_strategy不起作用，不做\b id（编号） 的切分\na = np.arange(20).reshape(5,4)\nprint (a)\n\n# 前面的编号是我手动加的，意思是不做切分的时候就顺序编号就行\n# 0#[[ 0  1  2  3]\n# 1# [ 4  5  6  7]\n# 2# [ 8  9 10 11]\n# 3# [12 13 14 15]\n# 4# [16 17 18 19]]\n\ntensor_a = tf.Variable(a)\nembedded_tensor = tf.nn.embedding_lookup(params=tensor_a, ids=[0,3,2,1])\ninit = tf.global_variables_initializer()\nwith tf.Session() as sess:\n    sess.run(init)\n    embedded_tensor = sess.run(embedded_tensor)\n    print(embedded_tensor)\n# 根据 ids 参数做选择\n#[[ 0  1  2  3]  选择了 id 0\n# [12 13 14 15]  选择了 id 3\n# [ 8  9 10 11]  选择了 id 2\n# [ 4  5  6  7]] 选择了 id 1\n\n```\n### 输入为多个tensor时\n\npartition_strategy 开始起作用，开始对多个tensor 的第 0 维上的项进行编号，编号的方式有两种，\"mod\"（默认） 和 \"div\"。\n\n假设：一共有三个tensor [a,b,c] 作为params 参数，所有`tensor`的第 0 维上一共有 10 个项目（id 0 ~ 9）。\n\n- \"mod\" : (id) mod len(params) 得到\b多少就把 id 分到第几个tensor里面\n    - a 依次分到id： 0 3 6 9\n    - b 依次分到id： 1 4 7\n    - c 依次分到id： 2 5 8\n\n- \"div\" : (id) div len(params) 可以理解为依次排序，但是这两种切分方式在无法均匀切分的情况下都是将前(max_id+1)%len(params)个 partition 多分配一个元素.\n    - a 依次分到id： 0 1 2 3 \n    - b 依次分到id： 4 5 6\n    - c 依次分到id： 7 8 9\n\n\n``` python\n# partition_strategy='div' 的情况\na = tf.Variable(np.arange(8).reshape(2,4))\nb = tf.Variable(np.arange(8,12).reshape(1,4))\nc = tf.Variable(np.arange(12, 20).reshape(2,4))\n\nembedded_tensor = tf.nn.embedding_lookup(params=[a,b,c], ids=[1,2,4], partition_strategy='div', name=\"embedding\")\n\ninit = tf.global_variables_initializer()\nwith tf.Session() as sess:\n    sess.run(init)\n    print (sess.run(a))\n    print (sess.run(b))\n    print (sess.run(c))\n    \n    print (\"########## embedded_tensor #########\")\n    print(sess.run(embedded_tensor))\n# [[0 1 2 3]    a\b分到 id 0\n#  [4 5 6 7]]   a分到 id 1\n\n# [[ 8  9 10 11]] b分到 id 2\n#                 b分到 id 3\n\n# [[12 13 14 15]  c分到 id 4\n#  [16 17 18 19]] (c 没分到id)\n# ########## embedded_tensor ######### 注：ids=[1,2,4]\n#[[ 4  5  6  7]   \b按 ids 选的 1\n# [ 8  9 10 11]   按 ids 选的 2\n# [12 13 14 15]]  按 ids 选的 4\n```\n注：如果ids 中 有 3，\b这个id 虽然被分给 b 这个tensor了，但是b没有，会报一个错误\n``` python\nInvalidArgumentError: indices[0] = 1 is not in [0, 1)\n\t [[Node: embedding_5/GatherV2_1 = GatherV2[Taxis=DT_INT32, Tindices=DT_INT32, Tparams=DT_INT64, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](Variable_154/read, ConstantFolding/embedding_5/DynamicPartition-folded-1, embedding_5/GatherV2_1/axis)]]\n```\n\n## tf.gather()\n函数签名如下：\n``` python \ntf.gather(\n    params,\n    indices,\n    validate_indices=None,\n    name=None\n```\n参数说明：\n- params是一个tensor，\n- indices是个值为int的tensor用来指定要从params取得元素的第0维的index。\n\n该函数可看成是tf.nn.embedding_lookup()的特殊形式，所以功能与其类似，即将其看成是embedding_lookup函数的params参数内只有一个tensor时的情形。\n\n## tf.nn.embedding_lookup_sparse\n\n``` python\ntf.nn.embedding_lookup_sparse(\n    params,\n    sp_ids,\n    sp_weights,\n    partition_strategy='mod',\n    name=None,\n    combiner=None,\n    max_norm=None\n)\n```\n### 参数\n\n见官网\bAPI，不贴了：[python API](https://www.tensorflow.org/api_docs/python/tf/nn/embedding_lookup_sparse)\n\n- params: A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors. Alternatively, a PartitionedVariable, created by partitioning along dimension 0. Each element must be appropriately sized for the given partition_strategy.\n\nReturns:\nA dense tensor representing the combined embeddings for the sparse ids. For each row in the dense tensor represented by sp_ids, the op looks up the embeddings for all ids in that row, multiplies them by the corresponding weight, and combines these embeddings as specified.\n\nIn other words, if\n\n- shape(combined params) = [p0, p1, ..., pm]\n\nand\n\n- shape(sp_ids) = shape(sp_weights) = [d0, d1, ..., dn]\n\nthen\n\n- shape(output) = [d0, d1, ..., dn-1, p1, ..., pm].\n\nFor instance, if params is a 10x20 matrix, and sp_ids / sp_weights are\n\n[0, 0]: id 1, weight 2.0 [0, 1]: id 3, weight 0.5 [1, 0]: id 0, weight 1.0 [2, 3]: id 1, weight 3.0\n\nwith combiner=\"mean\", then the output will be a 3x20 matrix where\n\noutput[0, :] = (params[1, :] * 2.0 + params[3, :] * 0.5) / (2.0 + 0.5) output[1, :] = (params[0, :] * 1.0) / 1.0 output[2, :] = (params[1, :] * 3.0) / 3.0\n\n### 示例：\n\n``` python\na = np.arange(8).reshape(2, 4)\nb = np.arange(8, 16).reshape(2, 4)\nc = np.arange(12, 20).reshape(2, 4)\nprint (\"a :\")\nprint (a)\nprint (\"b :\")\nprint (b)\nprint (\"c :\")\nprint (c)\na = tf.Variable(a, dtype=tf.float32)\nb = tf.Variable(b, dtype=tf.float32)\nc = tf.Variable(c, dtype=tf.float32)\nidx = tf.SparseTensor(indices=[[0,0], [0,2], [1,0], [1, 1]], values=[1,2,2,0], dense_shape=(2,3))\nresult = tf.nn.embedding_lookup_sparse([a,c,b], idx, None, partition_strategy='mod', combiner=\"sum\")\n\ninit = tf.global_variables_initializer()\nwith tf.Session() as sess:\n    sess.run(init)\n    res = sess.run(result)\n    print (\"\\n# result here\")\n    print(res)\n\n# a :\n# [[0 1 2 3]    id 0\n#  [4 5 6 7]]   id 3\n# b :\n# [[ 8  9 10 11]  id 1\n#  [12 13 14 15]] id 4\n# c :\n# [[16 17 18 19] id 2\n#  [20 21 22 23]] id 5\n\n# result here\n# [[24. 26. 28. 30.]  \n#  [16. 18. 20. 22.]]\n```\n解释：\n``` python\n#idx = tf.SparseTensor(indices=[[0,0], [0,2], [1,0], [1, 1]], values=[1,2,2,0], dense_shape=(2,3))\n构造如下稀疏向量矩阵，每一行视为一个样本的特征向量\n[\n    [[1], [], [2]],\n    [[2], [0], []]\n]\n以第一个样本 [[1], [], [2]] 为例：选择id 1 和id 2：\n# [[ 8  9 10 11]  id 1\n# [[16 17 18 19] id 2\n根据 combiner=\"sum\" ，把上面两个向量 按 axis=0 加到一起，得到：\n# [24. 26. 28. 30.]\n即 为第一个样本的 dense 向量\n```\n\n如果len(params) == 1, 就是不存在 partition 了，比较好理解，不再赘述。\n\n喝最烈的果粒橙，钻最深的牛角尖。\nend.","source":"_posts/201806-tensorflow-embedding-lookup-sparse.md","raw":"---\ntitle: 机器学习中的embedding原理及tf.nn.embedding_lookup_sparse等API的理解\ndate: 2018-06-01 14:57:00\nmathjax: true\ntags: embedding_lookup, tf.gather, embedding_lookup_sparse\n---\n\n# \b\b概述\n\n本文主要讲解tensorflow中涉及embedding的API。之前看了一些文章，写的云山雾绕，花了好长时间才搞懂，太笨了。\n\b\nembedding 算法主要用于处理稀疏\b特征，应用于\b\bNLP、推荐、广告等领域。所以word2vec 只是embbeding 思想的一个应用，而不是全部。\n\n代码地址：git@github.com:gshtime/tensorflow-api.git\n\n# embedding原理\n\n常见的特征降维方法主要有PCA、SVD等。\n\n而embedding的主要目的也是对（稀疏）特征进行降维，\b它降维的方式可以类比为一个全连接层（没有激活函数），通过\b embedding 层的权重矩阵计算来降低维度。\n\n假设：\n- feature_num : 原始特征数\n- embedding_size: embedding之后的特征数\n- [feature_num, embedding_size]  权重矩阵shape\n- [m, feature_num]  输入矩阵shape，m为样本数\n- [m, embedding_size]  \b输出矩阵shape，m为样本数\n\n![稀疏向量的选择](http://p8vrqzrnj.bkt.clouddn.com/WX20180601-155344.png)\n\n应用中一般将物体嵌入到一个低维空间 $R^{embedding-size} (embedding-size << feature_num)$ ，只需要再compose 上一个从 $R^{feature-num}$ 到 $R^{embedding-size}$ 的线性映射就好了。每一个shape为 $feature-num \\times embedding-size$ 的矩阵M(embedding矩阵) 都定义了 $R^{feature-num}$ 到 $R^{embedding-size}$ 的一个线性映射: $x \\mapsto Mx$ 。当 $x$ 是一个标准基向量的时候，$Mx$对应矩阵 $M$ 中的一列，这就是对应 $id$ 的向量表示。\n\n![连接层](http://p8vrqzrnj.bkt.clouddn.com/20170814220528829.jpg)\n\n从id(索引)找到对应的 One-hot encoding ，然后红色的weight就直接对应了输出节点的值(注意这里没有 activation function)，也就是对应的embedding向量。\n\n# tensorflow API\n\n## 基础： tf.SparseTensor\n\n构造稀疏向量矩阵，\b\b【未求证】\b使用上每一行为一个样本\n\nSparseTensor(indices, values, dense_shape)\n\nparams:\n\n- indices: A 2-D int64 tensor of dense_shape [N, ndims], which specifies the indices of the elements in the sparse tensor that contain nonzero values (elements are zero-indexed). For example, indices=[[1,3], [2,4]] specifies that the elements with indexes of [1,3] and [2,4] have nonzero values. 是dense_shape这个矩阵中所有values值的位置，与values一一对应。\n- values: A 1-D tensor of any type and dense_shape [N], which supplies the values for each element in indices. For example, given indices=[[1,3], [2,4]], the parameter values=[18, 3.6] specifies that element [1,3] of the sparse tensor has a value of 18, and element [2,4] of the tensor has a value of 3.6. \b每一个稀疏值，与其位置indices\b一一对应。\n- dense_shape: A 1-D int64 tensor of dense_shape [ndims], which specifies the dense_shape of the sparse tensor. Takes a list indicating the number of elements in each dimension. For example, dense_shape=[3,6] specifies a two-dimensional 3x6 tensor, dense_shape=[2,3,4] specifies a three-dimensional 2x3x4 tensor, and dense_shape=[9] specifies a one-dimensional tensor with 9 elements. 稀疏向量矩阵的shape\n\nExample: The sparse tensor\n\n``` python\nSparseTensor(indices=[[0, 0], [1, 2]], values=[1, 2], dense_shape=[3, 4])\n\n# represents the dense tensor\n\n# [[1, 0, 0, 0]\n#  [0, 0, 2, 0]\n#  [0, 0, 0, 0]]\n```\n## tf.nn.embedding_lookup 和 partition_strategy 参数\n\n``` python\n# Signature:\ntf.nn.embedding_lookup(params, ids, partition_strategy='mod', name=None, validate_indices=True, max_norm=None)\n# Docstring:\n# Looks up `ids` in a list of embedding tensors.\n```\n\n是根据 `ids` 中的id，寻找 `params` 中的第id行。比如 `ids=[1,3,5]`，则找出`params`中第1，3，5行，组成一个tensor返回。\n\nembedding_lookup不是简单的查表，`params` 对应的向量是可以训练的，训练参数个数应该是 feature_num * embedding_size，即前文表述的embedding层权重矩阵，就是说 lookup 的是一种全连接层。\n\n此外，以下要\b记录的几个API里，都有参数 partition_strategy （切分方式）, 这个参数是当len(params) > 1 时，才生效\b，即当params 以list [a, b, c] (a,b,c都是tensor) 输入多个tensor时，对\bparams的选择顺序进行切分，（而不是对ids进行切分，ids只有选择的作用，当然也决定了在return中次序）。\n\n### 输入为单个tensor时\n\n``` python \n# 当\b输入单个tensor时，partition_strategy不起作用，不做\b id（编号） 的切分\na = np.arange(20).reshape(5,4)\nprint (a)\n\n# 前面的编号是我手动加的，意思是不做切分的时候就顺序编号就行\n# 0#[[ 0  1  2  3]\n# 1# [ 4  5  6  7]\n# 2# [ 8  9 10 11]\n# 3# [12 13 14 15]\n# 4# [16 17 18 19]]\n\ntensor_a = tf.Variable(a)\nembedded_tensor = tf.nn.embedding_lookup(params=tensor_a, ids=[0,3,2,1])\ninit = tf.global_variables_initializer()\nwith tf.Session() as sess:\n    sess.run(init)\n    embedded_tensor = sess.run(embedded_tensor)\n    print(embedded_tensor)\n# 根据 ids 参数做选择\n#[[ 0  1  2  3]  选择了 id 0\n# [12 13 14 15]  选择了 id 3\n# [ 8  9 10 11]  选择了 id 2\n# [ 4  5  6  7]] 选择了 id 1\n\n```\n### 输入为多个tensor时\n\npartition_strategy 开始起作用，开始对多个tensor 的第 0 维上的项进行编号，编号的方式有两种，\"mod\"（默认） 和 \"div\"。\n\n假设：一共有三个tensor [a,b,c] 作为params 参数，所有`tensor`的第 0 维上一共有 10 个项目（id 0 ~ 9）。\n\n- \"mod\" : (id) mod len(params) 得到\b多少就把 id 分到第几个tensor里面\n    - a 依次分到id： 0 3 6 9\n    - b 依次分到id： 1 4 7\n    - c 依次分到id： 2 5 8\n\n- \"div\" : (id) div len(params) 可以理解为依次排序，但是这两种切分方式在无法均匀切分的情况下都是将前(max_id+1)%len(params)个 partition 多分配一个元素.\n    - a 依次分到id： 0 1 2 3 \n    - b 依次分到id： 4 5 6\n    - c 依次分到id： 7 8 9\n\n\n``` python\n# partition_strategy='div' 的情况\na = tf.Variable(np.arange(8).reshape(2,4))\nb = tf.Variable(np.arange(8,12).reshape(1,4))\nc = tf.Variable(np.arange(12, 20).reshape(2,4))\n\nembedded_tensor = tf.nn.embedding_lookup(params=[a,b,c], ids=[1,2,4], partition_strategy='div', name=\"embedding\")\n\ninit = tf.global_variables_initializer()\nwith tf.Session() as sess:\n    sess.run(init)\n    print (sess.run(a))\n    print (sess.run(b))\n    print (sess.run(c))\n    \n    print (\"########## embedded_tensor #########\")\n    print(sess.run(embedded_tensor))\n# [[0 1 2 3]    a\b分到 id 0\n#  [4 5 6 7]]   a分到 id 1\n\n# [[ 8  9 10 11]] b分到 id 2\n#                 b分到 id 3\n\n# [[12 13 14 15]  c分到 id 4\n#  [16 17 18 19]] (c 没分到id)\n# ########## embedded_tensor ######### 注：ids=[1,2,4]\n#[[ 4  5  6  7]   \b按 ids 选的 1\n# [ 8  9 10 11]   按 ids 选的 2\n# [12 13 14 15]]  按 ids 选的 4\n```\n注：如果ids 中 有 3，\b这个id 虽然被分给 b 这个tensor了，但是b没有，会报一个错误\n``` python\nInvalidArgumentError: indices[0] = 1 is not in [0, 1)\n\t [[Node: embedding_5/GatherV2_1 = GatherV2[Taxis=DT_INT32, Tindices=DT_INT32, Tparams=DT_INT64, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](Variable_154/read, ConstantFolding/embedding_5/DynamicPartition-folded-1, embedding_5/GatherV2_1/axis)]]\n```\n\n## tf.gather()\n函数签名如下：\n``` python \ntf.gather(\n    params,\n    indices,\n    validate_indices=None,\n    name=None\n```\n参数说明：\n- params是一个tensor，\n- indices是个值为int的tensor用来指定要从params取得元素的第0维的index。\n\n该函数可看成是tf.nn.embedding_lookup()的特殊形式，所以功能与其类似，即将其看成是embedding_lookup函数的params参数内只有一个tensor时的情形。\n\n## tf.nn.embedding_lookup_sparse\n\n``` python\ntf.nn.embedding_lookup_sparse(\n    params,\n    sp_ids,\n    sp_weights,\n    partition_strategy='mod',\n    name=None,\n    combiner=None,\n    max_norm=None\n)\n```\n### 参数\n\n见官网\bAPI，不贴了：[python API](https://www.tensorflow.org/api_docs/python/tf/nn/embedding_lookup_sparse)\n\n- params: A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors. Alternatively, a PartitionedVariable, created by partitioning along dimension 0. Each element must be appropriately sized for the given partition_strategy.\n\nReturns:\nA dense tensor representing the combined embeddings for the sparse ids. For each row in the dense tensor represented by sp_ids, the op looks up the embeddings for all ids in that row, multiplies them by the corresponding weight, and combines these embeddings as specified.\n\nIn other words, if\n\n- shape(combined params) = [p0, p1, ..., pm]\n\nand\n\n- shape(sp_ids) = shape(sp_weights) = [d0, d1, ..., dn]\n\nthen\n\n- shape(output) = [d0, d1, ..., dn-1, p1, ..., pm].\n\nFor instance, if params is a 10x20 matrix, and sp_ids / sp_weights are\n\n[0, 0]: id 1, weight 2.0 [0, 1]: id 3, weight 0.5 [1, 0]: id 0, weight 1.0 [2, 3]: id 1, weight 3.0\n\nwith combiner=\"mean\", then the output will be a 3x20 matrix where\n\noutput[0, :] = (params[1, :] * 2.0 + params[3, :] * 0.5) / (2.0 + 0.5) output[1, :] = (params[0, :] * 1.0) / 1.0 output[2, :] = (params[1, :] * 3.0) / 3.0\n\n### 示例：\n\n``` python\na = np.arange(8).reshape(2, 4)\nb = np.arange(8, 16).reshape(2, 4)\nc = np.arange(12, 20).reshape(2, 4)\nprint (\"a :\")\nprint (a)\nprint (\"b :\")\nprint (b)\nprint (\"c :\")\nprint (c)\na = tf.Variable(a, dtype=tf.float32)\nb = tf.Variable(b, dtype=tf.float32)\nc = tf.Variable(c, dtype=tf.float32)\nidx = tf.SparseTensor(indices=[[0,0], [0,2], [1,0], [1, 1]], values=[1,2,2,0], dense_shape=(2,3))\nresult = tf.nn.embedding_lookup_sparse([a,c,b], idx, None, partition_strategy='mod', combiner=\"sum\")\n\ninit = tf.global_variables_initializer()\nwith tf.Session() as sess:\n    sess.run(init)\n    res = sess.run(result)\n    print (\"\\n# result here\")\n    print(res)\n\n# a :\n# [[0 1 2 3]    id 0\n#  [4 5 6 7]]   id 3\n# b :\n# [[ 8  9 10 11]  id 1\n#  [12 13 14 15]] id 4\n# c :\n# [[16 17 18 19] id 2\n#  [20 21 22 23]] id 5\n\n# result here\n# [[24. 26. 28. 30.]  \n#  [16. 18. 20. 22.]]\n```\n解释：\n``` python\n#idx = tf.SparseTensor(indices=[[0,0], [0,2], [1,0], [1, 1]], values=[1,2,2,0], dense_shape=(2,3))\n构造如下稀疏向量矩阵，每一行视为一个样本的特征向量\n[\n    [[1], [], [2]],\n    [[2], [0], []]\n]\n以第一个样本 [[1], [], [2]] 为例：选择id 1 和id 2：\n# [[ 8  9 10 11]  id 1\n# [[16 17 18 19] id 2\n根据 combiner=\"sum\" ，把上面两个向量 按 axis=0 加到一起，得到：\n# [24. 26. 28. 30.]\n即 为第一个样本的 dense 向量\n```\n\n如果len(params) == 1, 就是不存在 partition 了，比较好理解，不再赘述。\n\n喝最烈的果粒橙，钻最深的牛角尖。\nend.","slug":"tensorflow-embedding-lookup-sparse","published":1,"updated":"2018-06-02T06:46:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjidbf1qj000iry1ddh6hhmv3","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"\b\b概述\"></a>\b\b概述</h1><p>本文主要讲解tensorflow中涉及embedding的API。之前看了一些文章，写的云山雾绕，花了好长时间才搞懂，太笨了。<br>\b<br>embedding 算法主要用于处理稀疏\b特征，应用于\b\bNLP、推荐、广告等领域。所以word2vec 只是embbeding 思想的一个应用，而不是全部。</p>\n<p>代码地址：git@github.com:gshtime/tensorflow-api.git</p>\n<h1 id=\"embedding原理\"><a href=\"#embedding原理\" class=\"headerlink\" title=\"embedding原理\"></a>embedding原理</h1><p>常见的特征降维方法主要有PCA、SVD等。</p>\n<p>而embedding的主要目的也是对（稀疏）特征进行降维，\b它降维的方式可以类比为一个全连接层（没有激活函数），通过\b embedding 层的权重矩阵计算来降低维度。</p>\n<p>假设：</p>\n<ul>\n<li>feature_num : 原始特征数</li>\n<li>embedding_size: embedding之后的特征数</li>\n<li>[feature_num, embedding_size]  权重矩阵shape</li>\n<li>[m, feature_num]  输入矩阵shape，m为样本数</li>\n<li>[m, embedding_size]  \b输出矩阵shape，m为样本数</li>\n</ul>\n<p><img src=\"http://p8vrqzrnj.bkt.clouddn.com/WX20180601-155344.png\" alt=\"稀疏向量的选择\"></p>\n<p>应用中一般将物体嵌入到一个低维空间 $R^{embedding-size} (embedding-size &lt;&lt; feature_num)$ ，只需要再compose 上一个从 $R^{feature-num}$ 到 $R^{embedding-size}$ 的线性映射就好了。每一个shape为 $feature-num \\times embedding-size$ 的矩阵M(embedding矩阵) 都定义了 $R^{feature-num}$ 到 $R^{embedding-size}$ 的一个线性映射: $x \\mapsto Mx$ 。当 $x$ 是一个标准基向量的时候，$Mx$对应矩阵 $M$ 中的一列，这就是对应 $id$ 的向量表示。</p>\n<p><img src=\"http://p8vrqzrnj.bkt.clouddn.com/20170814220528829.jpg\" alt=\"连接层\"></p>\n<p>从id(索引)找到对应的 One-hot encoding ，然后红色的weight就直接对应了输出节点的值(注意这里没有 activation function)，也就是对应的embedding向量。</p>\n<h1 id=\"tensorflow-API\"><a href=\"#tensorflow-API\" class=\"headerlink\" title=\"tensorflow API\"></a>tensorflow API</h1><h2 id=\"基础：-tf-SparseTensor\"><a href=\"#基础：-tf-SparseTensor\" class=\"headerlink\" title=\"基础： tf.SparseTensor\"></a>基础： tf.SparseTensor</h2><p>构造稀疏向量矩阵，\b\b【未求证】\b使用上每一行为一个样本</p>\n<p>SparseTensor(indices, values, dense_shape)</p>\n<p>params:</p>\n<ul>\n<li>indices: A 2-D int64 tensor of dense_shape [N, ndims], which specifies the indices of the elements in the sparse tensor that contain nonzero values (elements are zero-indexed). For example, indices=[[1,3], [2,4]] specifies that the elements with indexes of [1,3] and [2,4] have nonzero values. 是dense_shape这个矩阵中所有values值的位置，与values一一对应。</li>\n<li>values: A 1-D tensor of any type and dense_shape [N], which supplies the values for each element in indices. For example, given indices=[[1,3], [2,4]], the parameter values=[18, 3.6] specifies that element [1,3] of the sparse tensor has a value of 18, and element [2,4] of the tensor has a value of 3.6. \b每一个稀疏值，与其位置indices\b一一对应。</li>\n<li>dense_shape: A 1-D int64 tensor of dense_shape [ndims], which specifies the dense_shape of the sparse tensor. Takes a list indicating the number of elements in each dimension. For example, dense_shape=[3,6] specifies a two-dimensional 3x6 tensor, dense_shape=[2,3,4] specifies a three-dimensional 2x3x4 tensor, and dense_shape=[9] specifies a one-dimensional tensor with 9 elements. 稀疏向量矩阵的shape</li>\n</ul>\n<p>Example: The sparse tensor</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SparseTensor(indices=[[<span class=\"number\">0</span>, <span class=\"number\">0</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>]], values=[<span class=\"number\">1</span>, <span class=\"number\">2</span>], dense_shape=[<span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># represents the dense tensor</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [[1, 0, 0, 0]</span></span><br><span class=\"line\"><span class=\"comment\">#  [0, 0, 2, 0]</span></span><br><span class=\"line\"><span class=\"comment\">#  [0, 0, 0, 0]]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"tf-nn-embedding-lookup-和-partition-strategy-参数\"><a href=\"#tf-nn-embedding-lookup-和-partition-strategy-参数\" class=\"headerlink\" title=\"tf.nn.embedding_lookup 和 partition_strategy 参数\"></a>tf.nn.embedding_lookup 和 partition_strategy 参数</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Signature:</span></span><br><span class=\"line\">tf.nn.embedding_lookup(params, ids, partition_strategy=<span class=\"string\">'mod'</span>, name=<span class=\"keyword\">None</span>, validate_indices=<span class=\"keyword\">True</span>, max_norm=<span class=\"keyword\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># Docstring:</span></span><br><span class=\"line\"><span class=\"comment\"># Looks up `ids` in a list of embedding tensors.</span></span><br></pre></td></tr></table></figure>\n<p>是根据 <code>ids</code> 中的id，寻找 <code>params</code> 中的第id行。比如 <code>ids=[1,3,5]</code>，则找出<code>params</code>中第1，3，5行，组成一个tensor返回。</p>\n<p>embedding_lookup不是简单的查表，<code>params</code> 对应的向量是可以训练的，训练参数个数应该是 feature_num * embedding_size，即前文表述的embedding层权重矩阵，就是说 lookup 的是一种全连接层。</p>\n<p>此外，以下要\b记录的几个API里，都有参数 partition_strategy （切分方式）, 这个参数是当len(params) &gt; 1 时，才生效\b，即当params 以list [a, b, c] (a,b,c都是tensor) 输入多个tensor时，对\bparams的选择顺序进行切分，（而不是对ids进行切分，ids只有选择的作用，当然也决定了在return中次序）。</p>\n<h3 id=\"输入为单个tensor时\"><a href=\"#输入为单个tensor时\" class=\"headerlink\" title=\"输入为单个tensor时\"></a>输入为单个tensor时</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当\b输入单个tensor时，partition_strategy不起作用，不做\b id（编号） 的切分</span></span><br><span class=\"line\">a = np.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">5</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 前面的编号是我手动加的，意思是不做切分的时候就顺序编号就行</span></span><br><span class=\"line\"><span class=\"comment\"># 0#[[ 0  1  2  3]</span></span><br><span class=\"line\"><span class=\"comment\"># 1# [ 4  5  6  7]</span></span><br><span class=\"line\"><span class=\"comment\"># 2# [ 8  9 10 11]</span></span><br><span class=\"line\"><span class=\"comment\"># 3# [12 13 14 15]</span></span><br><span class=\"line\"><span class=\"comment\"># 4# [16 17 18 19]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">tensor_a = tf.Variable(a)</span><br><span class=\"line\">embedded_tensor = tf.nn.embedding_lookup(params=tensor_a, ids=[<span class=\"number\">0</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>])</span><br><span class=\"line\">init = tf.global_variables_initializer()</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    sess.run(init)</span><br><span class=\"line\">    embedded_tensor = sess.run(embedded_tensor)</span><br><span class=\"line\">    print(embedded_tensor)</span><br><span class=\"line\"><span class=\"comment\"># 根据 ids 参数做选择</span></span><br><span class=\"line\"><span class=\"comment\">#[[ 0  1  2  3]  选择了 id 0</span></span><br><span class=\"line\"><span class=\"comment\"># [12 13 14 15]  选择了 id 3</span></span><br><span class=\"line\"><span class=\"comment\"># [ 8  9 10 11]  选择了 id 2</span></span><br><span class=\"line\"><span class=\"comment\"># [ 4  5  6  7]] 选择了 id 1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"输入为多个tensor时\"><a href=\"#输入为多个tensor时\" class=\"headerlink\" title=\"输入为多个tensor时\"></a>输入为多个tensor时</h3><p>partition_strategy 开始起作用，开始对多个tensor 的第 0 维上的项进行编号，编号的方式有两种，”mod”（默认） 和 “div”。</p>\n<p>假设：一共有三个tensor [a,b,c] 作为params 参数，所有<code>tensor</code>的第 0 维上一共有 10 个项目（id 0 ~ 9）。</p>\n<ul>\n<li><p>“mod” : (id) mod len(params) 得到\b多少就把 id 分到第几个tensor里面</p>\n<ul>\n<li>a 依次分到id： 0 3 6 9</li>\n<li>b 依次分到id： 1 4 7</li>\n<li>c 依次分到id： 2 5 8</li>\n</ul>\n</li>\n<li><p>“div” : (id) div len(params) 可以理解为依次排序，但是这两种切分方式在无法均匀切分的情况下都是将前(max_id+1)%len(params)个 partition 多分配一个元素.</p>\n<ul>\n<li>a 依次分到id： 0 1 2 3 </li>\n<li>b 依次分到id： 4 5 6</li>\n<li>c 依次分到id： 7 8 9</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># partition_strategy='div' 的情况</span></span><br><span class=\"line\">a = tf.Variable(np.arange(<span class=\"number\">8</span>).reshape(<span class=\"number\">2</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\">b = tf.Variable(np.arange(<span class=\"number\">8</span>,<span class=\"number\">12</span>).reshape(<span class=\"number\">1</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\">c = tf.Variable(np.arange(<span class=\"number\">12</span>, <span class=\"number\">20</span>).reshape(<span class=\"number\">2</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">embedded_tensor = tf.nn.embedding_lookup(params=[a,b,c], ids=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>], partition_strategy=<span class=\"string\">'div'</span>, name=<span class=\"string\">\"embedding\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">init = tf.global_variables_initializer()</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    sess.run(init)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (sess.run(a))</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (sess.run(b))</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (sess.run(c))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"########## embedded_tensor #########\"</span>)</span><br><span class=\"line\">    print(sess.run(embedded_tensor))</span><br><span class=\"line\"><span class=\"comment\"># [[0 1 2 3]    a\b分到 id 0</span></span><br><span class=\"line\"><span class=\"comment\">#  [4 5 6 7]]   a分到 id 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [[ 8  9 10 11]] b分到 id 2</span></span><br><span class=\"line\"><span class=\"comment\">#                 b分到 id 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [[12 13 14 15]  c分到 id 4</span></span><br><span class=\"line\"><span class=\"comment\">#  [16 17 18 19]] (c 没分到id)</span></span><br><span class=\"line\"><span class=\"comment\"># ########## embedded_tensor ######### 注：ids=[1,2,4]</span></span><br><span class=\"line\"><span class=\"comment\">#[[ 4  5  6  7]   \b按 ids 选的 1</span></span><br><span class=\"line\"><span class=\"comment\"># [ 8  9 10 11]   按 ids 选的 2</span></span><br><span class=\"line\"><span class=\"comment\"># [12 13 14 15]]  按 ids 选的 4</span></span><br></pre></td></tr></table></figure>\n<p>注：如果ids 中 有 3，\b这个id 虽然被分给 b 这个tensor了，但是b没有，会报一个错误<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InvalidArgumentError: indices[<span class=\"number\">0</span>] = <span class=\"number\">1</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> [<span class=\"number\">0</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t [[Node: embedding_5/GatherV2_1 = GatherV2[Taxis=DT_INT32, Tindices=DT_INT32, Tparams=DT_INT64, _device=<span class=\"string\">\"/job:localhost/replica:0/task:0/device:CPU:0\"</span>](Variable_154/read, ConstantFolding/embedding_5/DynamicPartition-folded<span class=\"number\">-1</span>, embedding_5/GatherV2_1/axis)]]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"tf-gather\"><a href=\"#tf-gather\" class=\"headerlink\" title=\"tf.gather()\"></a>tf.gather()</h2><p>函数签名如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tf.gather(</span><br><span class=\"line\">    params,</span><br><span class=\"line\">    indices,</span><br><span class=\"line\">    validate_indices=<span class=\"keyword\">None</span>,</span><br><span class=\"line\">    name=<span class=\"keyword\">None</span></span><br></pre></td></tr></table></figure></p>\n<p>参数说明：</p>\n<ul>\n<li>params是一个tensor，</li>\n<li>indices是个值为int的tensor用来指定要从params取得元素的第0维的index。</li>\n</ul>\n<p>该函数可看成是tf.nn.embedding_lookup()的特殊形式，所以功能与其类似，即将其看成是embedding_lookup函数的params参数内只有一个tensor时的情形。</p>\n<h2 id=\"tf-nn-embedding-lookup-sparse\"><a href=\"#tf-nn-embedding-lookup-sparse\" class=\"headerlink\" title=\"tf.nn.embedding_lookup_sparse\"></a>tf.nn.embedding_lookup_sparse</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tf.nn.embedding_lookup_sparse(</span><br><span class=\"line\">    params,</span><br><span class=\"line\">    sp_ids,</span><br><span class=\"line\">    sp_weights,</span><br><span class=\"line\">    partition_strategy=<span class=\"string\">'mod'</span>,</span><br><span class=\"line\">    name=<span class=\"keyword\">None</span>,</span><br><span class=\"line\">    combiner=<span class=\"keyword\">None</span>,</span><br><span class=\"line\">    max_norm=<span class=\"keyword\">None</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p>见官网\bAPI，不贴了：<a href=\"https://www.tensorflow.org/api_docs/python/tf/nn/embedding_lookup_sparse\" target=\"_blank\" rel=\"noopener\">python API</a></p>\n<ul>\n<li>params: A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors. Alternatively, a PartitionedVariable, created by partitioning along dimension 0. Each element must be appropriately sized for the given partition_strategy.</li>\n</ul>\n<p>Returns:<br>A dense tensor representing the combined embeddings for the sparse ids. For each row in the dense tensor represented by sp_ids, the op looks up the embeddings for all ids in that row, multiplies them by the corresponding weight, and combines these embeddings as specified.</p>\n<p>In other words, if</p>\n<ul>\n<li>shape(combined params) = [p0, p1, …, pm]</li>\n</ul>\n<p>and</p>\n<ul>\n<li>shape(sp_ids) = shape(sp_weights) = [d0, d1, …, dn]</li>\n</ul>\n<p>then</p>\n<ul>\n<li>shape(output) = [d0, d1, …, dn-1, p1, …, pm].</li>\n</ul>\n<p>For instance, if params is a 10x20 matrix, and sp_ids / sp_weights are</p>\n<p>[0, 0]: id 1, weight 2.0 [0, 1]: id 3, weight 0.5 [1, 0]: id 0, weight 1.0 [2, 3]: id 1, weight 3.0</p>\n<p>with combiner=”mean”, then the output will be a 3x20 matrix where</p>\n<p>output[0, :] = (params[1, :] <em> 2.0 + params[3, :] </em> 0.5) / (2.0 + 0.5) output[1, :] = (params[0, :] <em> 1.0) / 1.0 output[2, :] = (params[1, :] </em> 3.0) / 3.0</p>\n<h3 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.arange(<span class=\"number\">8</span>).reshape(<span class=\"number\">2</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">b = np.arange(<span class=\"number\">8</span>, <span class=\"number\">16</span>).reshape(<span class=\"number\">2</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">c = np.arange(<span class=\"number\">12</span>, <span class=\"number\">20</span>).reshape(<span class=\"number\">2</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"a :\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (a)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"b :\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (b)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"c :\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (c)</span><br><span class=\"line\">a = tf.Variable(a, dtype=tf.float32)</span><br><span class=\"line\">b = tf.Variable(b, dtype=tf.float32)</span><br><span class=\"line\">c = tf.Variable(c, dtype=tf.float32)</span><br><span class=\"line\">idx = tf.SparseTensor(indices=[[<span class=\"number\">0</span>,<span class=\"number\">0</span>], [<span class=\"number\">0</span>,<span class=\"number\">2</span>], [<span class=\"number\">1</span>,<span class=\"number\">0</span>], [<span class=\"number\">1</span>, <span class=\"number\">1</span>]], values=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>], dense_shape=(<span class=\"number\">2</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">result = tf.nn.embedding_lookup_sparse([a,c,b], idx, <span class=\"keyword\">None</span>, partition_strategy=<span class=\"string\">'mod'</span>, combiner=<span class=\"string\">\"sum\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">init = tf.global_variables_initializer()</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    sess.run(init)</span><br><span class=\"line\">    res = sess.run(result)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"\\n# result here\"</span>)</span><br><span class=\"line\">    print(res)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># a :</span></span><br><span class=\"line\"><span class=\"comment\"># [[0 1 2 3]    id 0</span></span><br><span class=\"line\"><span class=\"comment\">#  [4 5 6 7]]   id 3</span></span><br><span class=\"line\"><span class=\"comment\"># b :</span></span><br><span class=\"line\"><span class=\"comment\"># [[ 8  9 10 11]  id 1</span></span><br><span class=\"line\"><span class=\"comment\">#  [12 13 14 15]] id 4</span></span><br><span class=\"line\"><span class=\"comment\"># c :</span></span><br><span class=\"line\"><span class=\"comment\"># [[16 17 18 19] id 2</span></span><br><span class=\"line\"><span class=\"comment\">#  [20 21 22 23]] id 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># result here</span></span><br><span class=\"line\"><span class=\"comment\"># [[24. 26. 28. 30.]  </span></span><br><span class=\"line\"><span class=\"comment\">#  [16. 18. 20. 22.]]</span></span><br></pre></td></tr></table></figure>\n<p>解释：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#idx = tf.SparseTensor(indices=[[0,0], [0,2], [1,0], [1, 1]], values=[1,2,2,0], dense_shape=(2,3))</span></span><br><span class=\"line\">构造如下稀疏向量矩阵，每一行视为一个样本的特征向量</span><br><span class=\"line\">[</span><br><span class=\"line\">    [[<span class=\"number\">1</span>], [], [<span class=\"number\">2</span>]],</span><br><span class=\"line\">    [[<span class=\"number\">2</span>], [<span class=\"number\">0</span>], []]</span><br><span class=\"line\">]</span><br><span class=\"line\">以第一个样本 [[<span class=\"number\">1</span>], [], [<span class=\"number\">2</span>]] 为例：选择id <span class=\"number\">1</span> 和id <span class=\"number\">2</span>：</span><br><span class=\"line\"><span class=\"comment\"># [[ 8  9 10 11]  id 1</span></span><br><span class=\"line\"><span class=\"comment\"># [[16 17 18 19] id 2</span></span><br><span class=\"line\">根据 combiner=<span class=\"string\">\"sum\"</span> ，把上面两个向量 按 axis=<span class=\"number\">0</span> 加到一起，得到：</span><br><span class=\"line\"><span class=\"comment\"># [24. 26. 28. 30.]</span></span><br><span class=\"line\">即 为第一个样本的 dense 向量</span><br></pre></td></tr></table></figure></p>\n<p>如果len(params) == 1, 就是不存在 partition 了，比较好理解，不再赘述。</p>\n<p>喝最烈的果粒橙，钻最深的牛角尖。<br>end.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"\b\b概述\"></a>\b\b概述</h1><p>本文主要讲解tensorflow中涉及embedding的API。之前看了一些文章，写的云山雾绕，花了好长时间才搞懂，太笨了。<br>\b<br>embedding 算法主要用于处理稀疏\b特征，应用于\b\bNLP、推荐、广告等领域。所以word2vec 只是embbeding 思想的一个应用，而不是全部。</p>\n<p>代码地址：git@github.com:gshtime/tensorflow-api.git</p>\n<h1 id=\"embedding原理\"><a href=\"#embedding原理\" class=\"headerlink\" title=\"embedding原理\"></a>embedding原理</h1><p>常见的特征降维方法主要有PCA、SVD等。</p>\n<p>而embedding的主要目的也是对（稀疏）特征进行降维，\b它降维的方式可以类比为一个全连接层（没有激活函数），通过\b embedding 层的权重矩阵计算来降低维度。</p>\n<p>假设：</p>\n<ul>\n<li>feature_num : 原始特征数</li>\n<li>embedding_size: embedding之后的特征数</li>\n<li>[feature_num, embedding_size]  权重矩阵shape</li>\n<li>[m, feature_num]  输入矩阵shape，m为样本数</li>\n<li>[m, embedding_size]  \b输出矩阵shape，m为样本数</li>\n</ul>\n<p><img src=\"http://p8vrqzrnj.bkt.clouddn.com/WX20180601-155344.png\" alt=\"稀疏向量的选择\"></p>\n<p>应用中一般将物体嵌入到一个低维空间 $R^{embedding-size} (embedding-size &lt;&lt; feature_num)$ ，只需要再compose 上一个从 $R^{feature-num}$ 到 $R^{embedding-size}$ 的线性映射就好了。每一个shape为 $feature-num \\times embedding-size$ 的矩阵M(embedding矩阵) 都定义了 $R^{feature-num}$ 到 $R^{embedding-size}$ 的一个线性映射: $x \\mapsto Mx$ 。当 $x$ 是一个标准基向量的时候，$Mx$对应矩阵 $M$ 中的一列，这就是对应 $id$ 的向量表示。</p>\n<p><img src=\"http://p8vrqzrnj.bkt.clouddn.com/20170814220528829.jpg\" alt=\"连接层\"></p>\n<p>从id(索引)找到对应的 One-hot encoding ，然后红色的weight就直接对应了输出节点的值(注意这里没有 activation function)，也就是对应的embedding向量。</p>\n<h1 id=\"tensorflow-API\"><a href=\"#tensorflow-API\" class=\"headerlink\" title=\"tensorflow API\"></a>tensorflow API</h1><h2 id=\"基础：-tf-SparseTensor\"><a href=\"#基础：-tf-SparseTensor\" class=\"headerlink\" title=\"基础： tf.SparseTensor\"></a>基础： tf.SparseTensor</h2><p>构造稀疏向量矩阵，\b\b【未求证】\b使用上每一行为一个样本</p>\n<p>SparseTensor(indices, values, dense_shape)</p>\n<p>params:</p>\n<ul>\n<li>indices: A 2-D int64 tensor of dense_shape [N, ndims], which specifies the indices of the elements in the sparse tensor that contain nonzero values (elements are zero-indexed). For example, indices=[[1,3], [2,4]] specifies that the elements with indexes of [1,3] and [2,4] have nonzero values. 是dense_shape这个矩阵中所有values值的位置，与values一一对应。</li>\n<li>values: A 1-D tensor of any type and dense_shape [N], which supplies the values for each element in indices. For example, given indices=[[1,3], [2,4]], the parameter values=[18, 3.6] specifies that element [1,3] of the sparse tensor has a value of 18, and element [2,4] of the tensor has a value of 3.6. \b每一个稀疏值，与其位置indices\b一一对应。</li>\n<li>dense_shape: A 1-D int64 tensor of dense_shape [ndims], which specifies the dense_shape of the sparse tensor. Takes a list indicating the number of elements in each dimension. For example, dense_shape=[3,6] specifies a two-dimensional 3x6 tensor, dense_shape=[2,3,4] specifies a three-dimensional 2x3x4 tensor, and dense_shape=[9] specifies a one-dimensional tensor with 9 elements. 稀疏向量矩阵的shape</li>\n</ul>\n<p>Example: The sparse tensor</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SparseTensor(indices=[[<span class=\"number\">0</span>, <span class=\"number\">0</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>]], values=[<span class=\"number\">1</span>, <span class=\"number\">2</span>], dense_shape=[<span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># represents the dense tensor</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [[1, 0, 0, 0]</span></span><br><span class=\"line\"><span class=\"comment\">#  [0, 0, 2, 0]</span></span><br><span class=\"line\"><span class=\"comment\">#  [0, 0, 0, 0]]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"tf-nn-embedding-lookup-和-partition-strategy-参数\"><a href=\"#tf-nn-embedding-lookup-和-partition-strategy-参数\" class=\"headerlink\" title=\"tf.nn.embedding_lookup 和 partition_strategy 参数\"></a>tf.nn.embedding_lookup 和 partition_strategy 参数</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Signature:</span></span><br><span class=\"line\">tf.nn.embedding_lookup(params, ids, partition_strategy=<span class=\"string\">'mod'</span>, name=<span class=\"keyword\">None</span>, validate_indices=<span class=\"keyword\">True</span>, max_norm=<span class=\"keyword\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># Docstring:</span></span><br><span class=\"line\"><span class=\"comment\"># Looks up `ids` in a list of embedding tensors.</span></span><br></pre></td></tr></table></figure>\n<p>是根据 <code>ids</code> 中的id，寻找 <code>params</code> 中的第id行。比如 <code>ids=[1,3,5]</code>，则找出<code>params</code>中第1，3，5行，组成一个tensor返回。</p>\n<p>embedding_lookup不是简单的查表，<code>params</code> 对应的向量是可以训练的，训练参数个数应该是 feature_num * embedding_size，即前文表述的embedding层权重矩阵，就是说 lookup 的是一种全连接层。</p>\n<p>此外，以下要\b记录的几个API里，都有参数 partition_strategy （切分方式）, 这个参数是当len(params) &gt; 1 时，才生效\b，即当params 以list [a, b, c] (a,b,c都是tensor) 输入多个tensor时，对\bparams的选择顺序进行切分，（而不是对ids进行切分，ids只有选择的作用，当然也决定了在return中次序）。</p>\n<h3 id=\"输入为单个tensor时\"><a href=\"#输入为单个tensor时\" class=\"headerlink\" title=\"输入为单个tensor时\"></a>输入为单个tensor时</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当\b输入单个tensor时，partition_strategy不起作用，不做\b id（编号） 的切分</span></span><br><span class=\"line\">a = np.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">5</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 前面的编号是我手动加的，意思是不做切分的时候就顺序编号就行</span></span><br><span class=\"line\"><span class=\"comment\"># 0#[[ 0  1  2  3]</span></span><br><span class=\"line\"><span class=\"comment\"># 1# [ 4  5  6  7]</span></span><br><span class=\"line\"><span class=\"comment\"># 2# [ 8  9 10 11]</span></span><br><span class=\"line\"><span class=\"comment\"># 3# [12 13 14 15]</span></span><br><span class=\"line\"><span class=\"comment\"># 4# [16 17 18 19]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">tensor_a = tf.Variable(a)</span><br><span class=\"line\">embedded_tensor = tf.nn.embedding_lookup(params=tensor_a, ids=[<span class=\"number\">0</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>])</span><br><span class=\"line\">init = tf.global_variables_initializer()</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    sess.run(init)</span><br><span class=\"line\">    embedded_tensor = sess.run(embedded_tensor)</span><br><span class=\"line\">    print(embedded_tensor)</span><br><span class=\"line\"><span class=\"comment\"># 根据 ids 参数做选择</span></span><br><span class=\"line\"><span class=\"comment\">#[[ 0  1  2  3]  选择了 id 0</span></span><br><span class=\"line\"><span class=\"comment\"># [12 13 14 15]  选择了 id 3</span></span><br><span class=\"line\"><span class=\"comment\"># [ 8  9 10 11]  选择了 id 2</span></span><br><span class=\"line\"><span class=\"comment\"># [ 4  5  6  7]] 选择了 id 1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"输入为多个tensor时\"><a href=\"#输入为多个tensor时\" class=\"headerlink\" title=\"输入为多个tensor时\"></a>输入为多个tensor时</h3><p>partition_strategy 开始起作用，开始对多个tensor 的第 0 维上的项进行编号，编号的方式有两种，”mod”（默认） 和 “div”。</p>\n<p>假设：一共有三个tensor [a,b,c] 作为params 参数，所有<code>tensor</code>的第 0 维上一共有 10 个项目（id 0 ~ 9）。</p>\n<ul>\n<li><p>“mod” : (id) mod len(params) 得到\b多少就把 id 分到第几个tensor里面</p>\n<ul>\n<li>a 依次分到id： 0 3 6 9</li>\n<li>b 依次分到id： 1 4 7</li>\n<li>c 依次分到id： 2 5 8</li>\n</ul>\n</li>\n<li><p>“div” : (id) div len(params) 可以理解为依次排序，但是这两种切分方式在无法均匀切分的情况下都是将前(max_id+1)%len(params)个 partition 多分配一个元素.</p>\n<ul>\n<li>a 依次分到id： 0 1 2 3 </li>\n<li>b 依次分到id： 4 5 6</li>\n<li>c 依次分到id： 7 8 9</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># partition_strategy='div' 的情况</span></span><br><span class=\"line\">a = tf.Variable(np.arange(<span class=\"number\">8</span>).reshape(<span class=\"number\">2</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\">b = tf.Variable(np.arange(<span class=\"number\">8</span>,<span class=\"number\">12</span>).reshape(<span class=\"number\">1</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\">c = tf.Variable(np.arange(<span class=\"number\">12</span>, <span class=\"number\">20</span>).reshape(<span class=\"number\">2</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">embedded_tensor = tf.nn.embedding_lookup(params=[a,b,c], ids=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>], partition_strategy=<span class=\"string\">'div'</span>, name=<span class=\"string\">\"embedding\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">init = tf.global_variables_initializer()</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    sess.run(init)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (sess.run(a))</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (sess.run(b))</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (sess.run(c))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"########## embedded_tensor #########\"</span>)</span><br><span class=\"line\">    print(sess.run(embedded_tensor))</span><br><span class=\"line\"><span class=\"comment\"># [[0 1 2 3]    a\b分到 id 0</span></span><br><span class=\"line\"><span class=\"comment\">#  [4 5 6 7]]   a分到 id 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [[ 8  9 10 11]] b分到 id 2</span></span><br><span class=\"line\"><span class=\"comment\">#                 b分到 id 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [[12 13 14 15]  c分到 id 4</span></span><br><span class=\"line\"><span class=\"comment\">#  [16 17 18 19]] (c 没分到id)</span></span><br><span class=\"line\"><span class=\"comment\"># ########## embedded_tensor ######### 注：ids=[1,2,4]</span></span><br><span class=\"line\"><span class=\"comment\">#[[ 4  5  6  7]   \b按 ids 选的 1</span></span><br><span class=\"line\"><span class=\"comment\"># [ 8  9 10 11]   按 ids 选的 2</span></span><br><span class=\"line\"><span class=\"comment\"># [12 13 14 15]]  按 ids 选的 4</span></span><br></pre></td></tr></table></figure>\n<p>注：如果ids 中 有 3，\b这个id 虽然被分给 b 这个tensor了，但是b没有，会报一个错误<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InvalidArgumentError: indices[<span class=\"number\">0</span>] = <span class=\"number\">1</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> [<span class=\"number\">0</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t [[Node: embedding_5/GatherV2_1 = GatherV2[Taxis=DT_INT32, Tindices=DT_INT32, Tparams=DT_INT64, _device=<span class=\"string\">\"/job:localhost/replica:0/task:0/device:CPU:0\"</span>](Variable_154/read, ConstantFolding/embedding_5/DynamicPartition-folded<span class=\"number\">-1</span>, embedding_5/GatherV2_1/axis)]]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"tf-gather\"><a href=\"#tf-gather\" class=\"headerlink\" title=\"tf.gather()\"></a>tf.gather()</h2><p>函数签名如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tf.gather(</span><br><span class=\"line\">    params,</span><br><span class=\"line\">    indices,</span><br><span class=\"line\">    validate_indices=<span class=\"keyword\">None</span>,</span><br><span class=\"line\">    name=<span class=\"keyword\">None</span></span><br></pre></td></tr></table></figure></p>\n<p>参数说明：</p>\n<ul>\n<li>params是一个tensor，</li>\n<li>indices是个值为int的tensor用来指定要从params取得元素的第0维的index。</li>\n</ul>\n<p>该函数可看成是tf.nn.embedding_lookup()的特殊形式，所以功能与其类似，即将其看成是embedding_lookup函数的params参数内只有一个tensor时的情形。</p>\n<h2 id=\"tf-nn-embedding-lookup-sparse\"><a href=\"#tf-nn-embedding-lookup-sparse\" class=\"headerlink\" title=\"tf.nn.embedding_lookup_sparse\"></a>tf.nn.embedding_lookup_sparse</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tf.nn.embedding_lookup_sparse(</span><br><span class=\"line\">    params,</span><br><span class=\"line\">    sp_ids,</span><br><span class=\"line\">    sp_weights,</span><br><span class=\"line\">    partition_strategy=<span class=\"string\">'mod'</span>,</span><br><span class=\"line\">    name=<span class=\"keyword\">None</span>,</span><br><span class=\"line\">    combiner=<span class=\"keyword\">None</span>,</span><br><span class=\"line\">    max_norm=<span class=\"keyword\">None</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p>见官网\bAPI，不贴了：<a href=\"https://www.tensorflow.org/api_docs/python/tf/nn/embedding_lookup_sparse\" target=\"_blank\" rel=\"noopener\">python API</a></p>\n<ul>\n<li>params: A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors. Alternatively, a PartitionedVariable, created by partitioning along dimension 0. Each element must be appropriately sized for the given partition_strategy.</li>\n</ul>\n<p>Returns:<br>A dense tensor representing the combined embeddings for the sparse ids. For each row in the dense tensor represented by sp_ids, the op looks up the embeddings for all ids in that row, multiplies them by the corresponding weight, and combines these embeddings as specified.</p>\n<p>In other words, if</p>\n<ul>\n<li>shape(combined params) = [p0, p1, …, pm]</li>\n</ul>\n<p>and</p>\n<ul>\n<li>shape(sp_ids) = shape(sp_weights) = [d0, d1, …, dn]</li>\n</ul>\n<p>then</p>\n<ul>\n<li>shape(output) = [d0, d1, …, dn-1, p1, …, pm].</li>\n</ul>\n<p>For instance, if params is a 10x20 matrix, and sp_ids / sp_weights are</p>\n<p>[0, 0]: id 1, weight 2.0 [0, 1]: id 3, weight 0.5 [1, 0]: id 0, weight 1.0 [2, 3]: id 1, weight 3.0</p>\n<p>with combiner=”mean”, then the output will be a 3x20 matrix where</p>\n<p>output[0, :] = (params[1, :] <em> 2.0 + params[3, :] </em> 0.5) / (2.0 + 0.5) output[1, :] = (params[0, :] <em> 1.0) / 1.0 output[2, :] = (params[1, :] </em> 3.0) / 3.0</p>\n<h3 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.arange(<span class=\"number\">8</span>).reshape(<span class=\"number\">2</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">b = np.arange(<span class=\"number\">8</span>, <span class=\"number\">16</span>).reshape(<span class=\"number\">2</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">c = np.arange(<span class=\"number\">12</span>, <span class=\"number\">20</span>).reshape(<span class=\"number\">2</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"a :\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (a)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"b :\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (b)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"c :\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (c)</span><br><span class=\"line\">a = tf.Variable(a, dtype=tf.float32)</span><br><span class=\"line\">b = tf.Variable(b, dtype=tf.float32)</span><br><span class=\"line\">c = tf.Variable(c, dtype=tf.float32)</span><br><span class=\"line\">idx = tf.SparseTensor(indices=[[<span class=\"number\">0</span>,<span class=\"number\">0</span>], [<span class=\"number\">0</span>,<span class=\"number\">2</span>], [<span class=\"number\">1</span>,<span class=\"number\">0</span>], [<span class=\"number\">1</span>, <span class=\"number\">1</span>]], values=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>], dense_shape=(<span class=\"number\">2</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">result = tf.nn.embedding_lookup_sparse([a,c,b], idx, <span class=\"keyword\">None</span>, partition_strategy=<span class=\"string\">'mod'</span>, combiner=<span class=\"string\">\"sum\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">init = tf.global_variables_initializer()</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    sess.run(init)</span><br><span class=\"line\">    res = sess.run(result)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"\\n# result here\"</span>)</span><br><span class=\"line\">    print(res)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># a :</span></span><br><span class=\"line\"><span class=\"comment\"># [[0 1 2 3]    id 0</span></span><br><span class=\"line\"><span class=\"comment\">#  [4 5 6 7]]   id 3</span></span><br><span class=\"line\"><span class=\"comment\"># b :</span></span><br><span class=\"line\"><span class=\"comment\"># [[ 8  9 10 11]  id 1</span></span><br><span class=\"line\"><span class=\"comment\">#  [12 13 14 15]] id 4</span></span><br><span class=\"line\"><span class=\"comment\"># c :</span></span><br><span class=\"line\"><span class=\"comment\"># [[16 17 18 19] id 2</span></span><br><span class=\"line\"><span class=\"comment\">#  [20 21 22 23]] id 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># result here</span></span><br><span class=\"line\"><span class=\"comment\"># [[24. 26. 28. 30.]  </span></span><br><span class=\"line\"><span class=\"comment\">#  [16. 18. 20. 22.]]</span></span><br></pre></td></tr></table></figure>\n<p>解释：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#idx = tf.SparseTensor(indices=[[0,0], [0,2], [1,0], [1, 1]], values=[1,2,2,0], dense_shape=(2,3))</span></span><br><span class=\"line\">构造如下稀疏向量矩阵，每一行视为一个样本的特征向量</span><br><span class=\"line\">[</span><br><span class=\"line\">    [[<span class=\"number\">1</span>], [], [<span class=\"number\">2</span>]],</span><br><span class=\"line\">    [[<span class=\"number\">2</span>], [<span class=\"number\">0</span>], []]</span><br><span class=\"line\">]</span><br><span class=\"line\">以第一个样本 [[<span class=\"number\">1</span>], [], [<span class=\"number\">2</span>]] 为例：选择id <span class=\"number\">1</span> 和id <span class=\"number\">2</span>：</span><br><span class=\"line\"><span class=\"comment\"># [[ 8  9 10 11]  id 1</span></span><br><span class=\"line\"><span class=\"comment\"># [[16 17 18 19] id 2</span></span><br><span class=\"line\">根据 combiner=<span class=\"string\">\"sum\"</span> ，把上面两个向量 按 axis=<span class=\"number\">0</span> 加到一起，得到：</span><br><span class=\"line\"><span class=\"comment\"># [24. 26. 28. 30.]</span></span><br><span class=\"line\">即 为第一个样本的 dense 向量</span><br></pre></td></tr></table></figure></p>\n<p>如果len(params) == 1, 就是不存在 partition 了，比较好理解，不再赘述。</p>\n<p>喝最烈的果粒橙，钻最深的牛角尖。<br>end.</p>\n"},{"title":"tensorflow中损失函数加正则项","date":"2018-06-03T08:01:26.000Z","_content":"\n# 概述\n\n在损失函数上加上正则项（结构风险最小化）是防止过拟合的一个重要方法,下面介绍如何在TensorFlow中使用正则项.\n\ntensorflow中对参数使用正则项分为两步: \n\n1. 创建一个正则方法(函数/对象) \n2. 将这个正则方法(函数/对象),应用到参数上\n\n# 创建正则项\n\n## l1 正则\n\n`tf.contrib.layers.l1_regularizer(scale, scope=None)`\n\n返回一个用来执行L1正则化的函数,函数的签名是func(weights). \n参数:\n\n- scale: 正则项的系数.\n- scope: 可选的scope name\n\n## l2 正则\n`tf.contrib.layers.l2_regularizer(scale, scope=None)`\n\n返回一个执行L2正则化的函数.\n\n## 多正则\n\n`tf.contrib.layers.sum_regularizer(regularizer_list, scope=None)`\n\n返回一个可以执行多种(个)正则化的函数.意思是,创建一个正则化方法,这个方法是多个正则化方法的混合体.\n\n参数: \n- regularizer_list: regulizer的列表\n\n# 应用正则方法\n\n`tf.contrib.layers.apply_regularization(regularizer, weights_list=None)`\n\n参数\n\n- regularizer:就是我们上一步创建的正则化方法\n- weights_list: 想要执行正则化方法的参数列表,如果为None的话,就取GraphKeys.WEIGHTS中的weights.\n\n函数返回一个标量Tensor,同时,这个标量Tensor也会保存到GraphKeys.REGULARIZATION_LOSSES中.这个Tensor保存了计算正则项损失的方法.\n\n现在,我们只需将这个正则项损失加到我们的损失函数上就可以了.\n\n> 如果是自己手动定义weight的话,需要手动将weight保存到GraphKeys.WEIGHTS中,但是如果使用layer的话,就不用这么麻烦了,别人已经帮你考虑好了.(最好自己验证一下tf.GraphKeys.WEIGHTS中是否包含了所有的weights,防止被坑)\n\n# 其它\n\n在使用tf.get_variable()和tf.variable_scope()的时候,你会发现,它们俩中有regularizer形参.如果传入这个参数的话,那么variable_scope内的weights的正则化损失,或者weights的正则化损失就会被添加到GraphKeys.REGULARIZATION_LOSSES中. \n示例:\n\n``` python\nimport tensorflow as tf\nfrom tensorflow.contrib import layers\n\nregularizer = layers.l1_regularizer(0.1)\n\nwith tf.variable_scope('var', initializer=tf.random_normal_initializer(), \nregularizer=regularizer):\n    weight = tf.get_variable('weight', shape=[8], initializer=tf.ones_initializer())\nwith tf.variable_scope('var2', initializer=tf.random_normal_initializer(), \nregularizer=regularizer):\n    weight2 = tf.get_variable('weight', shape=[8], initializer=tf.ones_initializer())\n\nregularization_loss = tf.reduce_sum(tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES))\n```","source":"_posts/201806-tensorflow-loss-and-regularizer.md","raw":"---\ntitle: tensorflow中损失函数加正则项\ndate: 2018-06-03 16:01:26\ntags:\n---\n\n# 概述\n\n在损失函数上加上正则项（结构风险最小化）是防止过拟合的一个重要方法,下面介绍如何在TensorFlow中使用正则项.\n\ntensorflow中对参数使用正则项分为两步: \n\n1. 创建一个正则方法(函数/对象) \n2. 将这个正则方法(函数/对象),应用到参数上\n\n# 创建正则项\n\n## l1 正则\n\n`tf.contrib.layers.l1_regularizer(scale, scope=None)`\n\n返回一个用来执行L1正则化的函数,函数的签名是func(weights). \n参数:\n\n- scale: 正则项的系数.\n- scope: 可选的scope name\n\n## l2 正则\n`tf.contrib.layers.l2_regularizer(scale, scope=None)`\n\n返回一个执行L2正则化的函数.\n\n## 多正则\n\n`tf.contrib.layers.sum_regularizer(regularizer_list, scope=None)`\n\n返回一个可以执行多种(个)正则化的函数.意思是,创建一个正则化方法,这个方法是多个正则化方法的混合体.\n\n参数: \n- regularizer_list: regulizer的列表\n\n# 应用正则方法\n\n`tf.contrib.layers.apply_regularization(regularizer, weights_list=None)`\n\n参数\n\n- regularizer:就是我们上一步创建的正则化方法\n- weights_list: 想要执行正则化方法的参数列表,如果为None的话,就取GraphKeys.WEIGHTS中的weights.\n\n函数返回一个标量Tensor,同时,这个标量Tensor也会保存到GraphKeys.REGULARIZATION_LOSSES中.这个Tensor保存了计算正则项损失的方法.\n\n现在,我们只需将这个正则项损失加到我们的损失函数上就可以了.\n\n> 如果是自己手动定义weight的话,需要手动将weight保存到GraphKeys.WEIGHTS中,但是如果使用layer的话,就不用这么麻烦了,别人已经帮你考虑好了.(最好自己验证一下tf.GraphKeys.WEIGHTS中是否包含了所有的weights,防止被坑)\n\n# 其它\n\n在使用tf.get_variable()和tf.variable_scope()的时候,你会发现,它们俩中有regularizer形参.如果传入这个参数的话,那么variable_scope内的weights的正则化损失,或者weights的正则化损失就会被添加到GraphKeys.REGULARIZATION_LOSSES中. \n示例:\n\n``` python\nimport tensorflow as tf\nfrom tensorflow.contrib import layers\n\nregularizer = layers.l1_regularizer(0.1)\n\nwith tf.variable_scope('var', initializer=tf.random_normal_initializer(), \nregularizer=regularizer):\n    weight = tf.get_variable('weight', shape=[8], initializer=tf.ones_initializer())\nwith tf.variable_scope('var2', initializer=tf.random_normal_initializer(), \nregularizer=regularizer):\n    weight2 = tf.get_variable('weight', shape=[8], initializer=tf.ones_initializer())\n\nregularization_loss = tf.reduce_sum(tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES))\n```","slug":"tensorflow-loss-and-regularizer","published":1,"updated":"2018-06-03T08:09:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjidbf1qk000jry1dc0523u35","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>在损失函数上加上正则项（结构风险最小化）是防止过拟合的一个重要方法,下面介绍如何在TensorFlow中使用正则项.</p>\n<p>tensorflow中对参数使用正则项分为两步: </p>\n<ol>\n<li>创建一个正则方法(函数/对象) </li>\n<li>将这个正则方法(函数/对象),应用到参数上</li>\n</ol>\n<h1 id=\"创建正则项\"><a href=\"#创建正则项\" class=\"headerlink\" title=\"创建正则项\"></a>创建正则项</h1><h2 id=\"l1-正则\"><a href=\"#l1-正则\" class=\"headerlink\" title=\"l1 正则\"></a>l1 正则</h2><p><code>tf.contrib.layers.l1_regularizer(scale, scope=None)</code></p>\n<p>返回一个用来执行L1正则化的函数,函数的签名是func(weights).<br>参数:</p>\n<ul>\n<li>scale: 正则项的系数.</li>\n<li>scope: 可选的scope name</li>\n</ul>\n<h2 id=\"l2-正则\"><a href=\"#l2-正则\" class=\"headerlink\" title=\"l2 正则\"></a>l2 正则</h2><p><code>tf.contrib.layers.l2_regularizer(scale, scope=None)</code></p>\n<p>返回一个执行L2正则化的函数.</p>\n<h2 id=\"多正则\"><a href=\"#多正则\" class=\"headerlink\" title=\"多正则\"></a>多正则</h2><p><code>tf.contrib.layers.sum_regularizer(regularizer_list, scope=None)</code></p>\n<p>返回一个可以执行多种(个)正则化的函数.意思是,创建一个正则化方法,这个方法是多个正则化方法的混合体.</p>\n<p>参数: </p>\n<ul>\n<li>regularizer_list: regulizer的列表</li>\n</ul>\n<h1 id=\"应用正则方法\"><a href=\"#应用正则方法\" class=\"headerlink\" title=\"应用正则方法\"></a>应用正则方法</h1><p><code>tf.contrib.layers.apply_regularization(regularizer, weights_list=None)</code></p>\n<p>参数</p>\n<ul>\n<li>regularizer:就是我们上一步创建的正则化方法</li>\n<li>weights_list: 想要执行正则化方法的参数列表,如果为None的话,就取GraphKeys.WEIGHTS中的weights.</li>\n</ul>\n<p>函数返回一个标量Tensor,同时,这个标量Tensor也会保存到GraphKeys.REGULARIZATION_LOSSES中.这个Tensor保存了计算正则项损失的方法.</p>\n<p>现在,我们只需将这个正则项损失加到我们的损失函数上就可以了.</p>\n<blockquote>\n<p>如果是自己手动定义weight的话,需要手动将weight保存到GraphKeys.WEIGHTS中,但是如果使用layer的话,就不用这么麻烦了,别人已经帮你考虑好了.(最好自己验证一下tf.GraphKeys.WEIGHTS中是否包含了所有的weights,防止被坑)</p>\n</blockquote>\n<h1 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h1><p>在使用tf.get_variable()和tf.variable_scope()的时候,你会发现,它们俩中有regularizer形参.如果传入这个参数的话,那么variable_scope内的weights的正则化损失,或者weights的正则化损失就会被添加到GraphKeys.REGULARIZATION_LOSSES中.<br>示例:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.contrib <span class=\"keyword\">import</span> layers</span><br><span class=\"line\"></span><br><span class=\"line\">regularizer = layers.l1_regularizer(<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.variable_scope(<span class=\"string\">'var'</span>, initializer=tf.random_normal_initializer(), </span><br><span class=\"line\">regularizer=regularizer):</span><br><span class=\"line\">    weight = tf.get_variable(<span class=\"string\">'weight'</span>, shape=[<span class=\"number\">8</span>], initializer=tf.ones_initializer())</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.variable_scope(<span class=\"string\">'var2'</span>, initializer=tf.random_normal_initializer(), </span><br><span class=\"line\">regularizer=regularizer):</span><br><span class=\"line\">    weight2 = tf.get_variable(<span class=\"string\">'weight'</span>, shape=[<span class=\"number\">8</span>], initializer=tf.ones_initializer())</span><br><span class=\"line\"></span><br><span class=\"line\">regularization_loss = tf.reduce_sum(tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES))</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>在损失函数上加上正则项（结构风险最小化）是防止过拟合的一个重要方法,下面介绍如何在TensorFlow中使用正则项.</p>\n<p>tensorflow中对参数使用正则项分为两步: </p>\n<ol>\n<li>创建一个正则方法(函数/对象) </li>\n<li>将这个正则方法(函数/对象),应用到参数上</li>\n</ol>\n<h1 id=\"创建正则项\"><a href=\"#创建正则项\" class=\"headerlink\" title=\"创建正则项\"></a>创建正则项</h1><h2 id=\"l1-正则\"><a href=\"#l1-正则\" class=\"headerlink\" title=\"l1 正则\"></a>l1 正则</h2><p><code>tf.contrib.layers.l1_regularizer(scale, scope=None)</code></p>\n<p>返回一个用来执行L1正则化的函数,函数的签名是func(weights).<br>参数:</p>\n<ul>\n<li>scale: 正则项的系数.</li>\n<li>scope: 可选的scope name</li>\n</ul>\n<h2 id=\"l2-正则\"><a href=\"#l2-正则\" class=\"headerlink\" title=\"l2 正则\"></a>l2 正则</h2><p><code>tf.contrib.layers.l2_regularizer(scale, scope=None)</code></p>\n<p>返回一个执行L2正则化的函数.</p>\n<h2 id=\"多正则\"><a href=\"#多正则\" class=\"headerlink\" title=\"多正则\"></a>多正则</h2><p><code>tf.contrib.layers.sum_regularizer(regularizer_list, scope=None)</code></p>\n<p>返回一个可以执行多种(个)正则化的函数.意思是,创建一个正则化方法,这个方法是多个正则化方法的混合体.</p>\n<p>参数: </p>\n<ul>\n<li>regularizer_list: regulizer的列表</li>\n</ul>\n<h1 id=\"应用正则方法\"><a href=\"#应用正则方法\" class=\"headerlink\" title=\"应用正则方法\"></a>应用正则方法</h1><p><code>tf.contrib.layers.apply_regularization(regularizer, weights_list=None)</code></p>\n<p>参数</p>\n<ul>\n<li>regularizer:就是我们上一步创建的正则化方法</li>\n<li>weights_list: 想要执行正则化方法的参数列表,如果为None的话,就取GraphKeys.WEIGHTS中的weights.</li>\n</ul>\n<p>函数返回一个标量Tensor,同时,这个标量Tensor也会保存到GraphKeys.REGULARIZATION_LOSSES中.这个Tensor保存了计算正则项损失的方法.</p>\n<p>现在,我们只需将这个正则项损失加到我们的损失函数上就可以了.</p>\n<blockquote>\n<p>如果是自己手动定义weight的话,需要手动将weight保存到GraphKeys.WEIGHTS中,但是如果使用layer的话,就不用这么麻烦了,别人已经帮你考虑好了.(最好自己验证一下tf.GraphKeys.WEIGHTS中是否包含了所有的weights,防止被坑)</p>\n</blockquote>\n<h1 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h1><p>在使用tf.get_variable()和tf.variable_scope()的时候,你会发现,它们俩中有regularizer形参.如果传入这个参数的话,那么variable_scope内的weights的正则化损失,或者weights的正则化损失就会被添加到GraphKeys.REGULARIZATION_LOSSES中.<br>示例:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.contrib <span class=\"keyword\">import</span> layers</span><br><span class=\"line\"></span><br><span class=\"line\">regularizer = layers.l1_regularizer(<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.variable_scope(<span class=\"string\">'var'</span>, initializer=tf.random_normal_initializer(), </span><br><span class=\"line\">regularizer=regularizer):</span><br><span class=\"line\">    weight = tf.get_variable(<span class=\"string\">'weight'</span>, shape=[<span class=\"number\">8</span>], initializer=tf.ones_initializer())</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.variable_scope(<span class=\"string\">'var2'</span>, initializer=tf.random_normal_initializer(), </span><br><span class=\"line\">regularizer=regularizer):</span><br><span class=\"line\">    weight2 = tf.get_variable(<span class=\"string\">'weight'</span>, shape=[<span class=\"number\">8</span>], initializer=tf.ones_initializer())</span><br><span class=\"line\"></span><br><span class=\"line\">regularization_loss = tf.reduce_sum(tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES))</span><br></pre></td></tr></table></figure>"},{"title":"vscode 快捷键 MAC版","date":"2018-06-13T15:49:14.000Z","_content":"\n# 常用 General\n\n| 按 Press             | 功能 Function |\n| -------------------- | ------------- |\n| command + Shift + P，F1 | 显示命令面板  |\n| command + P             | 快速打开      |\n| command + Shift + N     | 新窗口/实例   |\n| command + Shift + W     | 关闭窗口/实例 |\n\n#基础编辑 Basic editing\n\n| 按 Press          | 功能 Function            |\n| ----------------- | ------------------------ |\n| Ctrl+X            | 剪切行（空选定）         |\n| Ctrl+C            | 复制行（空选定）         |\n| Alt+ ↑ / ↓        | 向上/向下移动行          |\n| Shift+Alt + ↓ / ↑ | 向上/向下复制行          |\n| Ctrl+Shift+K      | 删除行                   |\n| Ctrl+Enter        | 在下面插入行             |\n| Ctrl+Shift+Enter  | 在上面插入行             |\n| Ctrl+Shift+\\      | 跳到匹配的括号           |\n| Ctrl+] / [        | 缩进/缩进行              |\n| Home              | 转到行首                 |\n| End               | 转到行尾                 |\n| Ctrl+Home         | 转到文件开头             |\n| Ctrl+End          | 转到文件末尾             |\n| Ctrl+↑ / ↓        | 向上/向下滚动行          |\n| Alt+PgUp / PgDown | 向上/向下滚动页面        |\n| Ctrl+Shift+[      | 折叠（折叠）区域         |\n| Ctrl+Shift+]      | 展开（未折叠）区域       |\n| Ctrl+K Ctrl+[     | 折叠（未折叠）所有子区域 |\n| Ctrl+K Ctrl+]     | 展开（未折叠）所有子区域 |\n| Ctrl+K Ctrl+0     | 折叠（折叠）所有区域     |\n| Ctrl+K Ctrl+J     | 展开（未折叠）所有区域   |\n| Ctrl+K Ctrl+C     | 添加行注释               |\n| Ctrl+K Ctrl+U     | 删除行注释               |\n| Ctrl+/            | 切换行注释               |\n| Shift+Alt+A       | 切换块注释               |\n| Alt+Z             | 切换换行                 |\n\n# 导航 \n\n| 按 Press           | 功能 Function        |\n| ------------------ | -------------------- |\n| Ctrl + T           | 显示所有符号         |\n| Ctrl + G           | 转到行...            |\n| Ctrl + P           | 转到文件...          |\n| Ctrl + Shift + O   | 转到符号...          |\n| Ctrl + Shift + M   | 显示问题面板         |\n| F8                 | 转到下一个错误或警告 |\n| Shift + F8         | 转到上一个错误或警告 |\n| Ctrl + Shift + Tab | 导航编辑器组历史记录 |\nAlt + ←/→\t返回/前进 Go back / forward\nCtrl + M\t切换选项卡移动焦点 Toggle Tab moves focus\n\n# 搜索和替换 Search and replace\n\n| 按 Press          | 功能 Function                      |\n| ----------------- | ---------------------------------- |\n| Ctrl + F          | 查找                               |\n| Ctrl + H          | 替换                               |\n| F3 / Shift + F3   | 查找下一个/上一个                  |\n| Alt + Enter       | 选择查找匹配的所有出现             |\n| Ctrl + D          | 将选择添加到下一个查找匹配         |\n| Ctrl + K Ctrl + D | 将最后一个选择移至下一个查找匹配项 |\n| Alt + C / R / W   | 切换区分大小写/正则表达式/整个词   |\n\n# 多光标和选择 Multi-cursor and selection\n| 按 Press                           | 功能                         |\n| ---------------------------------- | ---------------------------- |\n| Alt +单击                          | 插入光标                     |\n| Ctrl + Alt +↑/↓                    | 在上/下插入光标              |\n| Ctrl + U                           | 撤消上一个光标操作           |\n| Shift + Alt + I                    | 在选定的每一行的末尾插入光标 |\n| Ctrl + I                           | 选择当前行                   |\n| Ctrl + Shift + L                   | 选择当前选择的所有出现       |\n| Ctrl + F2                          | 选择当前字的所有出现         |\n| Shift + Alt + →                    | 展开选择                     |\n| Shift + Alt + ←                    | 缩小选择                     |\n| Shift + Alt + （拖动鼠标）         | 列（框）选择                 |\n| Ctrl + Shift + Alt +（箭头键）     | 列（框）选择                 |\n| Ctrl + Shift + Alt + PgUp / PgDown | 列（框）选择页上/下          |\n\n# 丰富的语言编辑 \n\n| 按 Press             | 功能 Function         |\n| -------------------- | --------------------- |\n| Ctrl + 空格          | 触发建议              |\n| Ctrl + Shift + Space | 触发器参数提示        |\n| Tab\tEmmet            | 展开缩写              |\n| Shift + Alt + F      | 格式化文档            |\n| Ctrl + K Ctrl + F    | 格式选定区域          |\n| F12                  | 转到定义              |\n| Alt + F12            | Peek定义              |\n| Ctrl + K F12         | 打开定义到边          |\n| Ctrl + .             | 快速解决              |\n| Shift + F12          | 显示引用              |\n| F2                   | 重命名符号            |\n| Ctrl + Shift + . /， | 替换为下一个/上一个值 |\n| Ctrl + K Ctrl + X    | 修剪尾随空格          |\n| Ctrl + K M           | 更改文件语言          |\n\n# 编辑器管理 Editor management\n\n| 按 Press                 | 功能 Function               |\n| ------------------------ | --------------------------- |\n| Ctrl+F4, Ctrl+W          | 关闭编辑器                  |\n| Ctrl+K F                 | 关闭文件夹                  |\n| Ctrl+\\|\t拆分编辑器       |\n| Ctrl+ 1 / 2 / 3          | 聚焦到第1，第2或第3编辑器组 |\n| Ctrl+K Ctrl+ ←/→         | 聚焦到上一个/下一个编辑器组 |\n| Ctrl+Shift+PgUp / PgDown | 向左/向右移动编辑器         |\n| Ctrl+K ← / →             | 移动活动编辑器组            |\n\n# 文件管理 File management\n\n| 按 Press       | 功能 Function                                |\n| -------------- | -------------------------------------------- |\n| Ctrl+N         | 新文件                                       |\n| Ctrl+O         | 打开文件...                                  |\n| Ctrl+S         | 保存                                         |\n| Ctrl+Shift+S   | 另存为...                                    |\n| Ctrl+K S       | 全部保存                                     |\n| Ctrl+F4        | 关闭                                         |\n| Ctrl+K Ctrl+W  | 关闭所有                                     |\n| Ctrl+Shift+T   | 重新打开关闭的编辑器                         |\n| Ctrl+K         | 输入保持打开                                 |\n| Ctrl+Tab       | 打开下一个                                   |\n| Ctrl+Shift+Tab | 打开上一个                                   |\n| Ctrl+K P       | 复制活动文件的路径                           |\n| Ctrl+K R       | 显示资源管理器中的活动文件                   |\n| Ctrl+K O       | 显示新窗口/实例中的活动文件   |\n\n# 显示 Display\n\n| 按 Press     | 功能 Function          |\n| ------------ | ---------------------- |\n| F11          | 切换全屏               |\n| Shift+Alt+1  | 切换编辑器布局         |\n| Ctrl+ = / -  | 放大/缩小              |n\n| Ctrl+B       | 切换侧栏可见性         |\n| Ctrl+Shift+E | 显示浏览器/切换焦点    |\n| Ctrl+Shift+F | 显示搜索               |\n| Ctrl+Shift+G | 显示Git                |\n| Ctrl+Shift+D | 显示调试               |\n| Ctrl+Shift+X | 显示扩展               |\n| Ctrl+Shift+H | 替换文件               |\n| Ctrl+Shift+J | 切换搜索详细信息       |\n| Ctrl+Shift+C | 打开新命令提示符/终端  |\n| Ctrl+Shift+U | 显示输出面板           |\n| Ctrl+Shift+V | 切换Markdown预览       |\n| Ctrl+K V     | 从旁边打开Markdown预览 |\n\n# 调试 Debug\n\n| 按 Press        | 功能 Function |\n| --------------- | ------------- |\n| F9              | 切换断点      |\n| F5              | 开始/继续     |\n| Shift+F5        | 停止          |\n| F11 / Shift+F11 | 下一步/上一步 |\n| F10             | 跳过          |\n| Ctrl+K Ctrl+I   | 显示悬停      |\n\n# 集成终端 Integrated terminal\n| 按 Press            | 功能 Function     |\n| ------------------- | ----------------- |\n| Ctrl+`              | 显示集成终端      |\n| Ctrl+Shift+`        | 创建新终端        |\n| Ctrl+Shift+C        | 复制选定          |\n| Ctrl+Shift+V        | 粘贴到活动端子    |\n| Ctrl+↑ / ↓          | 向上/向下滚动     |\n| Shift+PgUp / PgDown | 向上/向下滚动页面 |\n| Ctrl+Home / End     | 滚动到顶部/底部   |\n","source":"_posts/201806-vscode-shortcuts.md","raw":"---\ntitle: vscode 快捷键 MAC版 \ndate: 2018-06-13 23:49:14\ntags: vscode shortcut mac os\n---\n\n# 常用 General\n\n| 按 Press             | 功能 Function |\n| -------------------- | ------------- |\n| command + Shift + P，F1 | 显示命令面板  |\n| command + P             | 快速打开      |\n| command + Shift + N     | 新窗口/实例   |\n| command + Shift + W     | 关闭窗口/实例 |\n\n#基础编辑 Basic editing\n\n| 按 Press          | 功能 Function            |\n| ----------------- | ------------------------ |\n| Ctrl+X            | 剪切行（空选定）         |\n| Ctrl+C            | 复制行（空选定）         |\n| Alt+ ↑ / ↓        | 向上/向下移动行          |\n| Shift+Alt + ↓ / ↑ | 向上/向下复制行          |\n| Ctrl+Shift+K      | 删除行                   |\n| Ctrl+Enter        | 在下面插入行             |\n| Ctrl+Shift+Enter  | 在上面插入行             |\n| Ctrl+Shift+\\      | 跳到匹配的括号           |\n| Ctrl+] / [        | 缩进/缩进行              |\n| Home              | 转到行首                 |\n| End               | 转到行尾                 |\n| Ctrl+Home         | 转到文件开头             |\n| Ctrl+End          | 转到文件末尾             |\n| Ctrl+↑ / ↓        | 向上/向下滚动行          |\n| Alt+PgUp / PgDown | 向上/向下滚动页面        |\n| Ctrl+Shift+[      | 折叠（折叠）区域         |\n| Ctrl+Shift+]      | 展开（未折叠）区域       |\n| Ctrl+K Ctrl+[     | 折叠（未折叠）所有子区域 |\n| Ctrl+K Ctrl+]     | 展开（未折叠）所有子区域 |\n| Ctrl+K Ctrl+0     | 折叠（折叠）所有区域     |\n| Ctrl+K Ctrl+J     | 展开（未折叠）所有区域   |\n| Ctrl+K Ctrl+C     | 添加行注释               |\n| Ctrl+K Ctrl+U     | 删除行注释               |\n| Ctrl+/            | 切换行注释               |\n| Shift+Alt+A       | 切换块注释               |\n| Alt+Z             | 切换换行                 |\n\n# 导航 \n\n| 按 Press           | 功能 Function        |\n| ------------------ | -------------------- |\n| Ctrl + T           | 显示所有符号         |\n| Ctrl + G           | 转到行...            |\n| Ctrl + P           | 转到文件...          |\n| Ctrl + Shift + O   | 转到符号...          |\n| Ctrl + Shift + M   | 显示问题面板         |\n| F8                 | 转到下一个错误或警告 |\n| Shift + F8         | 转到上一个错误或警告 |\n| Ctrl + Shift + Tab | 导航编辑器组历史记录 |\nAlt + ←/→\t返回/前进 Go back / forward\nCtrl + M\t切换选项卡移动焦点 Toggle Tab moves focus\n\n# 搜索和替换 Search and replace\n\n| 按 Press          | 功能 Function                      |\n| ----------------- | ---------------------------------- |\n| Ctrl + F          | 查找                               |\n| Ctrl + H          | 替换                               |\n| F3 / Shift + F3   | 查找下一个/上一个                  |\n| Alt + Enter       | 选择查找匹配的所有出现             |\n| Ctrl + D          | 将选择添加到下一个查找匹配         |\n| Ctrl + K Ctrl + D | 将最后一个选择移至下一个查找匹配项 |\n| Alt + C / R / W   | 切换区分大小写/正则表达式/整个词   |\n\n# 多光标和选择 Multi-cursor and selection\n| 按 Press                           | 功能                         |\n| ---------------------------------- | ---------------------------- |\n| Alt +单击                          | 插入光标                     |\n| Ctrl + Alt +↑/↓                    | 在上/下插入光标              |\n| Ctrl + U                           | 撤消上一个光标操作           |\n| Shift + Alt + I                    | 在选定的每一行的末尾插入光标 |\n| Ctrl + I                           | 选择当前行                   |\n| Ctrl + Shift + L                   | 选择当前选择的所有出现       |\n| Ctrl + F2                          | 选择当前字的所有出现         |\n| Shift + Alt + →                    | 展开选择                     |\n| Shift + Alt + ←                    | 缩小选择                     |\n| Shift + Alt + （拖动鼠标）         | 列（框）选择                 |\n| Ctrl + Shift + Alt +（箭头键）     | 列（框）选择                 |\n| Ctrl + Shift + Alt + PgUp / PgDown | 列（框）选择页上/下          |\n\n# 丰富的语言编辑 \n\n| 按 Press             | 功能 Function         |\n| -------------------- | --------------------- |\n| Ctrl + 空格          | 触发建议              |\n| Ctrl + Shift + Space | 触发器参数提示        |\n| Tab\tEmmet            | 展开缩写              |\n| Shift + Alt + F      | 格式化文档            |\n| Ctrl + K Ctrl + F    | 格式选定区域          |\n| F12                  | 转到定义              |\n| Alt + F12            | Peek定义              |\n| Ctrl + K F12         | 打开定义到边          |\n| Ctrl + .             | 快速解决              |\n| Shift + F12          | 显示引用              |\n| F2                   | 重命名符号            |\n| Ctrl + Shift + . /， | 替换为下一个/上一个值 |\n| Ctrl + K Ctrl + X    | 修剪尾随空格          |\n| Ctrl + K M           | 更改文件语言          |\n\n# 编辑器管理 Editor management\n\n| 按 Press                 | 功能 Function               |\n| ------------------------ | --------------------------- |\n| Ctrl+F4, Ctrl+W          | 关闭编辑器                  |\n| Ctrl+K F                 | 关闭文件夹                  |\n| Ctrl+\\|\t拆分编辑器       |\n| Ctrl+ 1 / 2 / 3          | 聚焦到第1，第2或第3编辑器组 |\n| Ctrl+K Ctrl+ ←/→         | 聚焦到上一个/下一个编辑器组 |\n| Ctrl+Shift+PgUp / PgDown | 向左/向右移动编辑器         |\n| Ctrl+K ← / →             | 移动活动编辑器组            |\n\n# 文件管理 File management\n\n| 按 Press       | 功能 Function                                |\n| -------------- | -------------------------------------------- |\n| Ctrl+N         | 新文件                                       |\n| Ctrl+O         | 打开文件...                                  |\n| Ctrl+S         | 保存                                         |\n| Ctrl+Shift+S   | 另存为...                                    |\n| Ctrl+K S       | 全部保存                                     |\n| Ctrl+F4        | 关闭                                         |\n| Ctrl+K Ctrl+W  | 关闭所有                                     |\n| Ctrl+Shift+T   | 重新打开关闭的编辑器                         |\n| Ctrl+K         | 输入保持打开                                 |\n| Ctrl+Tab       | 打开下一个                                   |\n| Ctrl+Shift+Tab | 打开上一个                                   |\n| Ctrl+K P       | 复制活动文件的路径                           |\n| Ctrl+K R       | 显示资源管理器中的活动文件                   |\n| Ctrl+K O       | 显示新窗口/实例中的活动文件   |\n\n# 显示 Display\n\n| 按 Press     | 功能 Function          |\n| ------------ | ---------------------- |\n| F11          | 切换全屏               |\n| Shift+Alt+1  | 切换编辑器布局         |\n| Ctrl+ = / -  | 放大/缩小              |n\n| Ctrl+B       | 切换侧栏可见性         |\n| Ctrl+Shift+E | 显示浏览器/切换焦点    |\n| Ctrl+Shift+F | 显示搜索               |\n| Ctrl+Shift+G | 显示Git                |\n| Ctrl+Shift+D | 显示调试               |\n| Ctrl+Shift+X | 显示扩展               |\n| Ctrl+Shift+H | 替换文件               |\n| Ctrl+Shift+J | 切换搜索详细信息       |\n| Ctrl+Shift+C | 打开新命令提示符/终端  |\n| Ctrl+Shift+U | 显示输出面板           |\n| Ctrl+Shift+V | 切换Markdown预览       |\n| Ctrl+K V     | 从旁边打开Markdown预览 |\n\n# 调试 Debug\n\n| 按 Press        | 功能 Function |\n| --------------- | ------------- |\n| F9              | 切换断点      |\n| F5              | 开始/继续     |\n| Shift+F5        | 停止          |\n| F11 / Shift+F11 | 下一步/上一步 |\n| F10             | 跳过          |\n| Ctrl+K Ctrl+I   | 显示悬停      |\n\n# 集成终端 Integrated terminal\n| 按 Press            | 功能 Function     |\n| ------------------- | ----------------- |\n| Ctrl+`              | 显示集成终端      |\n| Ctrl+Shift+`        | 创建新终端        |\n| Ctrl+Shift+C        | 复制选定          |\n| Ctrl+Shift+V        | 粘贴到活动端子    |\n| Ctrl+↑ / ↓          | 向上/向下滚动     |\n| Shift+PgUp / PgDown | 向上/向下滚动页面 |\n| Ctrl+Home / End     | 滚动到顶部/底部   |\n","slug":"vscode-shortcuts","published":1,"updated":"2018-06-13T16:13:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjidbf1ql000lry1dbeh12wzf","content":"<h1 id=\"常用-General\"><a href=\"#常用-General\" class=\"headerlink\" title=\"常用 General\"></a>常用 General</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>按 Press</th>\n<th>功能 Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>command + Shift + P，F1</td>\n<td>显示命令面板</td>\n</tr>\n<tr>\n<td>command + P</td>\n<td>快速打开</td>\n</tr>\n<tr>\n<td>command + Shift + N</td>\n<td>新窗口/实例</td>\n</tr>\n<tr>\n<td>command + Shift + W</td>\n<td>关闭窗口/实例</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"基础编辑-Basic-editing\"><a href=\"#基础编辑-Basic-editing\" class=\"headerlink\" title=\"基础编辑 Basic editing\"></a>基础编辑 Basic editing</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>按 Press</th>\n<th>功能 Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl+X</td>\n<td>剪切行（空选定）</td>\n</tr>\n<tr>\n<td>Ctrl+C</td>\n<td>复制行（空选定）</td>\n</tr>\n<tr>\n<td>Alt+ ↑ / ↓</td>\n<td>向上/向下移动行</td>\n</tr>\n<tr>\n<td>Shift+Alt + ↓ / ↑</td>\n<td>向上/向下复制行</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+K</td>\n<td>删除行</td>\n</tr>\n<tr>\n<td>Ctrl+Enter</td>\n<td>在下面插入行</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+Enter</td>\n<td>在上面插入行</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+\\</td>\n<td>跳到匹配的括号</td>\n</tr>\n<tr>\n<td>Ctrl+] / [</td>\n<td>缩进/缩进行</td>\n</tr>\n<tr>\n<td>Home</td>\n<td>转到行首</td>\n</tr>\n<tr>\n<td>End</td>\n<td>转到行尾</td>\n</tr>\n<tr>\n<td>Ctrl+Home</td>\n<td>转到文件开头</td>\n</tr>\n<tr>\n<td>Ctrl+End</td>\n<td>转到文件末尾</td>\n</tr>\n<tr>\n<td>Ctrl+↑ / ↓</td>\n<td>向上/向下滚动行</td>\n</tr>\n<tr>\n<td>Alt+PgUp / PgDown</td>\n<td>向上/向下滚动页面</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+[</td>\n<td>折叠（折叠）区域</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+]</td>\n<td>展开（未折叠）区域</td>\n</tr>\n<tr>\n<td>Ctrl+K Ctrl+[</td>\n<td>折叠（未折叠）所有子区域</td>\n</tr>\n<tr>\n<td>Ctrl+K Ctrl+]</td>\n<td>展开（未折叠）所有子区域</td>\n</tr>\n<tr>\n<td>Ctrl+K Ctrl+0</td>\n<td>折叠（折叠）所有区域</td>\n</tr>\n<tr>\n<td>Ctrl+K Ctrl+J</td>\n<td>展开（未折叠）所有区域</td>\n</tr>\n<tr>\n<td>Ctrl+K Ctrl+C</td>\n<td>添加行注释</td>\n</tr>\n<tr>\n<td>Ctrl+K Ctrl+U</td>\n<td>删除行注释</td>\n</tr>\n<tr>\n<td>Ctrl+/</td>\n<td>切换行注释</td>\n</tr>\n<tr>\n<td>Shift+Alt+A</td>\n<td>切换块注释</td>\n</tr>\n<tr>\n<td>Alt+Z</td>\n<td>切换换行</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>按 Press</th>\n<th>功能 Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl + T</td>\n<td>显示所有符号</td>\n</tr>\n<tr>\n<td>Ctrl + G</td>\n<td>转到行…</td>\n</tr>\n<tr>\n<td>Ctrl + P</td>\n<td>转到文件…</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + O</td>\n<td>转到符号…</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + M</td>\n<td>显示问题面板</td>\n</tr>\n<tr>\n<td>F8</td>\n<td>转到下一个错误或警告</td>\n</tr>\n<tr>\n<td>Shift + F8</td>\n<td>转到上一个错误或警告</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + Tab</td>\n<td>导航编辑器组历史记录</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>Alt + ←/→    返回/前进 Go back / forward<br>Ctrl + M    切换选项卡移动焦点 Toggle Tab moves focus</p>\n<h1 id=\"搜索和替换-Search-and-replace\"><a href=\"#搜索和替换-Search-and-replace\" class=\"headerlink\" title=\"搜索和替换 Search and replace\"></a>搜索和替换 Search and replace</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>按 Press</th>\n<th>功能 Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl + F</td>\n<td>查找</td>\n</tr>\n<tr>\n<td>Ctrl + H</td>\n<td>替换</td>\n</tr>\n<tr>\n<td>F3 / Shift + F3</td>\n<td>查找下一个/上一个</td>\n</tr>\n<tr>\n<td>Alt + Enter</td>\n<td>选择查找匹配的所有出现</td>\n</tr>\n<tr>\n<td>Ctrl + D</td>\n<td>将选择添加到下一个查找匹配</td>\n</tr>\n<tr>\n<td>Ctrl + K Ctrl + D</td>\n<td>将最后一个选择移至下一个查找匹配项</td>\n</tr>\n<tr>\n<td>Alt + C / R / W</td>\n<td>切换区分大小写/正则表达式/整个词</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"多光标和选择-Multi-cursor-and-selection\"><a href=\"#多光标和选择-Multi-cursor-and-selection\" class=\"headerlink\" title=\"多光标和选择 Multi-cursor and selection\"></a>多光标和选择 Multi-cursor and selection</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>按 Press</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Alt +单击</td>\n<td>插入光标</td>\n</tr>\n<tr>\n<td>Ctrl + Alt +↑/↓</td>\n<td>在上/下插入光标</td>\n</tr>\n<tr>\n<td>Ctrl + U</td>\n<td>撤消上一个光标操作</td>\n</tr>\n<tr>\n<td>Shift + Alt + I</td>\n<td>在选定的每一行的末尾插入光标</td>\n</tr>\n<tr>\n<td>Ctrl + I</td>\n<td>选择当前行</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + L</td>\n<td>选择当前选择的所有出现</td>\n</tr>\n<tr>\n<td>Ctrl + F2</td>\n<td>选择当前字的所有出现</td>\n</tr>\n<tr>\n<td>Shift + Alt + →</td>\n<td>展开选择</td>\n</tr>\n<tr>\n<td>Shift + Alt + ←</td>\n<td>缩小选择</td>\n</tr>\n<tr>\n<td>Shift + Alt + （拖动鼠标）</td>\n<td>列（框）选择</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + Alt +（箭头键）</td>\n<td>列（框）选择</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + Alt + PgUp / PgDown</td>\n<td>列（框）选择页上/下</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"丰富的语言编辑\"><a href=\"#丰富的语言编辑\" class=\"headerlink\" title=\"丰富的语言编辑\"></a>丰富的语言编辑</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>按 Press</th>\n<th>功能 Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl + 空格</td>\n<td>触发建议</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + Space</td>\n<td>触发器参数提示</td>\n</tr>\n<tr>\n<td>Tab    Emmet</td>\n<td>展开缩写</td>\n</tr>\n<tr>\n<td>Shift + Alt + F</td>\n<td>格式化文档</td>\n</tr>\n<tr>\n<td>Ctrl + K Ctrl + F</td>\n<td>格式选定区域</td>\n</tr>\n<tr>\n<td>F12</td>\n<td>转到定义</td>\n</tr>\n<tr>\n<td>Alt + F12</td>\n<td>Peek定义</td>\n</tr>\n<tr>\n<td>Ctrl + K F12</td>\n<td>打开定义到边</td>\n</tr>\n<tr>\n<td>Ctrl + .</td>\n<td>快速解决</td>\n</tr>\n<tr>\n<td>Shift + F12</td>\n<td>显示引用</td>\n</tr>\n<tr>\n<td>F2</td>\n<td>重命名符号</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + . /，</td>\n<td>替换为下一个/上一个值</td>\n</tr>\n<tr>\n<td>Ctrl + K Ctrl + X</td>\n<td>修剪尾随空格</td>\n</tr>\n<tr>\n<td>Ctrl + K M</td>\n<td>更改文件语言</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"编辑器管理-Editor-management\"><a href=\"#编辑器管理-Editor-management\" class=\"headerlink\" title=\"编辑器管理 Editor management\"></a>编辑器管理 Editor management</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>按 Press</th>\n<th>功能 Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl+F4, Ctrl+W</td>\n<td>关闭编辑器</td>\n</tr>\n<tr>\n<td>Ctrl+K F</td>\n<td>关闭文件夹</td>\n</tr>\n<tr>\n<td>Ctrl+\\</td>\n<td>拆分编辑器</td>\n</tr>\n<tr>\n<td>Ctrl+ 1 / 2 / 3</td>\n<td>聚焦到第1，第2或第3编辑器组</td>\n</tr>\n<tr>\n<td>Ctrl+K Ctrl+ ←/→</td>\n<td>聚焦到上一个/下一个编辑器组</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+PgUp / PgDown</td>\n<td>向左/向右移动编辑器</td>\n</tr>\n<tr>\n<td>Ctrl+K ← / →</td>\n<td>移动活动编辑器组</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"文件管理-File-management\"><a href=\"#文件管理-File-management\" class=\"headerlink\" title=\"文件管理 File management\"></a>文件管理 File management</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>按 Press</th>\n<th>功能 Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl+N</td>\n<td>新文件</td>\n</tr>\n<tr>\n<td>Ctrl+O</td>\n<td>打开文件…</td>\n</tr>\n<tr>\n<td>Ctrl+S</td>\n<td>保存</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+S</td>\n<td>另存为…</td>\n</tr>\n<tr>\n<td>Ctrl+K S</td>\n<td>全部保存</td>\n</tr>\n<tr>\n<td>Ctrl+F4</td>\n<td>关闭</td>\n</tr>\n<tr>\n<td>Ctrl+K Ctrl+W</td>\n<td>关闭所有</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+T</td>\n<td>重新打开关闭的编辑器</td>\n</tr>\n<tr>\n<td>Ctrl+K</td>\n<td>输入保持打开</td>\n</tr>\n<tr>\n<td>Ctrl+Tab</td>\n<td>打开下一个</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+Tab</td>\n<td>打开上一个</td>\n</tr>\n<tr>\n<td>Ctrl+K P</td>\n<td>复制活动文件的路径</td>\n</tr>\n<tr>\n<td>Ctrl+K R</td>\n<td>显示资源管理器中的活动文件</td>\n</tr>\n<tr>\n<td>Ctrl+K O</td>\n<td>显示新窗口/实例中的活动文件</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"显示-Display\"><a href=\"#显示-Display\" class=\"headerlink\" title=\"显示 Display\"></a>显示 Display</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>按 Press</th>\n<th>功能 Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>F11</td>\n<td>切换全屏</td>\n</tr>\n<tr>\n<td>Shift+Alt+1</td>\n<td>切换编辑器布局</td>\n</tr>\n<tr>\n<td>Ctrl+ = / -</td>\n<td>放大/缩小</td>\n<td>n</td>\n</tr>\n<tr>\n<td>Ctrl+B</td>\n<td>切换侧栏可见性</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+E</td>\n<td>显示浏览器/切换焦点</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+F</td>\n<td>显示搜索</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+G</td>\n<td>显示Git</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+D</td>\n<td>显示调试</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+X</td>\n<td>显示扩展</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+H</td>\n<td>替换文件</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+J</td>\n<td>切换搜索详细信息</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+C</td>\n<td>打开新命令提示符/终端</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+U</td>\n<td>显示输出面板</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+V</td>\n<td>切换Markdown预览</td>\n</tr>\n<tr>\n<td>Ctrl+K V</td>\n<td>从旁边打开Markdown预览</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"调试-Debug\"><a href=\"#调试-Debug\" class=\"headerlink\" title=\"调试 Debug\"></a>调试 Debug</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>按 Press</th>\n<th>功能 Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>F9</td>\n<td>切换断点</td>\n</tr>\n<tr>\n<td>F5</td>\n<td>开始/继续</td>\n</tr>\n<tr>\n<td>Shift+F5</td>\n<td>停止</td>\n</tr>\n<tr>\n<td>F11 / Shift+F11</td>\n<td>下一步/上一步</td>\n</tr>\n<tr>\n<td>F10</td>\n<td>跳过</td>\n</tr>\n<tr>\n<td>Ctrl+K Ctrl+I</td>\n<td>显示悬停</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"集成终端-Integrated-terminal\"><a href=\"#集成终端-Integrated-terminal\" class=\"headerlink\" title=\"集成终端 Integrated terminal\"></a>集成终端 Integrated terminal</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>按 Press</th>\n<th>功能 Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl+`</td>\n<td>显示集成终端</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+`</td>\n<td>创建新终端</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+C</td>\n<td>复制选定</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+V</td>\n<td>粘贴到活动端子</td>\n</tr>\n<tr>\n<td>Ctrl+↑ / ↓</td>\n<td>向上/向下滚动</td>\n</tr>\n<tr>\n<td>Shift+PgUp / PgDown</td>\n<td>向上/向下滚动页面</td>\n</tr>\n<tr>\n<td>Ctrl+Home / End</td>\n<td>滚动到顶部/底部</td>\n</tr>\n</tbody>\n</table>\n</div>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"常用-General\"><a href=\"#常用-General\" class=\"headerlink\" title=\"常用 General\"></a>常用 General</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>按 Press</th>\n<th>功能 Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>command + Shift + P，F1</td>\n<td>显示命令面板</td>\n</tr>\n<tr>\n<td>command + P</td>\n<td>快速打开</td>\n</tr>\n<tr>\n<td>command + Shift + N</td>\n<td>新窗口/实例</td>\n</tr>\n<tr>\n<td>command + Shift + W</td>\n<td>关闭窗口/实例</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"基础编辑-Basic-editing\"><a href=\"#基础编辑-Basic-editing\" class=\"headerlink\" title=\"基础编辑 Basic editing\"></a>基础编辑 Basic editing</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>按 Press</th>\n<th>功能 Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl+X</td>\n<td>剪切行（空选定）</td>\n</tr>\n<tr>\n<td>Ctrl+C</td>\n<td>复制行（空选定）</td>\n</tr>\n<tr>\n<td>Alt+ ↑ / ↓</td>\n<td>向上/向下移动行</td>\n</tr>\n<tr>\n<td>Shift+Alt + ↓ / ↑</td>\n<td>向上/向下复制行</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+K</td>\n<td>删除行</td>\n</tr>\n<tr>\n<td>Ctrl+Enter</td>\n<td>在下面插入行</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+Enter</td>\n<td>在上面插入行</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+\\</td>\n<td>跳到匹配的括号</td>\n</tr>\n<tr>\n<td>Ctrl+] / [</td>\n<td>缩进/缩进行</td>\n</tr>\n<tr>\n<td>Home</td>\n<td>转到行首</td>\n</tr>\n<tr>\n<td>End</td>\n<td>转到行尾</td>\n</tr>\n<tr>\n<td>Ctrl+Home</td>\n<td>转到文件开头</td>\n</tr>\n<tr>\n<td>Ctrl+End</td>\n<td>转到文件末尾</td>\n</tr>\n<tr>\n<td>Ctrl+↑ / ↓</td>\n<td>向上/向下滚动行</td>\n</tr>\n<tr>\n<td>Alt+PgUp / PgDown</td>\n<td>向上/向下滚动页面</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+[</td>\n<td>折叠（折叠）区域</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+]</td>\n<td>展开（未折叠）区域</td>\n</tr>\n<tr>\n<td>Ctrl+K Ctrl+[</td>\n<td>折叠（未折叠）所有子区域</td>\n</tr>\n<tr>\n<td>Ctrl+K Ctrl+]</td>\n<td>展开（未折叠）所有子区域</td>\n</tr>\n<tr>\n<td>Ctrl+K Ctrl+0</td>\n<td>折叠（折叠）所有区域</td>\n</tr>\n<tr>\n<td>Ctrl+K Ctrl+J</td>\n<td>展开（未折叠）所有区域</td>\n</tr>\n<tr>\n<td>Ctrl+K Ctrl+C</td>\n<td>添加行注释</td>\n</tr>\n<tr>\n<td>Ctrl+K Ctrl+U</td>\n<td>删除行注释</td>\n</tr>\n<tr>\n<td>Ctrl+/</td>\n<td>切换行注释</td>\n</tr>\n<tr>\n<td>Shift+Alt+A</td>\n<td>切换块注释</td>\n</tr>\n<tr>\n<td>Alt+Z</td>\n<td>切换换行</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>按 Press</th>\n<th>功能 Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl + T</td>\n<td>显示所有符号</td>\n</tr>\n<tr>\n<td>Ctrl + G</td>\n<td>转到行…</td>\n</tr>\n<tr>\n<td>Ctrl + P</td>\n<td>转到文件…</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + O</td>\n<td>转到符号…</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + M</td>\n<td>显示问题面板</td>\n</tr>\n<tr>\n<td>F8</td>\n<td>转到下一个错误或警告</td>\n</tr>\n<tr>\n<td>Shift + F8</td>\n<td>转到上一个错误或警告</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + Tab</td>\n<td>导航编辑器组历史记录</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>Alt + ←/→    返回/前进 Go back / forward<br>Ctrl + M    切换选项卡移动焦点 Toggle Tab moves focus</p>\n<h1 id=\"搜索和替换-Search-and-replace\"><a href=\"#搜索和替换-Search-and-replace\" class=\"headerlink\" title=\"搜索和替换 Search and replace\"></a>搜索和替换 Search and replace</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>按 Press</th>\n<th>功能 Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl + F</td>\n<td>查找</td>\n</tr>\n<tr>\n<td>Ctrl + H</td>\n<td>替换</td>\n</tr>\n<tr>\n<td>F3 / Shift + F3</td>\n<td>查找下一个/上一个</td>\n</tr>\n<tr>\n<td>Alt + Enter</td>\n<td>选择查找匹配的所有出现</td>\n</tr>\n<tr>\n<td>Ctrl + D</td>\n<td>将选择添加到下一个查找匹配</td>\n</tr>\n<tr>\n<td>Ctrl + K Ctrl + D</td>\n<td>将最后一个选择移至下一个查找匹配项</td>\n</tr>\n<tr>\n<td>Alt + C / R / W</td>\n<td>切换区分大小写/正则表达式/整个词</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"多光标和选择-Multi-cursor-and-selection\"><a href=\"#多光标和选择-Multi-cursor-and-selection\" class=\"headerlink\" title=\"多光标和选择 Multi-cursor and selection\"></a>多光标和选择 Multi-cursor and selection</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>按 Press</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Alt +单击</td>\n<td>插入光标</td>\n</tr>\n<tr>\n<td>Ctrl + Alt +↑/↓</td>\n<td>在上/下插入光标</td>\n</tr>\n<tr>\n<td>Ctrl + U</td>\n<td>撤消上一个光标操作</td>\n</tr>\n<tr>\n<td>Shift + Alt + I</td>\n<td>在选定的每一行的末尾插入光标</td>\n</tr>\n<tr>\n<td>Ctrl + I</td>\n<td>选择当前行</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + L</td>\n<td>选择当前选择的所有出现</td>\n</tr>\n<tr>\n<td>Ctrl + F2</td>\n<td>选择当前字的所有出现</td>\n</tr>\n<tr>\n<td>Shift + Alt + →</td>\n<td>展开选择</td>\n</tr>\n<tr>\n<td>Shift + Alt + ←</td>\n<td>缩小选择</td>\n</tr>\n<tr>\n<td>Shift + Alt + （拖动鼠标）</td>\n<td>列（框）选择</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + Alt +（箭头键）</td>\n<td>列（框）选择</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + Alt + PgUp / PgDown</td>\n<td>列（框）选择页上/下</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"丰富的语言编辑\"><a href=\"#丰富的语言编辑\" class=\"headerlink\" title=\"丰富的语言编辑\"></a>丰富的语言编辑</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>按 Press</th>\n<th>功能 Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl + 空格</td>\n<td>触发建议</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + Space</td>\n<td>触发器参数提示</td>\n</tr>\n<tr>\n<td>Tab    Emmet</td>\n<td>展开缩写</td>\n</tr>\n<tr>\n<td>Shift + Alt + F</td>\n<td>格式化文档</td>\n</tr>\n<tr>\n<td>Ctrl + K Ctrl + F</td>\n<td>格式选定区域</td>\n</tr>\n<tr>\n<td>F12</td>\n<td>转到定义</td>\n</tr>\n<tr>\n<td>Alt + F12</td>\n<td>Peek定义</td>\n</tr>\n<tr>\n<td>Ctrl + K F12</td>\n<td>打开定义到边</td>\n</tr>\n<tr>\n<td>Ctrl + .</td>\n<td>快速解决</td>\n</tr>\n<tr>\n<td>Shift + F12</td>\n<td>显示引用</td>\n</tr>\n<tr>\n<td>F2</td>\n<td>重命名符号</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + . /，</td>\n<td>替换为下一个/上一个值</td>\n</tr>\n<tr>\n<td>Ctrl + K Ctrl + X</td>\n<td>修剪尾随空格</td>\n</tr>\n<tr>\n<td>Ctrl + K M</td>\n<td>更改文件语言</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"编辑器管理-Editor-management\"><a href=\"#编辑器管理-Editor-management\" class=\"headerlink\" title=\"编辑器管理 Editor management\"></a>编辑器管理 Editor management</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>按 Press</th>\n<th>功能 Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl+F4, Ctrl+W</td>\n<td>关闭编辑器</td>\n</tr>\n<tr>\n<td>Ctrl+K F</td>\n<td>关闭文件夹</td>\n</tr>\n<tr>\n<td>Ctrl+\\</td>\n<td>拆分编辑器</td>\n</tr>\n<tr>\n<td>Ctrl+ 1 / 2 / 3</td>\n<td>聚焦到第1，第2或第3编辑器组</td>\n</tr>\n<tr>\n<td>Ctrl+K Ctrl+ ←/→</td>\n<td>聚焦到上一个/下一个编辑器组</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+PgUp / PgDown</td>\n<td>向左/向右移动编辑器</td>\n</tr>\n<tr>\n<td>Ctrl+K ← / →</td>\n<td>移动活动编辑器组</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"文件管理-File-management\"><a href=\"#文件管理-File-management\" class=\"headerlink\" title=\"文件管理 File management\"></a>文件管理 File management</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>按 Press</th>\n<th>功能 Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl+N</td>\n<td>新文件</td>\n</tr>\n<tr>\n<td>Ctrl+O</td>\n<td>打开文件…</td>\n</tr>\n<tr>\n<td>Ctrl+S</td>\n<td>保存</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+S</td>\n<td>另存为…</td>\n</tr>\n<tr>\n<td>Ctrl+K S</td>\n<td>全部保存</td>\n</tr>\n<tr>\n<td>Ctrl+F4</td>\n<td>关闭</td>\n</tr>\n<tr>\n<td>Ctrl+K Ctrl+W</td>\n<td>关闭所有</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+T</td>\n<td>重新打开关闭的编辑器</td>\n</tr>\n<tr>\n<td>Ctrl+K</td>\n<td>输入保持打开</td>\n</tr>\n<tr>\n<td>Ctrl+Tab</td>\n<td>打开下一个</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+Tab</td>\n<td>打开上一个</td>\n</tr>\n<tr>\n<td>Ctrl+K P</td>\n<td>复制活动文件的路径</td>\n</tr>\n<tr>\n<td>Ctrl+K R</td>\n<td>显示资源管理器中的活动文件</td>\n</tr>\n<tr>\n<td>Ctrl+K O</td>\n<td>显示新窗口/实例中的活动文件</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"显示-Display\"><a href=\"#显示-Display\" class=\"headerlink\" title=\"显示 Display\"></a>显示 Display</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>按 Press</th>\n<th>功能 Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>F11</td>\n<td>切换全屏</td>\n</tr>\n<tr>\n<td>Shift+Alt+1</td>\n<td>切换编辑器布局</td>\n</tr>\n<tr>\n<td>Ctrl+ = / -</td>\n<td>放大/缩小</td>\n<td>n</td>\n</tr>\n<tr>\n<td>Ctrl+B</td>\n<td>切换侧栏可见性</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+E</td>\n<td>显示浏览器/切换焦点</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+F</td>\n<td>显示搜索</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+G</td>\n<td>显示Git</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+D</td>\n<td>显示调试</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+X</td>\n<td>显示扩展</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+H</td>\n<td>替换文件</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+J</td>\n<td>切换搜索详细信息</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+C</td>\n<td>打开新命令提示符/终端</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+U</td>\n<td>显示输出面板</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+V</td>\n<td>切换Markdown预览</td>\n</tr>\n<tr>\n<td>Ctrl+K V</td>\n<td>从旁边打开Markdown预览</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"调试-Debug\"><a href=\"#调试-Debug\" class=\"headerlink\" title=\"调试 Debug\"></a>调试 Debug</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>按 Press</th>\n<th>功能 Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>F9</td>\n<td>切换断点</td>\n</tr>\n<tr>\n<td>F5</td>\n<td>开始/继续</td>\n</tr>\n<tr>\n<td>Shift+F5</td>\n<td>停止</td>\n</tr>\n<tr>\n<td>F11 / Shift+F11</td>\n<td>下一步/上一步</td>\n</tr>\n<tr>\n<td>F10</td>\n<td>跳过</td>\n</tr>\n<tr>\n<td>Ctrl+K Ctrl+I</td>\n<td>显示悬停</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"集成终端-Integrated-terminal\"><a href=\"#集成终端-Integrated-terminal\" class=\"headerlink\" title=\"集成终端 Integrated terminal\"></a>集成终端 Integrated terminal</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>按 Press</th>\n<th>功能 Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl+`</td>\n<td>显示集成终端</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+`</td>\n<td>创建新终端</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+C</td>\n<td>复制选定</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+V</td>\n<td>粘贴到活动端子</td>\n</tr>\n<tr>\n<td>Ctrl+↑ / ↓</td>\n<td>向上/向下滚动</td>\n</tr>\n<tr>\n<td>Shift+PgUp / PgDown</td>\n<td>向上/向下滚动页面</td>\n</tr>\n<tr>\n<td>Ctrl+Home / End</td>\n<td>滚动到顶部/底部</td>\n</tr>\n</tbody>\n</table>\n</div>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjidbf1q00001ry1d1mu5d3lz","tag_id":"cjidbf1q50003ry1d24m4hwe7","_id":"cjidbf1qb0008ry1d0s8mnb79"},{"post_id":"cjidbf1q20002ry1d8r8xjizq","tag_id":"cjidbf1qa0007ry1d77pqddi8","_id":"cjidbf1qf000dry1di8apbday"},{"post_id":"cjidbf1qb0009ry1d524p4a67","tag_id":"cjidbf1qe000bry1dpx6splo6","_id":"cjidbf1qi000gry1d11em7ucx"},{"post_id":"cjidbf1qj000iry1ddh6hhmv3","tag_id":"cjidbf1ql000kry1da9yibvd0","_id":"cjidbf1qm000nry1dx1d95yps"},{"post_id":"cjidbf1ql000lry1dbeh12wzf","tag_id":"cjidbf1qm000mry1duw532hoo","_id":"cjidbf1qn000ory1drr7rs0ub"}],"Tag":[{"name":"git","_id":"cjidbf1q50003ry1d24m4hwe7"},{"name":"linux command line, iterms, shortcut","_id":"cjidbf1qa0007ry1d77pqddi8"},{"name":"Linux, vim","_id":"cjidbf1qe000bry1dpx6splo6"},{"name":"embedding_lookup, tf.gather, embedding_lookup_sparse","_id":"cjidbf1ql000kry1da9yibvd0"},{"name":"vscode shortcut mac os","_id":"cjidbf1qm000mry1duw532hoo"}]}}